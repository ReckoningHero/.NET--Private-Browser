<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetBrowser</name>
    </assembly>
    <members>
        <member name="T:DotNetBrowser.AppCacheStatus">
            <summary>
                Possible application cache status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.AppCacheStatus.UNCACHED">
            <summary>
                Uncached application cache status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.AppCacheStatus.IDLE">
            <summary>
                Idle application cache status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.AppCacheStatus.CHECKING">
            <summary>
                Checking application cache status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.AppCacheStatus.DOWNLOADING">
            <summary>
                Downloading application cache status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.AppCacheStatus.READY">
            <summary>
                Update ready application cache status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.AppCacheStatus.OBSOLETE">
            <summary>
                Obsolete application cache status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.AppCacheStatus.LAST">
            <summary>
                Last application cache status.
            </summary>
        </member>
        <member name="T:DotNetBrowser.AuthRequiredParams">
            <summary>
                Represents parameters that are passed to the
                <see cref="M:DotNetBrowser.NetworkDelegate.OnAuthRequired(DotNetBrowser.AuthRequiredParams)"/> method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.AuthRequiredParams.#ctor(System.String,System.String,System.Int32,System.Boolean,System.String,System.String,DotNetBrowser.Browser)">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:DotNetBrowser.AuthRequiredParams.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Port">
            <summary>
                Port of the service issuing the authentication challenge.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Url">
            <summary>
                URL of a web page that causes authentication.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Host">
            <summary>
                Host of the service issuing the authentication challenge.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Scheme">
            <summary>
                Authentication scheme used, such as "basic" or "digest". In case of FTP server, this method returns empty string.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Realm">
            <summary>
                Realm of the authentication challenge. This method can return empty string.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.IsProxy">
            <summary>
                Indicates whether this authentication challenge came from a server or a proxy.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Username">
            <summary>
                Authentication credentials. Set this required username to a server or a proxy which initiated authentication
                challenge.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Password">
            <summary>
                Authentication credentials. Set this required password to a server or a proxy which initiated authentication
                challenge.
            </summary>
        </member>
        <member name="P:DotNetBrowser.AuthRequiredParams.Browser">
            <summary>
                The browser that initiated the authentication challenge.
            </summary>
        </member>
        <member name="T:DotNetBrowser.AutoDetectProxyConfig">
            <summary>
                With this proxy configuration the connection automatically
                detects proxy settings.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ProxyConfig">
            <summary>
                An abstract class that must be implemented by all possible proxy configurations.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BeforeRedirectParams">
            <summary>
                Represents parameters that are passed to the
                <see cref="M:DotNetBrowser.NetworkDelegate.OnBeforeRedirect(DotNetBrowser.BeforeRedirectParams)"/> method.
            </summary>
        </member>
        <member name="T:DotNetBrowser.RequestParams">
            <summary>
                Parent class for all NetworkDelegate method params.
            </summary>
        </member>
        <member name="M:DotNetBrowser.RequestParams.#ctor(System.Int64,System.String,System.String)">
            <summary>
                Constructs a new RequestParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
        </member>
        <member name="P:DotNetBrowser.RequestParams.Url">
            <summary>
                Gets the current request URL.
            </summary>
        </member>
        <member name="P:DotNetBrowser.RequestParams.RequestId">
            <summary>
                Gets a globally unique identifier for this request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.RequestParams.Method">
            <summary>
                Gets the current request method ("GET", "POST" etc.).
            </summary>
        </member>
        <member name="M:DotNetBrowser.BeforeRedirectParams.#ctor(System.Int64,System.String,System.String,System.Int32,System.String)">
            <summary>
                Constructs a new RequestParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="responseCode">The HTTP response code (e.g., 200, 404, and so on).</param>
            <param name="newURL">The new URL.</param>
        </member>
        <member name="P:DotNetBrowser.BeforeRedirectParams.ResponseCode">
            <summary>
                Gets the HTTP response code (e.g., 200, 404, and so on).
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeRedirectParams.NewURL">
            <summary>
                Gets the new URL.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BeforeSendHeadersParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.OnBeforeSendHeaders(BeforeSendHeadersParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BeforeSendHeadersParams.#ctor(System.Int64,System.String,System.String,DotNetBrowser.HttpHeaders,DotNetBrowser.HttpHeadersEx)">
            <summary>
                Constructs a new BeforeSendHeadersParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="headers">HTTP headers for the current request.</param>
            ///
            <param name="headersEx">HTTP headers for the current request.</param>
        </member>
        <member name="P:DotNetBrowser.BeforeSendHeadersParams.Headers">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeSendHeadersParams.HeadersEx">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BeforeSendProxyHeadersParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.OnBeforeSendProxyHeaders(BeforeSendProxyHeadersParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BeforeSendProxyHeadersParams.#ctor(System.Int64,System.String,System.String,DotNetBrowser.HttpHeaders,DotNetBrowser.HttpHeadersEx,System.Boolean,System.Boolean,DotNetBrowser.ProxyType,DotNetBrowser.HostPortPair)">
            <summary>
                Constructs a new BeforeSendProxyHeadersParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="headers">HTTP headers for the current request.</param>
            ///
            <param name="headersEx">HTTP headers for the current request.</param>
            <param name="didBypassProxy">
                Indicates whether the current proxy connection is using a direct connection due to
                proxy bypass rules.
            </param>
            <param name="didUsePacScript">Indicates whether the current proxy connection has been created using a PAC script.</param>
            <param name="proxyType">Type of the current proxy connection.</param>
            <param name="hostPortPair">Address of the current proxy server.</param>
        </member>
        <member name="P:DotNetBrowser.BeforeSendProxyHeadersParams.Headers">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeSendProxyHeadersParams.HeadersEx">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeSendProxyHeadersParams.DidBypassProxy">
            <summary>
                Gets true if the current proxy connection is using a direct connection due to
                proxy bypass rules.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeSendProxyHeadersParams.DidUsePacScript">
            <summary>
                Gets true if the current proxy connection has been created using a PAC script.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeSendProxyHeadersParams.ProxyType">
            <summary>
                Gets type of the current proxy connection.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeSendProxyHeadersParams.ProxyServerAddress">
            <summary>
                Gets address of the current proxy server.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BeforeURLRequestParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.OnBeforeURLRequest(BeforeURLRequestParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BeforeURLRequestParams.#ctor(System.Int64,System.String,System.String,DotNetBrowser.PostData)">
            <summary>
                Constructs a new BeforeURLRequestParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="postData">The new POST data that will be sent with POST request.</param>
        </member>
        <member name="M:DotNetBrowser.BeforeURLRequestParams.SetUrl(System.String)">
            <summary>
                Sets the new URL for request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BeforeURLRequestParams.PostData">
            <summary>
                Gets or sets PostData instance that provides access to post data. Changes will not be applied until
                BeforeURLRequestParams.SetPostData(PostData) method is called.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BrowserFrameID">
            <summary>
                Frame id constansts - used to detect which frame is used.
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserFrameID.MAIN_FRAME_ID">
            <summary>
                The main frame id constant. Can be used in the methods where the frameId
                parameter is required to perform the operation on the main frame of the currently
                loaded web page.
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserFrameID.FOCUSED_FRAME_ID">
            <summary>
                The focused frame id constant. Can be used in the methods where the frameId
                parameter is required to perform the operation on the focused frame of the currently
                loaded web page.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Browser">
            <summary>
                Represents Chromium engine instance that you can use in BrowserView
                to display web pages, load web pages, listen to the browser events such as
                'title change', 'frame start loading', 'frame finish loading', 'render gone' etc.
                Each Browser instance is running in a separate native process and communicates
                with the .NET process via Inter-Process-Communication bridge.
                When you don't need to use Browser instance you must
                dispose it using its <see cref="M:System.IDisposable.Dispose"/> method. If
                you dispose browser instance, you will not be able to use it anymore.
                To create a new Browser instance use <see cref="M:DotNetBrowser.BrowserFactory.Create"/> method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.GetDocument">
            <summary>
                Returns HTML document of the main frame of the currently loaded web page or null
                if the web page is not loaded or not available (e.g. PDF document is loaded).
            </summary>
            <returns>HTML document of the main frame of the currently loaded web page or null.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetDocument(System.Int64)">
            <summary>
                Returns HTML document of the specified frame on the currently loaded web page or null
                if the web page is not loaded or not available (e.g. PDF document is loaded).
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <returns>HTML document of the specified frame on the currently loaded web page or null.</returns>
            <exception cref="T:System.ArgumentException"> when <paramref name="frameId"/> is invalid.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.NodeAtPoint(System.Int32,System.Int32)">
            <summary>
                Returns information about HTML Node at the location specified by the x and y parameters
                at the coordinate space of the loaded web page. Returns null if there's no Node at the
                passed location on the loaded web page.
            </summary>
            <param name="x">the x-coordinate of the location.</param>
            <param name="y">the y-coordinate of the location.</param>
            <returns>
                <see cref="T:DotNetBrowser.DOM.DOMNodeAtPoint"/> object that contains information about Node at the location or
                null when there's no Node at this location.
            </returns>
        </member>
        <member name="M:DotNetBrowser.Browser.NodeAtPoint(System.Drawing.Point)">
            <summary>
                Returns information about HTML Node at the location specified by the point parameter
                at the coordinate space of the loaded web page. Returns null if there's no Node at the
                passed location on the loaded web page.
            </summary>
            <param name="point">
                the point defining the top-left corner of the location, given in the coordinate space
                of the loaded web page.
            </param>
            <returns>
                <see cref="T:DotNetBrowser.DOM.DOMNodeAtPoint"/> object that contains information about Node at the location or
                null when there's no Node at this location.
            </returns>
            <exception cref="T:System.ArgumentException">when point parameter is null.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadURL(System.String)">
            <summary>
                Navigates to a resource identified by a URL.
            </summary>
            <remarks>
                This method is invoked asynchronously. To make sure that the web page
                is loaded completely, use the FinishLoadingFrame event.
            </remarks>
            remarks>
            <param name="url">
                the URL of the resource to display.
                The parameter cannot be null
            </param>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadURL(DotNetBrowser.LoadURLParams)">
            <summary>
                Navigates to a resource identified by a LoadURLParams.Url
            </summary>
            <remarks>
                This method is invoked asynchronously. To make sure that the web page
                is loaded completely, use the FinishLoadingFrame
                event.
            </remarks>
            <param name="parameters">
                contains parameters such as URL and POST data. The parameter
                cannot be null
            </param>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadHTML(System.String)">
            <summary>
                Updates content of the browser instance with the html string.
                The currently loaded web page will be unloaded and new HTML content will be displayed.
                This operation is alternative for:
                loadHTML(new LoadHTMLParams("html...", "text/html", "UTF-8", null, false));
            </summary>
            <remarks>
                This method is asynchronous. If Browser instance doesn't have a text/html document
                (e.g. the PDF document is loaded), this method does nothing.
            </remarks>
            <param name="html">
                contains parameters such as HTML, Encoding, BaseURL etc. The parameter
                cannot be null
            </param>
            <exception cref="T:System.ArgumentException">when html is null</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadHTML(System.Int64,System.String)">
            <summary>
                Loads the given html content into the specified frame of the currently loaded
                document. The web frame will be unloaded and new HTML content will be displayed.
                This operation is alternative for:
                LoadHTML(frameId, new LoadHTMLParams("html...", "UTF-8", null));
            </summary>
            <remarks>
                This method is asynchronous. If Browser instance doesn't have a text/html document
                (e.g. the PDF document is loaded), this method does nothing.
            </remarks>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <param name="html">
                contains parameters such as HTML, Encoding, BaseURL etc. The parameter
                cannot be null.
            </param>
            <exception cref="T:System.ArgumentException">when html is null</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadHTML(DotNetBrowser.LoadHTMLParams)">
            <summary>
                Loads the given LoadHTMLParams.HTML content into the
                main frame of the currently loaded document.
                The currently loaded web page will be unloaded and new HTML content will be displayed.
            </summary>
            <remarks>
                This method is asynchronous. If Browser instance doesn't have a document, this method
                does nothing.
            </remarks>
            <param name="parameters">
                contains parameters such as HTML, Encoding, BaseURL etc. The parameter
                cannot be null.
            </param>
            <exception cref="T:System.ArgumentException">when parameters is null</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadHTML(System.Int64,DotNetBrowser.LoadHTMLParams)">
            <summary>
                Loads the given LoadHTMLParams.HTML content into the
                specified frame of the currently loaded document. The web frame
                with frameId will be unloaded and new HTML content will be displayed in it.
            </summary>
            <remarks>
                This method is asynchronous. If Browser instance doesn't have a text/html document
                (e.g. the PDF document is loaded), this method does nothing.
            </remarks>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <param name="parameters">
                contains parameters such as HTML, Encoding, BaseURL etc. The parameter
                cannot be null.
            </param>
            <exception cref="T:System.ArgumentException">when parameters is null</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.GetHTML">
            <summary>
                Returns HTML of the currently loaded web page or empty string if the web page is
                still loading and its HTML is not available yet. The result string is built
                dynamically from the current state of the DOM. If some JavaScript code on this web page
                modified its DOM, this method always returns the latest representation of the DOM.
            </summary>
            <returns>HTML of the currently loaded web page.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetHTML(System.Int64)">
            <summary>
                Returns HTML of a specified web frame on the currently loaded web page.
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <returns>HTML of the specified web frame.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadData(DotNetBrowser.LoadDataParams)">
            <summary>
                Loads the given LoadDataParams.Data string with specified mime type and
                optional text encoding into the main frame on the currently loaded document.
            </summary>
            <remarks>
                This method is asynchronous. If Browser instance doesn't have a text/html document
                (e.g. the PDF document is loaded), this method does nothing.
            </remarks>
            <param name="parameters">
                contains parameters such as data string, mime type, text encoding and
                base URL. The parameter cannot be null.
            </param>
            <exception cref="T:System.ArgumentException">when parameters is null</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.LoadData(System.Int64,DotNetBrowser.LoadDataParams)">
            <summary>
                Loads the given LoadDataParams.Data string with specified mime type and
                optional text encoding into the specified frame on the currently loaded document.
            </summary>
            <remarks>
                This method is asynchronous. If Browser instance doesn't have a text/html document
                (e.g. the PDF document is loaded), this method does nothing.
            </remarks>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <param name="parameters">
                contains parameters such as data string, mime type, text encoding and
                base URL. The parameter cannot be null.
            </param>
            <exception cref="T:System.ArgumentException">when parameters is null</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteJavaScript(System.String)">
            <summary>
                Executes javaScript in the context of the current page. This method
                is executed asynchronously, so when this method finish its execution there's
                no guaranty that passed script also has finished its execution.
            </summary>
            <remarks>
                If Browser instance doesn't have a text/html document (e.g. the PDF document
                is loaded), this method does nothing.
            </remarks>
            <param name="javaScript">a string that represents JavaScript code to be executed.</param>
            <exception cref="T:System.ArgumentException">when javaScript is null.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteJavaScript(System.Int64,System.String)">
            <summary>
                Executes javaScript in the context of the web frame identified by
                frameId. This method is executed asynchronously, so when this method
                finish its execution there's no guaranty that passed script also has finished
                its execution.
            </summary>
            <remarks>
                If Browser instance doesn't have a text/html document (e.g. the PDF document
                is loaded), this method does nothing.
            </remarks>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <param name="javaScript">a string that represents JavaScript code to be executed.</param>
            <exception cref="T:System.ArgumentException">when javaScript is null.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteJavaScriptAndReturnValue(System.String)">
            <summary>
                Executes javaScript in the context of the current page and returns the
                result of JavaScript execution as JSValue object. This method
                blocks the current thread execution and waits until passed javaScript
                finishes its execution. This method never returns null. If JavaScript return value
                is null, then this method returns a valid JSValue object. To make sure that it's
                null you can use <see cref="M:DotNetBrowser.JSValue.IsNull"/> method.
            </summary>
            <remarks>
                If Browser instance doesn't have a text/html document (e.g. the PDF document
                is loaded), this method does nothing.
            </remarks>
            <param name="javaScript">a string that represents JavaScript code to be executed.</param>
            <returns>an object that contains the result of JavaScript execution.</returns>
            <exception cref="T:System.ArgumentException">when javaScript is null.</exception>
            <exception cref="T:System.InvalidOperationException">when the JavaScript context is not present.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteJavaScriptAndReturnValue(System.Int64,System.String)">
            <summary>
                Executes javaScript in the context of the web frame identified by
                frameId and returns the result of JavaScript execution as
                <see cref="T:DotNetBrowser.JSValue"/> object. This method blocks the current thread execution
                and waits until passed javaScript finishes its execution. This method never
                returns null. If JavaScript return value is null, then this method returns a valid
                JSValue object. To make sure that it's null you can use <see cref="M:DotNetBrowser.JSValue.IsNull"/> method.
            </summary>
            <remarks>
                If Browser instance doesn't have a text/html document (e.g. the PDF document
                is loaded), this method does nothing.
            </remarks>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <param name="javaScript">a string that represents JavaScript code to be executed.</param>
            <returns>an object that contains the result of JavaScript execution.</returns>
            <exception cref="T:System.ArgumentException">when javaScript is null.</exception>
            <exception cref="T:System.InvalidOperationException">when the JavaScript context is not present.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.RegisterFunction(System.String,DotNetBrowser.BrowserFunction)">
            <summary>
                Registers an instance of <see cref="T:DotNetBrowser.BrowserFunction"/> instance and maps it with
                corresponding JavaScript function with the functionName, so that
                every time when JavaScript invokes the functionName, the corresponding
                function will be invoked.
            </summary>
            <remarks>
                <para>
                    The list of registered functions is checked every time when browser loads a
                    web page or frame. If you load web page and only then register JavaScript function,
                    the web page will not see it until you reload it.
                </para>
                <para>
                    If you register the "MyFunction" JavaScript function via this method and this
                    function already exists on the loaded web page, then the body of the JavaScript
                    function on the loaded web page will be invoked. The registerFunction method
                    doesn't allow overriding existing JavaScript functions.
                </para>
            </remarks>
            <param name="functionName">
                the name of JavaScript function that will be mapped to the
                <see cref="T:DotNetBrowser.BrowserFunction"/> instance.
            </param>
            <param name="function">
                an instance of <see cref="T:DotNetBrowser.BrowserFunction"/> that will be invoked
                every time when JavaScript invokes the functionName.
            </param>
        </member>
        <member name="M:DotNetBrowser.Browser.UnregisterFunction(System.String)">
            <summary>
                Remove the registered <see cref="T:DotNetBrowser.BrowserFunction"/> instance associated with the
                functionName from the list of registered JavaScript functions. When the
                function is unregistered, JavaScript cannot invoke it anymore and every attempt to
                access it will cause JavaScript error. If function is already unregistered, this
                method does nothing.
            </summary>
            <param name="functionName">the name of the registered JavaScript function.</param>
        </member>
        <member name="M:DotNetBrowser.Browser.Stop">
            <summary>
                Cancels any pending navigation or download operation and stops any dynamic page
                elements, such as background sounds and animations.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.GoBack">
            <summary>
                Navigates browser back or does nothing if it cannot navigate back.
                <see cref="M:DotNetBrowser.Browser.CanGoBack"/>
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.CanGoBack">
            <summary>
                Indicates whether browser can navigate back.
            </summary>
            <returns>true when browser can navigate back.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GoForward">
            <summary>
                Navigates browser forward or does nothing if it cannot navigate forward.
                <see cref="M:DotNetBrowser.Browser.CanGoForward"/>
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.CanGoForward">
            <summary>
                Indicates whether browser can navigate forward.
            </summary>
            <returns>true when browser can navigate forward.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.Reload">
            <summary>
                Reloads the currently loaded web page.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.Reload(System.Boolean)">
            <summary>
                Reloads the currently loaded web page.
            </summary>
            <remarks>
                If checkForRepost is true
                and the current web page has POST data the user it prompted to see if they really
                want to reload the page.
            </remarks>
            <param name="checkForRepost">
                if true and the current web page has POST data the user is
                prompted to see if they really want to reload the page, otherwise -
                POST data will be sent without prompting the user.
            </param>
        </member>
        <member name="M:DotNetBrowser.Browser.ReloadIgnoringCache">
            <summary>
                Reloads the currently loaded web page ignoring caches.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.SaveWebPage(System.String,System.String,DotNetBrowser.SavePageType)">
            <summary>
                Saves the current web page as a file or set of files. Page must be loaded completely. Use the
                FinishLoadingFrame to make sure that web page is loaded completely.
            </summary>
            <param name="filePath">
                the full path of a file in which the web page will be saved.
                If absolute path to the file does not exist, it will be created.
            </param>
            <param name="resourcesPath">
                the full path of the directory in which resources (e.g. images, css) of the
                web page will be saved. If the directory does not exist, it will be created.
            </param>
            <param name="saveType">
                determines how the web page will be saved: as HTML file with required resources
                (e.g. images, css etc.), a single HTML or MHTML file.
            </param>
            <exception cref="T:System.ArgumentException">
                when filePath is null or empty, dirPath is null
                or empty, saveType is null.
            </exception>
        </member>
        <member name="M:DotNetBrowser.Browser.IsDisposed">
            <summary>
                Returns true when the current browser instance is disposed.
            </summary>
            <returns>true when the current browser instance is disposed.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.ZoomIn">
            <summary>
                Updates zoom level for the currently loaded web page on one step up.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.ZoomOut">
            <summary>
                Updates zoom level for the currently loaded web page on one step down.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.ZoomReset">
            <summary>
                Resents zoom level for the currently loaded web page to default value.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.Print">
            <summary>
                Prints currently loaded web page. It does nothing if the web page is still being loaded. If you invoke this method
                while previous printing hasn't been finished/canceled yet, it will cancel previous printing. You should wait until
                previous printing is finished before calling this method again.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.Print(System.Int64)">
            <summary>
                Prints frame with the given frameId on the currently loaded web page. It does nothing
                if the web page is still being loaded.
                <p/>
                <p/>
                If you invoke this method while previous printing hasn't been finished/canceled yet,
                it will cancel previous printing. You should wait until previous printing is finished
                before calling this method again.
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <exception cref="T:System.ArgumentException">when frameId is invalid.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.KeyDown(DotNetBrowser.KeyParams)">
            <summary>
                Forward key down event to the current browser instance.
            </summary>
            <param name="parameters">contains parameters such as key value, unicode character and modifiers.</param>
        </member>
        <member name="M:DotNetBrowser.Browser.KeyUp(DotNetBrowser.KeyParams)">
            <summary>
                Forward key up event to the current browser instance.
            </summary>
            <param name="parameters">contains parameters such as key value, unicode character and modifiers.</param>
        </member>
        <member name="M:DotNetBrowser.Browser.GetFramesIds">
            <summary>
                Returns a list of child frames IDs of the currently loaded document. Each frame on the loaded document has
                corresponding unique frame ID that can be used to work with this frame to get its document, execute
                JavaScript code on this frame, etc.
                <p />
                You must call this method only when the entire document of a specified URL you navigate to is loaded
                completely. If you call this method when the document is still loading, you may receive only already
                loaded frames IDs. Each document has at least one frame (main frame).
            </summary>
        </member>
        <member name="M:DotNetBrowser.Browser.GetFramesIds(System.Int64)">
            <summary>
                Returns a list of child frames IDs for specified parent frame. Each frame on the loaded document has
                corresponding unique frame ID that can be used to work with this frame to get its document, execute
                JavaScript code on this frame, etc.
                <p />
                You must call this method only when the entire document of a specified URL you navigate to is loaded
                completely. If you call this method when the document is still loading, you may receive only already
                loaded frames IDs. Each document has at least one frame (main frame).
            </summary>
            <param name="frameId">the parent frame id</param>
            <returns>
                a list of child frames IDs for specified parent frame. If frame doesn't contain child frames this method
                returns empty collection.
            </returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetRemoteDebuggingURL">
            <summary>
                <para>
                    Returns a string that represents URL of the Chrome Developers Tools web page, that allows you to debug the
                    loaded web page in the current Browser instance. When you load this URL in another Browser instance or
                    Google Chrome application you will see standard Chrome Developer Tools page where you can inspect web page
                    HTML, debug JavaScript etc. To use this remote debugging feature you must specify the
                    <code> --remote-debugging-port=[port]</code> Chromium switch by calling
                    <see cref="M:DotNetBrowser.BrowserPreferences.SetChromiumSwitches(System.String[])"/> method before creating any Browser instance.
                </para>
            </summary>
            <remarks>
                do not load this URL in other web browser applications such as Mozilla FireFox, IE, etc. This may cause
                native crash in Chrome Developers Tools server. It's recommended that you access the URL from Google Chrome 31+ or
                another JxBrowser Browser instance.
            </remarks>
            <returns>
                the URL of the Chrome Developers Tools web page, that allows you to debug the loaded web page of
                the current Browser instance or empty string, if remote-debugging-port switch wasn't specified.
                See <a href="https://developers.google.com/chrome-developer-tools/">Chrome Developers Tools</a>
            </returns>
        </member>
        <member name="M:DotNetBrowser.Browser.FindText(DotNetBrowser.SearchParams)">
            <summary>
                Finds specified text, highlights all matches and selects the first match on the currently loaded web page.
                Browser performs search only through visible content on the loaded document. If some text is presented on the
                web page, but due to CSS rules it's not visible, Browser will not check this content during search. Also
                Browser will not find text on the document with size 0x0, so make sure that Browser component is visible and its
                size isn't empty.
            </summary>
            <param name="parameters"> search parameters, such as text to search, case-sensitive, search direction.</param>
            <returns> an object that contains number of matches and index of the currently highlighted and selected match. </returns>
            <exception cref="T:System.ArgumentException"> when <code>parameters</code> is <code>null</code>.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.StopFindingText(DotNetBrowser.StopFindAction)">
            <summary>
                Stops finding text and resets found matches highlighting.
            </summary>
            <param name="action">determines action, which will be applied to the selected match.</param>
        </member>
        <member name="M:DotNetBrowser.Browser.GetSelectedText">
            <summary>
                Returns selected text in the currently focused frame or empty string if there is no selection.
            </summary>
            <returns>selected text in the currently focused frame or empty string if there is no selection.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetSelectedText(System.Int64)">
            <summary>
                Returns selected text for the frame, specified by frameId or empty string if there is no selection.
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <returns>selected text for the frame, specified by frameId or empty string if there is no selection.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetSelectedHTML">
            <summary>
                Returns selected HTML in the currently focused frame or empty string if there is no selection.
            </summary>
            <returns>selected HTML in the currently focused frame or empty string if there is no selection.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetSelectedHTML(System.Int64)">
            <summary>
                Returns selected HTML for the frame, specified by frameId or empty string if there is no selection.
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <returns>selected HTML for the frame, specified by frameId or empty string if there is no selection.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.SetSize(System.Int32,System.Int32)">
            <summary>
                Updates size of the current Browser's view. By default Browser's view is empty, so if you load
                some document it will not be loaded at all because there's no sense in loading and rendering
                web document when view is empty.
                <p/>
                Use this method in headless mode when Browser isn't displayed, but you need to perform some
                UI related actions that depend on the loaded document size. For example, when you need to get
                Node at specific point in headless mode.
            </summary>
            <param name="width">width of the Browser's view in pixels. Cannot be negative.</param>
            <param name="height">height of the Browser's view in pixels. Cannot be negative.</param>
            <exception cref="T:System.ArgumentException">when width or height is negative</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Updates bounds of the current Browser's view. By default Browser's view is empty, so if you load
                some document it will not be loaded at all because there's no sense in loading and rendering
                web document when view is empty.
                <p/>
                Use this method in headless mode when Browser isn't displayed, but you need to perform some
                UI related actions that depend on the loaded document size. For example, when you need to get
                Node at specific point in headless mode.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the Browser's view.</param>
            <param name="y">The y-coordinate of the upper-left corner of the Browser's view.</param>
            <param name="width">width of the Browser's view in pixels. Cannot be negative.</param>
            <param name="height">height of the Browser's view in pixels. Cannot be negative.</param>
            <exception cref="T:System.ArgumentException">when width or height is negative</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.GetJavaScriptContext">
            <summary>
                Returns JavaScript context of the main frame on the currently loaded web page. Returns null if
                no main frame is available or JavaScript context doesn't exist for main frame (e.g.
                the web page doesn't contain any JavaScript code at all).
                <p />
                JavaScript context is created automatically when JavaScript code is executed on the web page.
                If frame doesn't have JavaScript code, then method returns null. To force JavaScript context
                creation on the web page without JavaScript, you can call the
                ExecuteJavaScriptAndReturnValue(String) method.
            </summary>
            <returns>JavaScript context of the main frame or null if no context is available for main frame.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetJavaScriptContext(System.Int64)">
            <summary>
                Returns JavaScript context of a specified frameId on the currently loaded web page.
                Returns null if there's no frame with the frameId or JavaScript context isn't
                available for this frame.
                <p />
                JavaScript context is created automatically when JavaScript code is executed on the web page.
                If frame doesn't have JavaScript code, then method returns null. To force JavaScript context
                creation on the web page without JavaScript, you can call the
                ExecuteJavaScriptAndReturnValue(String) method.
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <returns>JavaScript context for a specified frameId or null.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.ReplaceMisspelledWord(System.String)">
            <summary>
                Replaces misspelled word under cursor on the currently loaded web page with the given word.
                If there's no misspelled word under cursor, this method does nothing.
            </summary>
            <param name="word">a string that represents word for replacement.</param>
            <exception cref="T:System.ArgumentException">when word is null or empty string.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.AddWordToSpellCheckerDictionary(System.String)">
            <summary>
                Adds a new word to current user's spellchecker dictionary and returns boolean value that
                indicates whether word has been added to the dictionary successfully or not.
            </summary>
            <param name="word">a string that represents word to add. Cannot be null or empty string.</param>
            <returns>
                true if word has been successfully added to user's dictionary.
                Returns false if word already in user's dictionary, not a UTF-8 string, longer than 99 bytes,
                leading/trailing whitespace, or empty.
            </returns>
            <exception cref="T:System.ArgumentException"> when word is null or empty string.</exception>
        </member>
        <member name="M:DotNetBrowser.Browser.IsCommandEnabled(DotNetBrowser.EditorCommand)">
            <summary>
                Returns true if the command can be executed in the currently focused frame on
                the loaded web page. Most of the commands are always disabled for unfocused frames.
                There's no sense in checking whether command is enabled for unfocused frame.
                Use this method only to check whether a specified command can be used in the currently focused frame.
            </summary>
            <param name="command">the command to check.</param>
            <returns>
                false if the command cannot be executed in the currently focused frame or
                there's no focused frame at all.
            </returns>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteCommand(DotNetBrowser.EditorCommand)">
            <summary>
                Executes the command in the currently focused frame on the loaded web page. You can
                find out when command requires value by calling <see cref="!:EditorCommand.IsValueRequired()"/> method.
            </summary>
            <param name="command">the command to execute.</param>
            <returns>true if command has been executed successfully.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteCommand(System.Int64,DotNetBrowser.EditorCommand)">
            <summary>
                Executes the command in the frame, specified by frameId. You can find out
                when command requires value by calling <see cref="!:EditorCommand.IsValueRequired()"/> method.
            </summary>
            <param name="frameId">id of the frame, in which the command will be executed.</param>
            <param name="command">command the command to execute.</param>
            <returns>true if command has been executed successfully.</returns>
            <exception cref="T:System.ArgumentException">when frameId is invalid <see cref="M:DotNetBrowser.Browser.GetFramesIds"/>. </exception>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteCommand(DotNetBrowser.EditorCommand,System.String)">
            <summary>
                Executes the command with command value in the focused frame on
                the loaded web page. You can find out when command requires value by calling
                <see cref="!:EditorCommand.IsValueRequired()"/> method.
            </summary>
            <param name="command">the command to execute.</param>
            <param name="value">a string that represents command value.</param>
            <returns>true if command has been executed successfully.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.ExecuteCommand(System.Int64,DotNetBrowser.EditorCommand,System.String)">
            <summary>
                Executes the command with command value in the frame specified by frameId.
                To find out whether command requires a value you can use the
                <see cref="!:EditorCommand.IsValueRequired()"/> method.
            </summary>
            <param name="frameId">id of the frame, in which the command will be executed.</param>
            <param name="command">the command to execute.</param>
            <param name="value">a string that represents command value.</param>
            <returns>true if command has been executed successfully.</returns>
            <exception cref="T:System.ArgumentException">when frameId is invalid <see cref="M:DotNetBrowser.Browser.GetFramesIds"/>. </exception>
        </member>
        <member name="M:DotNetBrowser.Browser.GetLocalWebStorage">
            <summary>
                Returns Local Web Storage associated with main frame.
            </summary>
            <returns>Local Web Storage associated with main frame or null.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetLocalWebStorage(System.Int64)">
            <summary>
                Returns Local Web Storage associated with specified frame or null.
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <returns>Local Web Storage associated with main frame or null.</returns>
            <exception cref="T:System.ArgumentException">
                when frameId is invalid.
                <see cref="M:DotNetBrowser.Browser.GetFramesIds(System.Int64)"/>
            </exception>
        </member>
        <member name="M:DotNetBrowser.Browser.GetSessionWebStorage">
            <summary>
                Returns Session Web Storage associated with main frame.
            </summary>
            <returns>Session Web Storage associated with main frame or null.</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.GetSessionWebStorage(System.Int64)">
            <summary>
                Returns Session Web Storage associated with specified frame or null.
            </summary>
            <param name="frameId">unique identifier of a web frame on the currently loaded web page.</param>
            <returns>Session Web Storage associated with main frame or null.</returns>
            <exception cref="T:System.ArgumentException">
                when frameId is invalid.
                <see cref="M:DotNetBrowser.Browser.GetFramesIds(System.Int64)"/>
            </exception>
        </member>
        <member name="M:DotNetBrowser.Browser.CreateEvent(System.String)">
            <summary>
                Return custom DOM event.
            </summary>
            <param name="eventType">the type of this DOM event</param>
            <returns>custom DOM event</returns>
        </member>
        <member name="M:DotNetBrowser.Browser.CreateEvent(System.String,System.Boolean,System.Boolean)">
            <summary>
                Return custom DOM event.
            </summary>
            <param name="eventType">the type of this DOM event</param>
            <param name="bubbles">if the event can bubble the value is true, else the value is false.</param>
            <param name="cancelable">
                if the default action can be prevented the value is true,
                else the value is false.
            </param>
            <returns>custom DOM event</returns>
        </member>
        <member name="P:DotNetBrowser.Browser.ImageProvider">
            <summary>
                Gets IImageProvider that allows to get rendered image.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.Context">
            <summary>
                Gets BrowserContext associated with this browser instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.PopupHandler">
            <summary>
                Popup windows handler.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.DialogHandler">
            <summary>
                Dialogs handler.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.LoadHandler">
            <summary>
                Load handler that will be invoked every time when Browser loads
                a web page. It can be used to cancel some URL loading.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.NativeCrashHandler">
            <summary>
                Chromium native process crash handler.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.PluginManager">
            <summary>
                Plugin manager that provides info about all available plugins and allows enabling/disabling them.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.CacheStorage">
            <summary>
                Provides access to the cache storage associated with this Browser instance. The cache storage saves all
                cache files in the Browser's user data directory. If you need to configure
                each Browser to use unique cache storage which is not accessible for
                other Browser instances, you need to provide unique user data directory for
                each Browser instance.
                <p />
                You cannot use the cache storage when the current Browser instance is already disposed.
            </summary>
            <value>the cache storage associated with the current Browser instance.</value>
        </member>
        <member name="P:DotNetBrowser.Browser.AppCacheStorage">
            <summary>
                Provides access to the application cache storage associated with this Browser instance. The cache storage saves all
                application cache files in the Browser's user data directory. If you need to configure
                each Browser to use unique application cache storage which is not accessible for
                other Browser instances, you need to provide unique user data directory for
                each Browser instance.
                <p />
                You cannot use the application cache storage when the current Browser instance is already disposed.
            </summary>
            <value>the application cache storage associated with the current Browser instance.</value>
        </member>
        <member name="P:DotNetBrowser.Browser.CookieStorage">
            <summary>
                Provides access to the cookie storage. By default all Browser instances
                can access persistent cookies of each other. Since each Browser instance
                is running in a separate native process the session cookies are not
                shared between such Browser instances. The cookie storage saves all the
                cookies in the Browser's user data directory. If you need to configure
                each Browser to use unique cookie storage which is not accessible for
                other Browser instances, you need to provide unique user data directory for
                each Browser instance. The data directory path can be provided via
                <see cref="M:DotNetBrowser.BrowserContext.#ctor(DotNetBrowser.BrowserContextParams)"/> object that must be passed
                to the <see cref="M:DotNetBrowser.BrowserFactory.Create(DotNetBrowser.BrowserContext)"/> factory method.
                <p/>
                You cannot use the cookie storage when its Browser instance is disposed.
            </summary>
            <value>the cookie storage.</value>
        </member>
        <member name="P:DotNetBrowser.Browser.ContextMenuHandler">
            <summary>
                Gets or sets the handler for the context menu requests that will be invoked every
                time the user clicks the right mouse button.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.DownloadHandler">
            <summary>
                Gets or sets the file download handler that will be invoked every time the Browser
                downloads a file. By default this method returns null, so all file downloads are suppressed.
            </summary>
            <value>
                the registered file download handler or null if no file
                download handler is currently registered.
            </value>
        </member>
        <member name="P:DotNetBrowser.Browser.PermissionHandler">
            <summary>
                Gets or sets permission handler that will be invoked every time the engine asks
                about permission for different functionality such as geolocation, desktop.
                notifications, etc.
                By default, this method returns null which indicates that all permission requests will be denied.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.URL">
            <summary>
                URL of the currently loaded web page.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.Title">
            <summary>
                A string that represents a title of the currently loaded web page.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.AcceptLanguage">
            <summary>
                Gets or sets the accept language for current Browser instance. If you don't provide an
                accept language value using this property or <see cref="T:DotNetBrowser.BrowserContextParams"/>, then a default
                accept language will be used. Accept language passed as an argument overrides value set by
                <see cref="P:DotNetBrowser.BrowserContextParams.AcceptLanguage"/> property or the
                <see cref="M:DotNetBrowser.BrowserContextParams.#ctor(System.String,System.String)"/> constructor.
            </summary>
            <exception cref="T:System.ArgumentException">
                when AcceptLanguage is null, blank, empty,
                or is not supported by Chromium engine.
            </exception>
        </member>
        <member name="P:DotNetBrowser.Browser.UserAgent">
            <summary>
                Gets or sets the user agent string for current Browser instance. If you don't provide
                user agent string using this property or <see cref="M:DotNetBrowser.BrowserPreferences.SetUserAgent(System.String)"/>,
                then a default user agent string will be used.
            </summary>
            <remarks>This method is executed synchronously.</remarks>
            <exception cref="T:System.ArgumentException">when parameters is null or empty</exception>
        </member>
        <member name="P:DotNetBrowser.Browser.Preferences">
            <summary>
                Browser's preferences.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.Loading">
            <summary>
                Returns true when browser is loading resource.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.ZoomLevel">
            <summary>
                Gets or sets zoom level for the currently loaded web page. Zoom level is configured
                for each domain separately. For example, if you load the www.a.com web page and
                set zoom level to 2.5, then load the www.b.org web page, the zoom level for
                www.b.org web page will be reset to default value. When you load the
                www.a.com web page again, its zoom level will be restored to 2.5 automatically.
                <para>
                    This method is executed asynchronously.
                </para>
                <para>
                    <list type="">
                        <item>
                            To zoom in use the positive zoom level. For example, 2.0, 1.5.
                        </item>
                        <item>
                            To zoom out use the negative zoom level. For example, -1.0, -2.5.
                        </item>
                    </list>
                </para>
            </summary>
            <returns>zoom level value.</returns>
        </member>
        <member name="P:DotNetBrowser.Browser.BrowserType">
            <summary>
                Return current rendering type for browser
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.PrintHandler">
            <summary>
                Gets or sets the file download handlerthat will be invoked every time when printing requests for print settings.
                By default this method returns null. When it is <code>null</code> it means silent mode where print dialog
                isn't displayed and web page is printed using default system print settings. On different platforms
                default system print settings can be different.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.FullScreenHandler">
            <summary>
                Gets or sets a new full screen handler to receive notifications when HTML element on the web page goes
                into a full screen mode.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.MediaStreamDeviceManager">
            <summary>
                Gets the media device manager of the current Browser instance.
                Provides access to media device manager of the current Browser instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.AudioMuted">
            <summary>
                Gets or sets mutes all audio output for this Browser instance.
                True when audio output must be muted, false otherwise.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.AudioPlaying">
            <summary>
                Gets true when the audio is currently playing on the loaded web page.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.ZoomEnabled">
            <summary>
                Gets or sets zoom changes enabled. By default, zoom functionality
                is enabled. You can change zoom level for the currently loaded web page.
                <p />
                To disable zoom functionality pass false. In this case the browser
                instance will revert to the default zoom level, and all attempted zoom changes
                will be ignored.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.IsSandboxEnabled">
            <summary>
                Returns true if sandbox enabled for render process.
                Should be used only for testing purposes.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.RenderProcessInfo">
            <summary>
                Gets information about Chromium render process associated with the current Browser
                instance. When Chromium loads a new web page, it creates a new render process where DOM
                and JavaScript are running. This render process can be terminated by Chromium engine when
                a new web page with different domain is loaded. So, this method can return different
                render process information.
                <p>
                    The information about render process is collected at the moment of the method invocation.
                    You must call this method again if you need to get the up to date information.
                </p>
            </summary>
        </member>
        <member name="P:DotNetBrowser.Browser.CustomStylesheet">
            <summary>
                Gets or sets stylesheet which will be applied to any loaded document.
                The CustomStylesheet CSS properties don't override the intersected properties on the loaded webpage.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.FinishLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been finished.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.StartLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been started.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.FailLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been failed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.ProvisionalLoadingFrameEvent">
            <summary>
                An event that indicates that provisional load for a specified frame was successfully committed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.DocumentLoadedInFrameEvent">
            <summary>
                An event that indicates that frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.DocumentLoadedInMainFrameEvent">
            <summary>
                An event that indicates that main frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.RenderCreatedEvent">
            <summary>
                An event that indicates that the render process is created.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.RenderGoneEvent">
            <summary>
                An event that indicates that the render process is gone.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.RenderResponsiveEvent">
            <summary>
                An event that indicates that the render process is no longer hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.RenderUnresponsiveEvent">
            <summary>
                An event that indicates that the render process is hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.StatusChangedEvent">
            <summary>
                An event that indicates that the status has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.TitleChangedEvent">
            <summary>
                An event that indicates that the title of a document in main frame has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.ConsoleMessageEvent">
            <summary>
                An event that indicates that the message was added to the console.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.DragEnterEvent">
            <summary>
                An event that indicates that the object is dragged into the browser's bounds.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.DragExitEvent">
            <summary>
                An event that indicates that the object is dragged out of the browser's bounds.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.DropEvent">
            <summary>
                An event that indicates when a drag-and-drop operation is completed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.HandleGestureEvent">
            <summary>
                An event that indicates that user
                has made a gesture interaction <see cref="T:DotNetBrowser.GestureType"/>
                with device <see cref="T:DotNetBrowser.SourceDevice"/>.
                Provides an ability to discard 
                performed interaction.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.GestureEvent">
            <summary>
                An event that indicates that user
                has made a gesture interaction <see cref="T:DotNetBrowser.GestureType"/>
                with device <see cref="T:DotNetBrowser.SourceDevice"/>.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.DisposeEvent">
            <summary>
                An event that indicates that browser instance disposed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.ScriptContextCreated">
            <summary>
                An event that indicates that JavaScript context has been created. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Browser.ScriptContextDestroyed">
            <summary>
                An event that indicates that JavaScript context has been destroyed. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BrowserContext">
            <summary>
                Describes context of a <see cref="T:DotNetBrowser.Browser"/> instance and provides path to the directory where
                user data files such as cookies, history, cache will be stored. Two Browser instances with
                the same BrowserContext will share the same session data (e.g. cookies, cache etc.).
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserContext.#ctor(DotNetBrowser.BrowserContextParams)">
            <summary>
                Constructs a new BrowserContext instance with specified parameters.
            </summary>
            <param name="browserContextParams">
                represents parameters for the current context such as absolute path to the directory where
                user data files will be stored (e.g. history, cookies, cache), proxy settings, etc.
                Cannot be null.
            </param>
            <exception cref="T:System.ArgumentNullException">when browserContextParams is null.</exception>
        </member>
        <member name="M:DotNetBrowser.BrowserContext.Dispose">
            <summary>
                Dispose object and free all resources
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserContext.Dispose(System.Boolean)">
            <summary>
                Dispose object and free all resources
            </summary>
            <param name="disposing">True if managed resources should be disposed.</param>
        </member>
        <member name="M:DotNetBrowser.BrowserContext.Finalize">
            <summary>
                Destructor
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.DefaultContext">
            <summary>
                Gets default browser context that is used in the <see cref="M:DotNetBrowser.BrowserFactory.Create"/> method.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.ZoomService">
            <summary>
                <see cref="P:DotNetBrowser.BrowserContext.ZoomService"/> associated with the current context.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.NetworkService">
            <summary>
                <see cref="P:DotNetBrowser.BrowserContext.NetworkService"/> associated with the current context.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.SpellCheckerService">
            <summary>
                Returns SpellCheckerService associated with the current context.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.NotificationService">
            <summary>
                Gets <see cref="P:DotNetBrowser.BrowserContext.NotificationService"/> associated with the current context.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.ProtocolService">
            <summary>
                Gets <see cref="T:DotNetBrowser.Protocols.IProtocolHandler"/> associated with the current context.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.ID">
            <summary>
                Gets a value that uniquely identifies this BrowserContext instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.DataDir">
            <summary>
                Gets absolute path to the directory where user data files will be stored.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.CacheDir">
            <summary>
                Gets absolute path to the directory where cache files will be stored.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.StorageType">
            <summary>
                Returns Chromium data storage type for the current context provided
            via the <see cref="!:BrowserContextParams.StorageType"/> property.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.AcceptLanguage">
            <summary>
                Gets or sets a string that represents Accept-Language request-header field. This
                field restricts the set of natural languages that are preferred as a response to the request.
                The default Accept-Language is  <c>"en-us"</c>.
                See <see cref="!:https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"/> W3 Documentation.
            </summary>
            <example>
                <c>"fr, en-gb;q=0.8, en;q=0.7"</c> would mean: "I prefer French, but
                will accept British English and other types of English."
                Note, that all languages which are assigned a quality factor
                greater than 0 are acceptable.
            </example>
            <exception cref="T:System.ArgumentException">when value set empty.</exception>
        </member>
        <member name="P:DotNetBrowser.BrowserContext.ProxyConfig">
            <summary>
                Gets or sets proxy configuration of the current browser context instance or null if no proxy
                configuration was provided during Browser context instance instantiation.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BrowserContextParams">
            <summary>
                Represents parameters required for BrowserContext instance. Using
                BrowserContextParams you can configure BrowserContext with different settings
                such as Chromium data directory, default accept language, proxy settings, etc.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserContextParams.#ctor(System.String)">
            <summary>
                Constructs a new BrowserContextParams instance with specified dataDir
                and default accept language obtained via BrowserPreferences.getDefaultAcceptLanguage()
                method. The instance will automatically set cache and memory directory relative to the
                dataDir location. Proxy settings will be configured to use system proxy.
            </summary>
            <param name="dataDir">
                absolute location of the directory where Chromium will store data files.
                Cannot be null or empty.
            </param>
            <exception cref="T:System.ArgumentNullException">when dataDir is null, acceptLanguage is null.</exception>
            <exception cref="T:System.ArgumentException">when dataDir is empty, acceptLanguage is empty.</exception>
        </member>
        <member name="M:DotNetBrowser.BrowserContextParams.#ctor(System.String,System.String)">
            <summary>
                Constructs a new BrowserContextParams instance with specified dataDir
                and default accept language obtained via BrowserPreferences.getDefaultAcceptLanguage()
                method. The instance will automatically set cache and memory directory relative to the
                dataDir location. Proxy settings will be configured to use system proxy.
            </summary>
            <param name="dataDir">
                absolute location of the directory where Chromium will store data files.
                Cannot be null or empty.
            </param>
            <param name="acceptLanguage">
                a string that represents default accept language (e.g. en-us).
                Cannot be null or empty.
            </param>
            <exception cref="T:System.ArgumentNullException">when dataDir is null, acceptLanguage is null.</exception>
            <exception cref="T:System.ArgumentException">when dataDir is empty, acceptLanguage is empty.</exception>
            <exception cref="T:System.ArgumentException">when acceptLanguage parameter is null or empty.</exception>
        </member>
        <member name="P:DotNetBrowser.BrowserContextParams.DataDir">
            <summary>
                Gets absolute path to the directory where user data files will be stored.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContextParams.AcceptLanguage">
            <summary>
                Gets or sets a string that represents Accept-Language request-header field. This
                field restricts the set of natural languages that are preferred as a response to the request.
                The default Accept-Language is  <c>"en-us"</c>.
                See <see cref="!:https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"/> W3 Documentation.
            </summary>
            <example>
                <c>"fr, en-gb;q=0.8, en;q=0.7"</c> would mean: "I prefer French, but
                will accept British English and other types of English."
                Note, that all languages which are assigned a quality factor
                greater than 0 are acceptable.
            </example>
            <exception cref="T:System.ArgumentException">when value set empty.</exception>
        </member>
        <member name="P:DotNetBrowser.BrowserContextParams.CacheDir">
            <summary>
                Gets or sets absolute path to the directory where Chromium engine will store cache. Java and Chromium
                processes must have rights to write to the directory.
            </summary>
            <exception cref="T:System.ArgumentException">when cacheDir is null or empty.</exception>
        </member>
        <member name="P:DotNetBrowser.BrowserContextParams.ProxyConfig">
            <summary>
                Gets or sets proxy configuration of the current browser instance or null if no proxy
                configuration was provided during Browser instance instantiation.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserContextParams.StorageType">
            <summary>
            Data storage type that defines how to store all the data
            such as cache, cookies, HTML5 WebStorage files, etc.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BrowserException">
            <summary>
                Thrown when <see cref="T:DotNetBrowser.BrowserFactory"/> is failed to create <see cref="T:DotNetBrowser.Browser"/> instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserException.#ctor(System.String)">
            <summary>
                Constructs a new BrowserException instance.
            </summary>
            <param name="msg">The message that describes the error.</param>
        </member>
        <member name="M:DotNetBrowser.BrowserException.#ctor(System.String,System.Exception)">
            <summary>
                Constructs a new BrowserException instance.
            </summary>
            <param name="msg">The message that describes the error.</param>
            <param name="e">
                The exception that is the cause of the current exception, or a null reference
                if no inner exception is specified.
            </param>
        </member>
        <member name="T:DotNetBrowser.BrowserFactory">
            <summary>
                A browser factory for creating browser instances.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserFactory.Create">
            <summary>
                Creates a new Browser instance. This method is equivalent of
                BrowserFactory.Create(manager, BrowserContext.DefaultContext).
            </summary>
            <remarks>
                <para>
                    The created Browser instance will be configured to use system proxy settings and default
                    user data directory that can be received using the <see cref="M:DotNetBrowser.BrowserPreferences.GetDefaultDataDir"/>
                    method.
                </para>
                <para>
                    All Browser instances created using this method will share browser session including cookies.
                </para>
            </remarks>
            <returns>a new Browser instance.</returns>
            <exception cref="T:DotNetBrowser.BrowserException">when factory failed to create Browser instance.</exception>
        </member>
        <member name="M:DotNetBrowser.BrowserFactory.Create(DotNetBrowser.BrowserContext)">
            <summary>
                Creates a new browser instance using the entire browserContext. This method is equivalent of
                BrowserFactory.Create(manager, browserContext, null). The created Browser instance
                will be configured to use system proxy settings. Two Browser instances created with the same
                browserContext will share the same browser session including cookies and cache data.
            </summary>
            <param name="browserContext">context for a new Browser instance. Cannot be null.</param>
            <returns>a new Browser instance.</returns>
            <exception cref="T:DotNetBrowser.BrowserException">when factory failed to create Browser instance.</exception>
            <exception cref="T:System.ArgumentException">when browserContext parameter is null.</exception>
        </member>
        <member name="M:DotNetBrowser.BrowserFactory.Create(DotNetBrowser.BrowserType)">
            <summary>
                Creates a new browser instance with specified browser rendering model. The created Browser instance
                will be configured to use system proxy settings and default context.
            </summary>
            <param name="browserType">browser rendering model. Cannot be null.</param>
            <returns>a new Browser instance.</returns>
            <exception cref="T:DotNetBrowser.BrowserException">when factory failed to create Browser instance.</exception>
            <exception cref="T:System.ArgumentException">when browserContext parameter is null.</exception>
        </member>
        <member name="M:DotNetBrowser.BrowserFactory.Create(DotNetBrowser.BrowserContext,DotNetBrowser.BrowserType)">
            <summary>
                Creates a new browser instance using the entire browserContext and specific proxy configuration.
                Two Browser instances created with the same browserContext will share the same browser session
                including cookies and cache data.
            </summary>
            <param name="browserContext">context for a new Browser instance. Cannot be null.</param>
            <param name="browserType">Browser rendering type.</param>
            <returns>a new Browser instance.</returns>
            <exception cref="T:DotNetBrowser.BrowserException">when factory failed to create Browser instance.</exception>
            <exception cref="T:System.ArgumentException">when browserContext parameter is null.</exception>
        </member>
        <member name="T:DotNetBrowser.BytesData">
            <summary>
                Contains upload parameters represented as plain bytes.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PostData">
            <summary>
                General interface for representation POST data. Depending of the PostDataContentType can be casted to one of
                specific
                implementations: <see cref="T:DotNetBrowser.FormData"/>, <see cref="T:DotNetBrowser.MultipartFormData"/>, <see cref="T:DotNetBrowser.RawData"/>.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PostData.ContentType">
            <summary>
                Gets content type of POST data.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BytesData.#ctor(System.String)">
            <summary>
                Constructs a new BytesData instance.
            </summary>
            <param name="text">a string that represent post data.</param>
        </member>
        <member name="M:DotNetBrowser.BytesData.#ctor(System.Byte[])">
            <summary>
                Constructs a new BytesData instance.
            </summary>
            <param name="bytes">plain bytes</param>
        </member>
        <member name="P:DotNetBrowser.BytesData.Data">
            <summary>
                Gets or sets bytes that will be used as upload data parameter.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BytesData.ContentType">
            <summary>
                Gets <see cref="F:DotNetBrowser.PostDataContentType.BYTES"/>.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BuildInfo">
            <summary>Info about the continuous integration server build that produced this binary.</summary> 
        </member>
        <member name="F:DotNetBrowser.BuildInfo.BuildNumber">
            <summary>The current build number, such as "153"</summary> 
        </member>
        <member name="F:DotNetBrowser.BuildInfo.BuildType">
            <summary>The build type.</summary> 
        </member>
        <member name="F:DotNetBrowser.BuildInfo.BuildDate">
            <summary>The build date.</summary> 
        </member>
        <member name="F:DotNetBrowser.BuildInfo.BuildTime">
            <summary>The build time.</summary> 
        </member>
        <member name="T:DotNetBrowser.CertificateRequestResult">
            <summary>
                Represents possible certificate request results.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CertificateRequestResult.CONTINUE">
            <summary>
                Continue processing the request. Result will be returned asynchronously.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CertificateRequestResult.CANCEL">
            <summary>
                Cancels the request synchronously using a net::ERR_ABORTED.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CertificateRequestResult.DENY">
            <summary>
                Denies the request synchronously using a net::ERR_INSECURE_RESPONSE.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ColorChooserParams">
            <summary>
                Represents parameters that are passed to the OnColorChooser event.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ColorChooserParams.#ctor(System.Drawing.Color)">
            <summary>
                Constructs a new ColorChooserParams instance with the given color.
            </summary>
            <param name="color">default selected color.</param>
        </member>
        <member name="P:DotNetBrowser.ColorChooserParams.Color">
            <summary>
                Gets or sets selected color. By default this method returns color defined
                in the "value" attribute of input type = color HTML element.
            </summary>
            <returns>selected color.</returns>
        </member>
        <member name="P:DotNetBrowser.ColorChooserParams.Status">
            <summary>
                Gets or sets the dialog close status indicates the way (OK or Cancel button) 
                the dialog was closed <see cref="T:DotNetBrowser.CloseStatus"/>.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Internals.Asn1Tag">
            <summary>
                ASN.1 universal tags
            </summary>
        </member>
        <member name="T:DotNetBrowser.Internals.Asn1Node">
            <summary>
                This class represents a data structure in ASN.1.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Internals.IPC.Sender.Send(DotNetBrowser.Internals.IPC.Messages.Message)">
            <summary>
                Adds the message to the messages queue to be sent to remote process asynchronously.
            </summary>
            <param name="message">the message that will be added to messages queue.</param>
        </member>
        <member name="M:DotNetBrowser.Internals.IPC.Sender.Post``1(``0)">
            <summary>
                Creates transaction message and sends it to remote process and waits until transaction is completed.
            </summary>
            <param name="message">the message that will be sent to remote process.</param>
            <returns>response message that comes from remote process.</returns>
        </member>
        <member name="T:DotNetBrowser.Internals.PrivateKeyConverter">
            <summary>
                This converter converts the private key defined by its parameters
                to its DER encoded PKCS#8 form.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PrintDocumentType">
            <summary>
                Specifies type of the printed document.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PrintDocumentType.HTML">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PrintDocumentType.PDF">
            <summary />
        </member>
        <member name="T:DotNetBrowser.Protocols.IProtocolHandler">
            <summary>
            Represents the handler for Url requests.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Protocols.IProtocolHandler.Handle(DotNetBrowser.Protocols.IUrlRequest)">
            <summary>
            Handles the Url request received from the BrowserContext instance 
            and returns the response for the specified request.
            </summary>
            <param name="request">Url request</param>
            <returns>Url response</returns>
        </member>
        <member name="T:DotNetBrowser.Protocols.IProtocolHandlerCollection">
            <summary>
            Represents the registrar for the Url request handlers.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Protocols.IProtocolHandlerCollection.Register(System.String,DotNetBrowser.Protocols.IProtocolHandler)">
            <summary>
            Registers the handler for the specified protocol.
            </summary>
            <param name="protocol">Protocol name</param>
            <param name="handler">Instance of the handler</param>
        </member>
        <member name="M:DotNetBrowser.Protocols.IProtocolHandlerCollection.Unregister(System.String)">
            <summary>
            Unregisters the handler for the specified protocol.
            </summary>
            <param name="protocol">Protocol name</param>
        </member>
        <member name="M:DotNetBrowser.Protocols.IProtocolHandlerCollection.Unregister(DotNetBrowser.Protocols.IProtocolHandler)">
            <summary>
            Unregisters the handler for all protocols.
            </summary>
            <param name="handler">Handler instance</param>
        </member>
        <member name="M:DotNetBrowser.Protocols.IProtocolHandlerCollection.UnregisterAll">
            <summary>
            Unregisters all handlers for all protocols.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Protocols.IProtocolHandlerCollection.Contains(System.String)">
            <summary>
            Checks if any handler is registered for the specified protocol name.
            </summary>
            <param name="protocol">Protocol name</param>
            <returns>True if any handler registered for the specified protocol</returns>
        </member>
        <member name="M:DotNetBrowser.Protocols.IProtocolHandlerCollection.Contains(DotNetBrowser.Protocols.IProtocolHandler)">
            <summary>
            Check if the handler instance is registered for any protocol.
            </summary>
            <param name="handler">Handler instance</param>
            <returns></returns>
        </member>
        <member name="P:DotNetBrowser.Protocols.IProtocolHandlerCollection.Item(System.String)">
            <summary>
            Provides the handler instance registered for the specified protocol name.
            </summary>
            <param name="protocol">Protocol name</param>
            <returns></returns>
        </member>
        <member name="P:DotNetBrowser.Protocols.IProtocolHandlerCollection.Item(DotNetBrowser.Protocols.IProtocolHandler)">
            <summary>
            Provides all protocols for which the specified handler instance is registered.
            </summary>
            <param name="handler">Handler instance</param>
            <returns>Collection of the protocols</returns>
        </member>
        <member name="T:DotNetBrowser.Protocols.IProtocolHandlerEntry">
            <summary>
            Represents the pair of the protocol name and the handler instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IProtocolHandlerEntry.Protocol">
            <summary>
            Normalized protocol name.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IProtocolHandlerEntry.Handler">
            <summary>
            Handler instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Protocols.IProtocolService">
            <summary>
            Provides an ability to register handler for
            Url requests of the specified protocol
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IProtocolService.IsDisposed">
            <summary>
            Demonstrates if the instance is disposed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Protocols.IUrlRequest">
            <summary>
            Represents the Url reuqest.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IUrlRequest.Url">
            <summary>
            Url path for the request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IUrlRequest.Method">
            <summary>
            Method of the request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IUrlRequest.Headers">
            <summary>
            Collection of the request headers.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IUrlRequest.PostData">
            <summary>
            Post data of the request.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Protocols.IUrlResponse">
            <summary>
            Represents the response for the Url request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IUrlResponse.Data">
            <summary>
            Response data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IUrlResponse.Status">
            <summary>
            Response status.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.IUrlResponse.Headers">
            <summary>
            Collection of the response headers.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Protocols.UrlResponse">
            <summary>
            Represents the response for the Url request.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Protocols.UrlResponse.#ctor(System.Byte[],System.Net.HttpStatusCode,DotNetBrowser.HttpHeadersEx)">
            <summary>
            Creates the instance of the Url response based on the response data.
            </summary>
            <param name="data">Response data</param>
            <param name="status">Response status.</param>
            <param name="headers">Response headers.</param>
        </member>
        <member name="P:DotNetBrowser.Protocols.UrlResponse.Data">
            <summary>
            Response data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.UrlResponse.Status">
            <summary>
            Response status.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Protocols.UrlResponse.Headers">
            <summary>
            Collection of the response headers.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.Events.DOMEvent">
            <summary>
                Represents DOM event.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEvent.InitEvent(System.String,System.Boolean,System.Boolean)">
            <summary>
                This method must be called to set the event before it is dispatched, using EventTarget.dispatchEvent().
                Once dispatched, it doesn't do anything anymore.
            </summary>
            <param name="eventType">the type of DOM event</param>
            <param name="bubbles">
                Is a Boolean deciding whether the event should bubble up through the event chain or not.
                Once set, the read-only property DOMEvent.Bubbles will give its value.
            </param>
            <param name="cancelable">
                Is a Boolean defining whether the event can be canceled.
                Once set, the read-only property DOMEvent.Cancelable will give its value.
            </param>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEvent.EventType">
            <summary>
                Gets the type of this DOM event
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEvent.Bubbles">
            <summary>
                Indicates whether the event should bubble up through the event chain or not.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEvent.Cancelable">
            <summary>
                Indicates whether the event can be canceled.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMException">
            <summary>
                Thrown when exception occurs during DOM elements manipulation.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMException.#ctor(System.String)">
            <summary>
                Constructs a new DOMException instance.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMFormControlElement">
            <summary>
                Represents DOM HTML Form Control such as input, select, textarea, etc.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMElement">
            <summary>
                Represents DOM HTML element.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMNode">
            <summary>
                Represents a singe HTML DOM node in the document tree. All JxBrowser
                DOM objects implement the DOMNode interface.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.Events.DOMEventTarget">
            <summary>
                This interface is implemented by all <see cref="T:DotNetBrowser.DOM.DOMElement"/>
                that supports DOM event model.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventTarget.AddEventListener(DotNetBrowser.DOM.Events.DOMEventType,DotNetBrowser.DOM.Events.DOMEventHandler,System.Boolean)">
            <summary>
                This method allows the registration of event listeners on the event
                target. If an DOMEventHandler is added to an
                DOMEventTarget while it is processing an event, it will not
                be triggered by the current actions but may be triggered during a
                later stage of event flow, such as the bubbling phase.
                <br />If multiple identical DOMEventHandlers are registered
                on the same DOMEventTarget with the same parameters the
                duplicate instances are discarded. They do not cause the
                DOMEventHandler to be called twice and since they are
                discarded they do not need to be removed with the
                RemoveEventListener method.
            </summary>
            <param name="eventType">the event type for which the user is registering.</param>
            <param name="handler">
                the handler parameter takes an interface
                implemented by the user which contains the methods to be called
                when the event occurs.
            </param>
            <param name="useCapture">
                if true, useCapture indicates that the
                user wishes to initiate capture. After initiating capture, all
                events of the specified type will be dispatched to the registered
                DOMEventHandler before being dispatched to any
                DOMEventTarget beneath them in the tree. Events which
                are bubbling upward through the tree will not trigger an
                DOMEventHandler designated to use capture.
            </param>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventTarget.AddEventListener(DotNetBrowser.DOM.Events.DOMEvent,DotNetBrowser.DOM.Events.DOMEventHandler,System.Boolean)">
            <summary>
                This method allows the registration of event listeners on the event
                target. If an DOMEventHandler is added to an
                DOMEventTarget while it is processing an event, it will not
                be triggered by the current actions but may be triggered during a
                later stage of event flow, such as the bubbling phase.
                <br />If multiple identical DOMEventHandlers are registered
                on the same DOMEventTarget with the same parameters the
                duplicate instances are discarded. They do not cause the
                DOMEventHandler to be called twice and since they are
                discarded they do not need to be removed with the
                RemoveEventListener method.
            </summary>
            <param name="domEvent">the event for which the user is registering.</param>
            <param name="handler">
                the handler parameter takes an interface
                implemented by the user which contains the methods to be called
                when the event occurs.
            </param>
            <param name="useCapture">
                if true, useCapture indicates that the
                user wishes to initiate capture. After initiating capture, all
                events of the specified type will be dispatched to the registered
                DOMEventHandler before being dispatched to any
                DOMEventTarget beneath them in the tree. Events which
                are bubbling upward through the tree will not trigger an
                DOMEventHandler designated to use capture.
            </param>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventTarget.RemoveEventListener(DotNetBrowser.DOM.Events.DOMEventType,DotNetBrowser.DOM.Events.DOMEventHandler,System.Boolean)">
            <summary>
                This method allows the removal of event listeners from the event
                target. If an DOMEventHandler is removed from an
                DOMEventTarget while it is processing an event, it will not
                be triggered by the current actions. DOMEventHandlers can
                never be invoked after being removed.
                <br />Calling RemoveEventListener with arguments which do
                not identify any currently registered DOMEventHandler on
                the DOMEventTarget has no effect.
            </summary>
            <param name="eventType">
                specifies the event type of the DOMEventHandler
                being removed.
            </param>
            <param name="handler">
                the DOMEventHandler parameter indicates the
                DOMEventHandler to be removed.
            </param>
            <param name="useCapture">
                specifies whether the DOMEventHandler
                being removed was registered as a capturing listener or not. If a
                listener was registered twice, one with capture and one without,
                each must be removed separately. Removal of a capturing listener
                does not affect a non-capturing version of the same listener, and
                vice versa.
            </param>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventTarget.RemoveEventListener(DotNetBrowser.DOM.Events.DOMEvent,DotNetBrowser.DOM.Events.DOMEventHandler,System.Boolean)">
            <summary>
                This method allows the removal of event listeners from the event
                target. If an DOMEventHandler is removed from an
                DOMEventTarget while it is processing an event, it will not
                be triggered by the current actions. DOMEventHandlers can
                never be invoked after being removed.
                <br />Calling RemoveEventListener with arguments which do
                not identify any currently registered DOMEventHandler on
                the DOMEventTarget has no effect.
            </summary>
            <param name="domEvent">
                the event of the DOMEventHandler
                being removed.
            </param>
            <param name="handler">
                the DOMEventHandler parameter indicates the
                DOMEventHandler to be removed.
            </param>
            <param name="useCapture">
                specifies whether the DOMEventHandler
                being removed was registered as a capturing listener or not. If a
                listener was registered twice, one with capture and one without,
                each must be removed separately. Removal of a capturing listener
                does not affect a non-capturing version of the same listener, and
                vice versa.
            </param>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventTarget.GetEventListeners(DotNetBrowser.DOM.Events.DOMEventType)">
            <summary>
                Returns a list of registered DOMEventHandler's for specific eventType.
            </summary>
            <param name="eventType">specifies the event type of the DOMEventHandler.</param>
            <returns>a list of registered DOMEventHandler's for specific eventType.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventTarget.GetEventListeners(DotNetBrowser.DOM.Events.DOMEvent)">
            <summary>
                Returns a list of registered DOMEventHandler's for specific custom event.
            </summary>
            <param name="domEvent">the event of the DOMEventHandler.</param>
            <returns>a list of registered DOMEventHandler's for specific eventType.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventTarget.DispatchEvent(DotNetBrowser.DOM.Events.DOMEvent)">
            <summary>
                Sends an event to the current element.
            </summary>
            <param name="domEvent">specifies the event of the DOMEventHandler.</param>
            <returns>
                false if event is cancelable and at least one of the event handlers
                which handled this event called cancelable action. Otherwise it returns true.
            </returns>
        </member>
        <member name="T:DotNetBrowser.DOM.SearchContext">
            <summary>
                Base interface for search methods that must be inherited by DOM interfaces that want to have search mechanisms.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.SearchContext.GetElementByTagName(System.String)">
            <summary>
                Finds first DOM element in the current document or element with the given <paramref name="tagName" />. Returns null
                if element wasn't found using given find method.
            </summary>
            <param name="tagName">the name of the tag to match on.</param>
            <returns>a list of the matched DOM elemnts.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.SearchContext.GetElementByName(System.String)">
            <summary>
                Finds first DOM element in the current document or element with the given <paramref name="name" />. Returns null
                if element wasn't found using given find method.
            </summary>
            <param name="name">the name attribute value for a node.</param>
            <returns>a list of the matched DOM nodes.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.SearchContext.GetElementByClassName(System.String)">
            <summary>
                Finds first DOM element in the current document or element with the given <paramref name="className" />. Returns
                null
                if element wasn't found using given find method.
            </summary>
            <param name="className">className the class attribute value for a node.</param>
            <returns>a list of the matched DOM nodes.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.SearchContext.Evaluate(System.String)">
            <summary>
                Evaluates an XPath expression for the document element with XPathResultType.ANY_TYPE
                and returns the result. Equivalent of:
                <pre>Evaluate(expression, DocumentElement, XPathResultType.ANY_TYPE);</pre>
            </summary>
            <param name="expression">a string representing the XPath to be evaluated. Cannot be null or empty string.</param>
            <returns>
                XPathResult object of the type specified in the type parameter. The return value will
                be always a valid XPathResult object. In case of incorrect expression, the result object will contain
                information about evaluation error. See the XPathResult.IsError and
                XPathResult.ErrorMessage properties.
            </returns>
            <exception cref="T:System.ArgumentException">when expression is null or empty string.</exception>
            <exception cref="T:System.InvalidOperationException">when the document element is not available in the current document.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.SearchContext.Evaluate(System.String,DotNetBrowser.XPathResultType)">
            <summary>
                Returns an XPathResult based on an XPath expression and other given parameters.
            </summary>
            <param name="expression">a string representing the XPath to be evaluated. Cannot be null or empty string.</param>
            <param name="type">type of result XPathResult to return. See XPathResultType. Cannot be null.</param>
            <returns>
                XPathResult object of the type specified in the type parameter. The return value will
                be always a valid XPathResult object. In case of incorrect expression, the result object will contain
                information about evaluation error. See the XPathResult.IsError and
                XPathResult.ErrorMessage properties.
            </returns>
            <exception cref="T:System.ArgumentException">
                when expression is null or empty string; when
                contextNode is null; when type is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">when the document element is not available in the current document.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.GetElementsByTagName(System.String)">
            <summary>
                Returns a list of DOM nodes with specific <paramref name="tagName"/>.
            </summary>
            <param name="tagName">the name of the tag to match on.</param>
            <returns>a list of the matched DOM nodes.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="tagName"/> parameter is empty or null.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.GetElementsByName(System.String)">
            <summary>
                Returns a list of DOM nodes whose name attribute is given by <paramref name="name"/>.
            </summary>
            <param name="name">the name attribute value for a node.</param>
            <returns>a list of the matched DOM nodes.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> parameter is empty or null.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.GetElementsByClassName(System.String)">
            <summary>
                Returns a list of DOM nodes whose class attribute is given by <paramref name="className"/>.
            </summary>
            <param name="className">className the class attribute value for a node.</param>
            <returns>a list of the matched DOM nodes.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="className"/> parameter is empty or null.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.Click">
            <summary>
                Simulates click on the current Node.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.QuerySelector(System.String)">
            <summary>
                Returns the first DOM node from children of the current node, that match any selector
                within <paramref name="selectors"/> string.
            </summary>
            <param name="selectors">the selectors string.</param>
            <returns>
                the first DOM element from children of the current element, that match any selector
                within <paramref name="selectors"/> string or null if an element that matches the selector does not exist.
            </returns>
            <exception cref="T:System.ArgumentException">if <paramref name="selectors"/> parameter is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.QuerySelectorAll(System.String)">
            <summary>
                Returns a list of DOM nodes from children of the current node, that match any selector
                within <paramref name="selectors"/> string.
            </summary>
            <param name="selectors">the selectors string.</param>
            <returns>
                a list of DOM nodes from children of the current node, that match any selector
                within <paramref name="selectors"/> string. If matches not found, returns empty list.
            </returns>
            <exception cref="T:System.ArgumentException">if <paramref name="selectors"/> parameter is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.InsertChild(DotNetBrowser.DOM.DOMNode,DotNetBrowser.DOM.DOMNode)">
            <summary>
                Inserts a new node before an existing beforeNode. The new node could be an existing
                node in the document, or you can create and insert a new node. If the node is existing node,
                it will be moved to new location in the document.
            </summary>
            <param name="node">the node to insert.</param>
            <param name="beforeNode">the node before which the node will be inserted.</param>
            <returns>true if node was successfully inserted.</returns>
            <exception cref="T:System.ArgumentException">
                when node is null or
                beforeNode is null.
            </exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.ReplaceChild(DotNetBrowser.DOM.DOMNode,DotNetBrowser.DOM.DOMNode)">
            <summary>
                Replaces existing child node with a new node. The new node could be an existing node in the document,
                or you can create a new node. If the newNode is existing node, it will be moved to new
                location in the document. The old node could be used for inserting/appending it into the document later.
            </summary>
            <param name="newNode">the new node to replace.</param>
            <param name="oldNode">the existing node, which will be replaced by newNode.</param>
            <returns>true if the oldNode was successfully replaced with the newNode.</returns>
            <exception cref="T:System.ArgumentException">
                when newNode is null or
                oldNode is null.
            </exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.RemoveChild(DotNetBrowser.DOM.DOMNode)">
            <summary>
                Removes a child node and notifies whether child node was removed from the current node successfully or not.
            </summary>
            <param name="childNode">the node to remove.</param>
            <returns>true if the childNode was successfully removed.</returns>
            <exception cref="T:System.ArgumentException">
                when childNode is null or it's not a child of the
                current node.
            </exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMNode.AppendChild(DotNetBrowser.DOM.DOMNode)">
            <summary>
                Appends a node as the last child of the current node. The new node could be an existing node in the document,
                or you can create a new node. If the childNode is existing node, it will be moved to new location
                in the document.
            </summary>
            <param name="childNode">the node to append.</param>
            <returns>true if the childNode was successfully appended.</returns>
            <exception cref="T:System.ArgumentException">when childNode is null.</exception>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.NodeName">
            <summary>
                Gets the name of this node, depending on its <see cref="T:DotNetBrowser.DOM.DOMNodeType"/>.
            </summary>
            <value>the name of this node.</value>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.NodeValue">
            <summary>
                Gets or sets the value of this node, depending on its <see cref="T:DotNetBrowser.DOM.DOMNodeType"/>.
            </summary>
            <value>the value of this node. Can be null or empty string.</value>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.NodeType">
            <summary>
                Gets the type of this node.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.Parent">
            <summary>
                Gets parent node or null if there's no parent.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.Children">
            <summary>
                Gets a list of child node of this node.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.XPath">
            <summary>
                Gets the xpath of this node
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.TextContent">
            <summary>
                Gets or sets text content of the node and its descendants.
                <p/>
                Setting this property on a node removes all of its children and replaces them with a single text node with the
                given value.
            </summary>
            <p/>
            This method returns  null if the element is a document, a document type, or a notation. To grab all
            of the text and CDATA data for the whole document.
            <p/>
            If the node is a CDATA section, a comment, a processing instruction, or a text node, this method returns
            the text inside this node (the
            <see cref="P:DotNetBrowser.DOM.DOMNode.NodeValue"/>
            ).
            <p/>
            For other node types, this method returns the concatenation of the TextContent attribute value
            of every child node, excluding comments and processing instruction nodes. This is an empty string if the
            node has no children.
            <p/>
            Differences from InnerText
            <ul>
                <li>
                    Note that while TextContent gets the content of all elements, including &lt;script&gt; and &lt;style&gt;
                    elements, the mostly equivalent  innerText property, does not.
                </li>
                <li>InnerText is also aware of style and will not return the text of hidden elements, whereas TextContent will.</li>
                <li>As InnerText is aware of CSS styling, it will trigger a reflow, whereas TextContent will not.</li>
            </ul>
            <exception cref="T:System.ArgumentException">when value set null.</exception>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.NextSibling">
            <summary>
                Gets the node immediately following this one in its parent's children list, or null
                if this node is the last node in the list.
            </summary>
            <returns>
                the node immediately following this one in its parent's children list, or null
                if this node is the last node in that list.
            </returns>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNode.PreviousSibling">
            <summary>
                Gets the node immediately preceding this one in its parent's children list, or null
                if this node is the first node in that list.
            </summary>
            <returns>
                the node immediately preceding this one in its parent's children list, or null
                if this node is the first node in that list.
            </returns>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.GetAttribute(System.String)">
            <summary>
                Returns an attribute value by <paramref name="name"/>.
            </summary>
            <param name="name">the attribute name.</param>
            <returns>
                a string that represents an attribute value or empty string if the
                value isn't exist.
            </returns>
            <exception cref="T:System.ArgumentException">
                if <paramref name="name"/> parameter is null or empty.
                <see cref="M:DotNetBrowser.DOM.DOMElement.HasAttribute(System.String)"/>
            </exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.SetAttribute(System.String,System.String)">
            <summary>
                Adds a new attribute. If an attribute with that name is already present
                in the element, its value is changed to be that of the value parameter.
            </summary>
            <param name="name">the name of the attribute to create or alter.</param>
            <param name="value">value to set in string form.</param>
            <returns>true when attribute was added successfully.</returns>
            <exception cref="T:System.ArgumentException">
                if <paramref name="name"/> or <paramref name="value"/> parameter
                is null or empty.
            </exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.RemoveAttribute(System.String)">
            <summary>
                Removes an attribute specified by <paramref name="name"/>.
            </summary>
            <param name="name">the name of the attribute to remove.</param>
            <exception cref="T:System.ArgumentException">if <paramref name="name"/> parameter is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.HasAttribute(System.String)">
            <summary>
                Returns true when an attribute with a given name is
                specified on this element or has a default value, false
                otherwise.
            </summary>
            <param name="name">the name of the attribute to look for.</param>
            <returns>
                true if an attribute with the given name is
                specified on this element or has a default value, false
                otherwise.
            </returns>
            <exception cref="T:System.ArgumentException">if <paramref name="name"/> parameter is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.SetInnerHTML(System.String)">
            <summary>
                Replaces inner HTML of the current element with specified html.
            </summary>
            <param name="html">a new inner HTML of the current element.</param>
            <returns>true when HTML code of the current element was replaced successfully.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.SetInnerText(System.String)">
            <summary>
                Replaces inner text of the current element with specified html.
            </summary>
            <param name="text">a new inner text of the current element.</param>
            <returns>true when text of the current element was replaced successfully.</returns>
            <seealso cref="!:TextContent"/>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.Focus">
            <summary>
                Give focus to the current element
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMElement.Blur">
            <summary>
                Remove focus from the current element
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.Attributes">
            <summary>
                Returns a dictionary that contains attributes of the current element.
            </summary>
            <returns>
                a dictionary that contains attributes of the current element. Returns empty map
                if the current element doesn't have any attribute.
            </returns>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.InnerHTML">
            <summary>
                Returns a string that represents inner HTML of the current element.
            </summary>
            <returns>
                a string that represents inner HTML of the current element or empty string
                if the current element doesn't have inner HTML or the element doesn't exist anymore.
            </returns>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.InnerText">
            <summary>
                Returns a string that represents inner text of the current element.
            </summary>
            <returns>
                a string that represents inner text of the current element or empty string
                if the current element doesn't have inner text or the element doesn't exist anymore.
            </returns>
            <seealso cref="!:TextContent"/>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.OffsetLeft">
            <summary>
                Gets the horizontal offset position of the current element
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.OffsetTop">
            <summary>
                Gets the vertical offset position of the current element
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.OffsetWidth">
            <summary>
                Gets the width of the current element, including padding, border and scrollbar
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.OffsetHeight">
            <summary>
                Gets the height of the current element, including padding, border and scrollbar
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ClientLeft">
            <summary>
                Gets the width of the left border of the current element
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ClientTop">
            <summary>
                Gets the width of the top border of the current element
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ClientWidth">
            <summary>
                Gets the width of the current element, including padding
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ClientHeight">
            <summary>
                Gets the height of the current element, including padding
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ScrollLeft">
            <summary>
                Gets or sets the number of pixels an element's content is scrolled horizontally
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ScrollTop">
            <summary>
                Gets or sets the number of pixels an element's content is scrolled vertically
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ScrollWidth">
            <summary>
                Gets the entire width of the current element, including padding
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMElement.ScrollHeight">
            <summary>
                Gets the entire height of the current element, including padding
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DotNetBrowser.DOM.DOMElement.BoundingClientRect" -->
        <member name="P:DotNetBrowser.DOM.DOMFormControlElement.Enabled">
            <summary>
                Indicates whether form control is enabled or disabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMFormControlElement.Value">
            <summary>
                Gets or sets value for input element, textarea element and select element.
                For select element, it returns the value of
                the selected option if present. If no selected option, an empty string
                is returned. If element doesn't fall into input element, textarea element
                and select element categories, an empty string is returned.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMFormControlElement.Form">
            <summary>
                Returns the FORM element containing this control. Returns
                null if this control is not within the context of a form.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMFormElement">
            <summary>
                Represents DOM HTML Form element.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMFormElement.Reset">
            <summary>
                Restores a form element's default values. It performs the same action as a reset button.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMFormElement.Submit">
            <summary>
                Submits the form. It performs the same action as a submit button.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMFormElement.Action">
            <summary>
                Gets a string that represents the 'action' attribute value.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMFormElement.Name">
            <summary>
                Gets a string that represents the 'name' attribute value.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMFormElement.Method">
            <summary>
                Gets a string that represents the 'method' attribute value.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMFormElement.Controls">
            <summary>
                Gets a collection of all control elements in the form.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMInputElement">
            <summary>
                Represents DOM HTML Input element.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMInputElement.SetFile(System.String[])">
            <summary>
                Sets one or multiple string values that represent path to a file. This method can be used only when input type is
                'file'. You can set multiple values only if input element has 'multiple' attribute.
                <param name="filePath">a string that represent path to a file. Cannot be null.</param>
            </summary>
            <exception cref="T:System.ArgumentException">when filePath is null.</exception>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.IsText">
            <summary>
                Gets true when IsTextField returns true and the input type != 'number'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.IsCheckbox">
            <summary>
                Returns  true when the input type is 'checkbox'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.IsRadioButton">
            <summary>
                Returns  true when the input type is 'radio'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.IsTextField">
            <summary>
                Returns  true when the input type is 'text', 'password', 'search', 'email', 'url', and 'number'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.IsEmailField">
            <summary>
                Returns  true when the input type is 'email'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.IsPasswordField">
            <summary>
                Returns  true when the input type is 'password'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.IsFileField">
            <summary>
                Returns  true when the input type is 'file'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.MultipleFile">
            <summary>
                Returns  true when the input type is 'file' with 'multiple' attribute.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.File">
            <summary>
                Returns a string that represents path to a file if the current input type is 'file'.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.Files">
            <summary>
                Returns a list strings that represent path to file if the current input type is 'file' with 'multiple' attribute.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMInputElement.Checked">
            <summary>
                Gets or sets state of the input control with type 'checkbox' or 'radio'.
                True when input element with type 'checkbox' or 'radio' is selected. Use this method only with
                input elements with type 'checkbox' or 'radio'.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMNodeAtPoint">
            <summary>
                Provides information about DOM Node at specified point inside loaded document.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNodeAtPoint.Node">
            <summary>
                Gets DOMNode at specified point or null when there's no node at the point.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNodeAtPoint.LocalPoint">
            <summary>
                Gets coordinates of the point relative to the node.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNodeAtPoint.URLElement">
            <summary>
                Gets DOMElement of a link, when a link is located at the point.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNodeAtPoint.AbsoluteImageURL">
            <summary>
                Gets  the image source, when an image is located at the point.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMNodeAtPoint.AbsoluteLinkURL">
            <summary>
                Gets the link url source, when a link is located at the point.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMOptionElement">
            <summary>
                Represents DOM HTML Option element.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMOptionElement.Selected">
            <summary>
                Gets or sets state of the option element. true if option element is selected, otherwise false.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMSelectElement">
            <summary>
                Represents DOM HTML Select element.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMSelectElement.Options">
            <summary>
                Gets the collection of OPTION elements contained by this select element.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMSelectElement.Multiple">
            <summary>
                Gets or sets select element type.
                true if type is 'select-multiple', false if 'select-one'..
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMTextAreaElement">
            <summary>
                Represents DOM HTML Textarea element.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DownloadInterruptReason">
            <summary>
                Possible download interrupt reason.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.NONE">
            <summary>
                Returns if there is no previous interrupt reason.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_FAILED">
            <summary>
                Generic file operation failure.
                "File Error".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_ACCESS_DENIED">
            <summary>
                The file cannot be accessed due to security restrictions.
                "Access Denied".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_NO_SPACE">
            <summary>
                There is not enough room on the drive.
                "Disk Full".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_NAME_TOO_LONG">
            <summary>
                The directory or file name is too long.
                "Path Too Long".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_TOO_LARGE">
            <summary>
                The file is too large for the file system to handle.
                "File Too Large".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_VIRUS_INFECTED">
            <summary>
                The file contains a virus.
                "Virus".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_TRANSIENT_ERROR">
            <summary>
                The file was in use.
                Too many files are opened at once.
                We have run out of memory.
                "Temporary Problem".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_BLOCKED">
            <summary>
                The file was blocked due to local policy.
                "Blocked"
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_SECURITY_CHECK_FAILED">
            <summary>
                An attempt to check the safety of the download failed due to unexpected
                reasons. See http:///crbug.com/153212.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_TOO_SHORT">
            <summary>
                An attempt was made to seek past the end of a file in opening
                a file (as part of resuming a previously interrupted download).
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.FILE_HASH_MISMATCH">
            <summary>
                The partial file didn't match the expected hash.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.NETWORK_FAILED">
            <summary>
                Generic network failure.
                "Network Error".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.NETWORK_TIMEOUT">
            <summary>
                The network operation timed out.
                "Operation Timed Out".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.NETWORK_DISCONNECTED">
            <summary>
                The network connection has been lost.
                "Connection Lost".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.NETWORK_SERVER_DOWN">
            <summary>
                The server has gone down.
                "Server Down".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.NETWORK_INVALID_REQUEST">
            <summary>
                The network request was invalid. This may be due to the original URL or a
                redirected URL:
                - Having an unsupported scheme.
                - Being an invalid URL.
                - Being disallowed by policy.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.SERVER_FAILED">
            <summary>
                The server indicates that the operation has failed (generic).
                "Server Error".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.SERVER_NO_RANGE">
            <summary>
                The server does not support range requests.
                Internal use only:  must restart from the beginning.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.SERVER_BAD_CONTENT">
            <summary>
                The server does not have the requested data.
                "Unable to get file".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.SERVER_UNAUTHORIZED">
            <summary>
                Server didn't authorize access to resource.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.SERVER_CERT_PROBLEM">
            <summary>
                Server certificate problem.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.SERVER_FORBIDDEN">
            <summary>
                Server access forbidden.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.SERVER_UNREACHABLE">
            <summary>
                Unexpected server response. This might indicate that the responding server
                may not be the intended server.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.USER_CANCELED">
            <summary>
                The user canceled the download.
                "Canceled".
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.USER_SHUTDOWN">
            <summary>
                The user shut down the browser.
                Internal use only:  resume pending downloads if possible.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadInterruptReason.CRASH">
            <summary>
                The browser crashed.
                Internal use only:  resume pending downloads if possible.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.HandledGestureEventArgs">
            <summary>
                Allows to handle an event that indicates that user
                has made a gesture interaction <see cref="T:DotNetBrowser.GestureType"/>
                with device <see cref="T:DotNetBrowser.SourceDevice"/>.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.GestureEventArgs">
            <summary>
                Provides event information that indicates that user
                has made a gesture interaction <see cref="P:DotNetBrowser.Events.GestureEventArgs.GestureType"/>
                with device <see cref="P:DotNetBrowser.Events.GestureEventArgs.SourceDevice"/>.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.X">
            <summary>
                Returns the horizontal x position of the event relative to the source component.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.Y">
            <summary>
                Returns the vertical y position of the event relative to the source component.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.GlobalX">
            <summary>
                Returns the absolute horizontal x position of the event.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.GlobalY">
            <summary>
            Returns the absolute vertical y position of the event.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.GestureType">
            <summary>
            Returns the type of the gesture.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.SourceDevice">
            <summary>
            Returns the type of the device.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.IsAltDown">
            <summary>
            Returns true if Alt is pressed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.IsCtrlDown">
            <summary>
            Returns true if Ctrl is pressed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.GestureEventArgs.IsShiftDown">
            <summary>
            Returns true if Shift is pressed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.HandledGestureEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the GestureEvent was handled.
            <returns>Returns true if the event is handled; otherwise, false.</returns>
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.HandledGestureEventHandler">
            <summary>
                Represents the method that will handle event that indicates that user
                has made a gesture interaction <see cref="T:DotNetBrowser.GestureType"/>
                with device <see cref="T:DotNetBrowser.SourceDevice"/> and provides an ability
                to discard performed interaction.    
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.GestureEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.HttpHeadersEx">
            <summary>
                Represents HTTP request/response header
            </summary>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.SetHeader(System.String,System.String)">
            <summary>
                Sets a new header using headerName as key andheaderValue as value. If such a header already exists,
                it will be overridden.
            </summary>
            <param name="headerName">header name.</param>
            <param name="headerValue">header value.</param>
            <exception cref="T:System.ArgumentException">when headerName is null or empty, headerValue is null.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.SetHeaders(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Sets a new header using headerName as key and headerValue as values list. If such a header already exists,
                it will be overridden.
            </summary>
            <param name="headerName">header name.</param>
            <param name="headerValue">header values list.</param>
            <exception cref="T:System.ArgumentException">when headerName is null or empty, headerValue is null.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.RemoveHeader(System.String)">
            <summary>
                Removes a header with the header name defined by headerName
            </summary>
            <param name="headerName">header name.</param>
            <returns>header value which has been removed or null if header with this headerName does not exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.RemoveAll">
            <summary>
                Removes all headers.
            </summary>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.GetHeaders">
            <summary>
                Returns all headers. Changes in this collection does not affect original headers.
            </summary>
            <returns>Dictionary contains all headers.</returns>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.ContainsHeader(System.String)">
            <summary>
                Returns true if a header with the header name defined by headerName is exists.
            </summary>
            <param name="headerName">header name.</param>
            <returns>true if the header with header name defined by headerName is exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.GetHeader(System.String)">
            <summary>
                Returns a header with the header name defined by headerName.
            </summary>
            <param name="headerName">header name.</param>
            <returns>header value or null if header with this headerName does not exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersEx.GetHeaders(System.String)">
            <summary>
                Returns all headers as key-value pair. Changes in this collection does not affect original headers.
            </summary>
            <returns>Dictionary contains all headers.</returns>
        </member>
        <member name="T:DotNetBrowser.IAppCache">
            <summary>
                Application cache information bound to the specific origin URL.
            </summary>
        </member>
        <member name="P:DotNetBrowser.IAppCache.URL">
            <summary>
                Application URL address
            </summary>
        </member>
        <member name="P:DotNetBrowser.IAppCache.Manifests">
            <summary>
                List of manifests
            </summary>
        </member>
        <member name="T:DotNetBrowser.IAppCacheStorage">
            <summary>
                HTML5 Application cache storage
            </summary>
        </member>
        <member name="M:DotNetBrowser.IAppCacheStorage.RemoveInfoForManifestURL(System.String)">
            <summary>
                Remove application cache for the specific manifest.
            </summary>
            <param name="manifestURL">the url of application cache storage.</param>
        </member>
        <member name="M:DotNetBrowser.IAppCacheStorage.GetInfoByOriginURL(System.String)">
            <summary>
                Get application cache info by URL
            </summary>
            <param name="originURL">the url of application cache storage.</param>
        </member>
        <member name="P:DotNetBrowser.IAppCacheStorage.OriginURLs">
            <summary>
                A list that contains URLs of all known application cache origins.
            </summary>
        </member>
        <member name="T:DotNetBrowser.IAppCacheInfo">
            <summary>
                Application cache information for the specific cache manifest.
            </summary>
        </member>
        <member name="P:DotNetBrowser.IAppCacheInfo.ManifestURL">
            <summary>
                Manifest URL
            </summary>
        </member>
        <member name="P:DotNetBrowser.IAppCacheInfo.Size">
            <summary>
                Size of manifest file
            </summary>
        </member>
        <member name="P:DotNetBrowser.IAppCacheInfo.Status">
            <summary>
                Possible application cache status.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.GestureEventHandler">
            <summary>
                Represents the method that will handle event that indicates that user
                has made a gesture interaction <see cref="T:DotNetBrowser.GestureType"/>
                with device <see cref="T:DotNetBrowser.SourceDevice"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.GestureEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.HttpHeadersExImpl">
            <summary>
                Represents HTTP request/response header
            </summary>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.ContainsHeader(System.String)">
            <summary>
                Returns true if a header with the header name defined by headerName is exists.
            </summary>
            <param name="headerName">header name.</param>
            <returns>true if the header with header name defined by headerName is exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.GetHeader(System.String)">
            <summary>
                Returns a header with the header name defined by headerName.
            </summary>
            <param name="headerName">header name.</param>
            <returns>header value or null if header with this headerName does not exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.GetHeaders">
            <summary>
                Returns all headers as key-value pair. Changes in this collection does not affect original headers.
            </summary>
            <returns>Dictionary contains all headers.</returns>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.GetHeaders(System.String)">
            <summary>
                Returns all headers. Changes in this collection does not affect original headers.
            </summary>
            <returns>Dictionary contains all headers.</returns>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.RemoveAll">
            <summary>
                Removes all headers.
            </summary>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.RemoveHeader(System.String)">
            <summary>
                Removes a header with the header name defined by headerName
            </summary>
            <param name="headerName">header name.</param>
            <returns>header value which has been removed or null if header with this headerName does not exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.SetHeader(System.String,System.String)">
            <summary>
                Sets a new header using headerName as key andheaderValue as value. If such a header already exists,
                it will be overridden.
            </summary>
            <param name="headerName">header name.</param>
            <param name="headerValue">header value.</param>
            <exception cref="T:System.ArgumentException">when headerName is null or empty, headerValue is null.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.SetHeaders(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Sets a new header using headerName as key and headerValue as values list. If such a header already exists,
                it will be overridden.
            </summary>
            <param name="headerName">header name.</param>
            <param name="headerValues">header values list.</param>
            <exception cref="T:System.ArgumentException">when headerName is null or empty, headerValue is null.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeadersExImpl.ToString">
            <summary>
                Returns all readers as the string representation.
            </summary>
        </member>
        <member name="T:DotNetBrowser.IImageProvider">
            <summary>
                Provides an ability to get rendered image from Browser 
                instance in Lightweight rendering mode. 
            </summary>
        </member>
        <member name="M:DotNetBrowser.IImageProvider.GetImage">
            <summary>
                Gets rendered image from Browser instance
                in Lightweight rendering mode.
            </summary>
            <returns>Image with <see cref="M:DotNetBrowser.Browser.SetSize(System.Int32,System.Int32)">previously setted size</see> or null if size has not been set.</returns>
        </member>
        <member name="M:DotNetBrowser.IImageProvider.GetImage(System.Int32,System.Int32)">
            <summary>
                Gets rendered image from Browser instance
                in Lightweight rendering mode.
            </summary>
            <param name="width">Requested image width</param>
            <param name="height">Requested image height</param>
            <returns>Image with requested size.</returns>
        </member>
        <member name="T:DotNetBrowser.Internals.WebInputEventModifiers">
            <summary>
                These modifiers are taken as-is from blink::WebInputEvent::Modifiers
            </summary>
        </member>
        <member name="T:DotNetBrowser.SourceDevice">
            <summary>
                Possible type of device with gesture interaction <see cref="T:DotNetBrowser.GestureType"/>.
            </summary>
        </member>
        <member name="F:DotNetBrowser.SourceDevice.UNINITIALIZED">
            <summary>
                Uninitialized device
            </summary>
        </member>
        <member name="F:DotNetBrowser.SourceDevice.TOUCHPAD">
            <summary>
                Touchpad device.
            </summary>
        </member>
        <member name="F:DotNetBrowser.SourceDevice.TOUCHSCREEN">
            <summary>
                Touchscreen device.
            </summary>
        </member>
        <member name="T:DotNetBrowser.GestureType">
            <summary>
                Possible type of gesture interaction with device <see cref="T:DotNetBrowser.SourceDevice"/>.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.SCROLL_BEGIN">
            <summary>
                Indicates that scroll was begun.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.SCROLL_END">
            <summary>
                Indicates that scroll was ended.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.SCROLL_UPDATE">
            <summary>
                Indicates that scroll was updated.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.FLING_START">
            <summary>
                Indicates that fling was started.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.FLING_CANCEL">
            <summary>
                Indicates that fling was canceled.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.SHOW_PRESS">
            <summary>
                Indicates that 'SHOW_PRESS' gesture was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.TAP">
            <summary>
                Indicates that tap was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.TAP_UNCONFIRMED">
            <summary>
                Indicates that tap was unconfirmed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.TAP_DOWN">
            <summary>
                Indicates that tap down was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.TAP_CANCEL">
            <summary>
                Indicates that tap cancel was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.DOUBLE_TAP">
            <summary>
                Indicates that double tap was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.TWO_FINGER_TAP">
            <summary>
                Indicates that two finger tap was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.LONG_PRESS">
            <summary>
                Indicates that long press was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.LONG_TAP">
            <summary>
                Indicates that long tap was made.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.PINCH_BEGIN">
            <summary>
                Indicates that pinch was begun.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.PINCH_END">
            <summary>
                Indicates that pinch was ended.
            </summary>
        </member>
        <member name="F:DotNetBrowser.GestureType.PINCH_UPDATE">
            <summary>
                Indicates that pinch was updated.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PrintHandler">
            <summary>
                Allows handling printing initiated by <see cref="M:DotNetBrowser.Browser.Print"/> method or
                <code> window.print() </code> JavaScript on the web page. You can use handler to get default print settings,
                provide custom print settings or cancel printing.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PrintHandler.OnPrint(DotNetBrowser.PrintJob)">
            <summary>
                This method is invoked when engine wants to get custom print settings and decide whether
                it should continue printing or not. If this method throws an exception, then printing will be canceled.
                This method will not block web browser engine. It's invoked asynchronously. You can display in this method
                Modal UI Print Dialog to ask user for custom print settings.
            </summary>
            <param name="printJob">Active print job. Use it to access default print settings and modify them.</param>
            <returns>
                <see cref="F:DotNetBrowser.PrintStatus.CONTINUE"/> to continue printing. <see cref="F:DotNetBrowser.PrintStatus.CANCEL"/> to cancel printing.
            </returns>
        </member>
        <member name="T:DotNetBrowser.DragDropStatus">
            <summary>
                Possible drag and drop status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DragDropStatus.DragEnter">
            <summary>
                Indicates drag enter status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DragDropStatus.DragExit">
            <summary>
                Indicates drag exit status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DragDropStatus.Drop">
            <summary>
                Indicates drop status.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DragDropDataType">
            <summary>
                The drag/drop data type indicates what kind of object drags or drops.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DragDropDataType.TEXT">
            <summary>
                Text type object.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DragDropDataType.URL">
            <summary>
                URL type object.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DragDropDataType.FILE">
            <summary>
                File type object.
            </summary>
        </member>
        <member name="T:DotNetBrowser.EditorCommand">
            <summary>
                The list of commands for text manipulation when editing in a text field, text area or WYSIWYG editor. Also contains
                more common commands like Cut, Copy, Paste, SelectAll, Undo, Redo, which can be executed for the frame in the
                loaded
                web page.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.BACKGROUND_COLOR">
            <summary>
                Sets background color for selected text in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.CUT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.DELETE">
            <summary>
                Deletes selected text in text field, text area or WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.DELETE_BACKWARD">
            <summary>
                Deletes character before caret position in text field, text area or WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.DELETE_FORWARD">
            <summary>
                Deletes character after caret position in text field, text area or WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.DELETE_TO_BEGINNING_OF_LINE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.DELETE_WORD_BACKWARD">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.DELETE_WORD_FORWARD">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.FIND_STRING">
            <summary>
                Searches for the next string occurrence from the current caret position in the loaded web page.
                If match found, this command will select it and scroll down to make it visible, if needed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.FONT_SIZE">
            <summary>
                Sets font size for selected text in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.FONT_NAME">
            <summary>
                Sets font name for selected text in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.FOREGROUND_COLOR">
            <summary>
                Sets foreground color for selected text in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.INSERT_IMAGE">
            <summary>
                Inserts image in a WYSIWYG editor. The command value is {@code src} attribute for IMG tag.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.INSERT_HTML">
            <summary>
                Inserts HTML in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.INSERT_NEW_LINE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.INSERT_PARAGRAPH">
            <summary>
                Inserts new paragraph in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.INSERT_TAB">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.INSERT_TEXT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.IGNORE_SPELLING">
            <summary>
                Disables spelling mistakes highlighting in a text area or WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.ITALIC">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_PAGE_UP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_PAGE_DOWN">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_WORD_LEFT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_WORD_LEFT_AND_MODIFY_SELECTION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_WORD_RIGHT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_WORD_RIGHT_AND_MODIFY_SELECTION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_TO_BEGINNING_OF_LINE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_TO_BEGINNING_OF_LINE_AND_MODIFY_SELECTION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_TO_END_OF_LINE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.MOVE_TO_END_OF_LINE_AND_MODIFY_SELECTION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.PASTE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.REDO">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SCROLL_PAGE_BACKWARD">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SCROLL_PAGE_FORWARD">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SCROLL_LINE_UP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SCROLL_LINE_DOWN">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SCROLL_TO_BEGINNING_OF_DOCUMENT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SCROLL_TO_END_OF_DOCUMENT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SELECT_ALL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SELECT_LINE">
            <summary>
                Selects line at the current cursor position in a text area, text field or a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SELECT_PARAGRAPH">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SELECT_SENTENCE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.SELECT_WORD">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.TOGGLE_BOLD">
            <summary>
                Toggle bold style for selected text in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.TOGGLE_ITALIC">
            <summary>
                Toggle italic style for selected text in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.TOGGLE_UNDERLINE">
            <summary>
                Toggle underline style for selected text in a WYSIWYG editor.
            </summary>
        </member>
        <member name="F:DotNetBrowser.EditorCommand.UNDERLINE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.UNDO">
            <summary />
        </member>
        <member name="F:DotNetBrowser.EditorCommand.UNSELECT">
            <summary />
        </member>
        <member name="T:DotNetBrowser.EditorCommands">
            <summary>
                Define extension methods for <see cref="T:DotNetBrowser.EditorCommand"/>.
            </summary>
        </member>
        <member name="M:DotNetBrowser.EditorCommands.GetCommandText(DotNetBrowser.EditorCommand)">
            <summary>
                Returns text representation of the command.
            </summary>
            <returns>text representation of the command.</returns>
        </member>
        <member name="M:DotNetBrowser.EditorCommands.IsValueRequired(DotNetBrowser.EditorCommand)">
            <summary>
                Returns true if command requires value.
            </summary>
            <returns>true if command requires value</returns>
        </member>
        <member name="T:DotNetBrowser.Events.DragDropEventArgs">
            <summary>
                Provides event information that indicates that DragDrop event has started.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.DragDropEventArgs.#ctor(System.Int32,System.String)">
            <summary>
                Constructs a new DragDropEventArgs instance.
            </summary>
            <param name="dataType">type of drag/drop object.</param>
            <param name="data">string data of drag/drop object.</param>
        </member>
        <member name="P:DotNetBrowser.Events.DragDropEventArgs.DragDropDataType">
            <summary>
                Gets type of drag/drope object.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.DragDropEventArgs.Data">
            <summary>
                Gets list of strings with text, url, or filenames.
                Depends on DragDropDataType.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.DragDropEventArgs.DataObject">
            <summary>
                Gets IDataObject instance related to drag/drop object.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.DragDropHandler">
            <summary>
                Represents the method that will handle event that indicates that DragDrop event has started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.DragDropEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.NotificationEventArgs">
            <summary>
                Provides event information for event that browser performed some notification action.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.NotificationEventArgs.#ctor(DotNetBrowser.Notification)">
            <summary>
                Constructs new NotificationEventArgs instance.
            </summary>
            <param name="notification">Notification object to be assigned to this event.</param>
        </member>
        <member name="P:DotNetBrowser.Events.NotificationEventArgs.Notification">
            <summary>
                Notification object assigned to this event.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.NotificationOnCloseHandler">
            <summary>
                Represents the method that will handle event is being invoked when browser informs that
                notification should be closed. Notification can be closed in
                different ways:
                <li>1. Using the <see cref="M:DotNetBrowser.Notification.Close"/> method.</li>
                <li>2. From JavaScript via Notification.close() JS function.</li>
                <li>
                    3. Automatically in 20 seconds by Chromium engine if notification
                    hasn't been closed yet.
                </li>
            </summary>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.NotificationEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.OnRedrawEventArgs">
            <summary>
                Provides event information for event that indicates that content of loaded web page in the browser view has been
                rendered as image.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.OnRedrawEventArgs.UpdatedRect">
            <summary>
                Gets rectangle on the loaded web page that has been rendered as image.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.OnRedrawEventArgs.ClientSize">
            <summary>
                Gets size of the loaded web page
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.OnRedrawEventHandler">
            <summary>
                Represents the method that will handle event that indicates when content of loaded web page in the browser view has
                been rendered as image.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.OnRedrawEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.ScriptContextEventArgs">
            <summary>
                Provides event information for event that indicates that JavaScript context has been created or destroyed
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.BrowserEventArgs">
            <summary>
                The base class for classes providing event information for all Browser events.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.BrowserEventArgs.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new BrowserEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
        </member>
        <member name="P:DotNetBrowser.Events.BrowserEventArgs.Browser">
            <summary>
                Gets the browser instance on which the event is initially occurred.
            </summary>
            <value>
                a browser instance on which the event is initially occurred.
            </value>
        </member>
        <member name="P:DotNetBrowser.Events.ScriptContextEventArgs.Context">
            <summary>
                Gets JavaScript context instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.ScriptContextCreatedHandler">
            <summary>
                Represents the method that will handle event that indicates that JavaScript context has been created.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.ScriptContextEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.ScriptContextDestroyedHandler">
            <summary>
                Represents the method that will handle event that indicates that JavaScript context has been destroyed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.ScriptContextEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.SpellCheckCompletedEventArgs">
            <summary>
                Provides event information for event that indicates that the spell check process is completed.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.SpellCheckCompletedEventArgs.#ctor(System.String,System.Collections.Generic.List{DotNetBrowser.Events.SpellCheckResult})">
            <summary>
                Constructs a new SpellCheckCompletedEventArgs instance.
            </summary>
            <param name="text">the examined text</param>
            <param name="results">a list with results of spell check</param>
        </member>
        <member name="P:DotNetBrowser.Events.SpellCheckCompletedEventArgs.Text">
            <summary>
                Gets the examined text.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.SpellCheckCompletedEventArgs.Results">
            <summary>
                Gets a list with results of spell check.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.SpellCheckCompletedHandler">
            <summary>
                Represents the method that will handle event that indicates that the spell check process is completed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.SpellCheckCompletedEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.SpellCheckResult">
            <summary>
                Contains information about specific mistake in the examined text.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.SpellCheckResult.StartIndex">
            <summary />
        </member>
        <member name="P:DotNetBrowser.Events.SpellCheckResult.Length">
            <summary />
        </member>
        <member name="T:DotNetBrowser.ExtendedKeyUsage">
            <summary>
                Represents extended key usage values.
            </summary>
        </member>
        <member name="T:DotNetBrowser.IBackForwardNavigator">
            <summary>
                Provides an ability to navigate by backward and forward lists.
            </summary>
        </member>
        <member name="M:DotNetBrowser.IBackForwardNavigator.Forward(System.Int32)">
            <summary>
                Moves current entry pointer forward and reloads the page.
            </summary>
            <param name="offset">Offset of the forward page</param>
            <returns>Is forwarding successful</returns>
        </member>
        <member name="M:DotNetBrowser.IBackForwardNavigator.Back(System.Int32)">
            <summary>
                Moves current entry pointer back and reloads the page.
            </summary>
            <param name="offset">Offset of the backward page</param>
            <returns>Is backwarding successful</returns>
        </member>
        <member name="M:DotNetBrowser.IBackForwardNavigator.GoTo(DotNetBrowser.INavigationEntry)">
            <summary>
                Navigates to the specified navigation entry.
            </summary>
            <returns>Is navigation successful</returns>
        </member>
        <member name="M:DotNetBrowser.IBackForwardNavigator.GoTo(System.Int32)">
            <summary>
                Navigates to the entry with specified index.
            </summary>
            <param name="offset">Navigation entry index</param>
            <returns>Is navigation successful</returns>
        </member>
        <member name="M:DotNetBrowser.IBackForwardNavigator.Remove(DotNetBrowser.INavigationEntry)">
            <summary>
                Removes specified navigation entry from entry list.
            </summary>
            <returns>Is entry removed</returns>
        </member>
        <member name="M:DotNetBrowser.IBackForwardNavigator.Remove(System.Int32)">
            <summary>
                Removes navigation entry with specified index from entry list.
            </summary>
            <param name="index">Navigation entry index</param>
            <returns>Is entry removed</returns>
        </member>
        <member name="P:DotNetBrowser.IBackForwardNavigator.Entries">
            <summary>
                Contains all backward and forward navigation entries.
            </summary>
        </member>
        <member name="P:DotNetBrowser.IBackForwardNavigator.CurrentEntry">
            <summary>
                Returns current navigation entry.
            </summary>
        </member>
        <member name="T:DotNetBrowser.INotificationHandler">
            <summary>
                The handler interface for receiving browser HTML5 desktop common notification events.
                To receive browser notification events user should register the INotificationHandler implementation set
                the NotificationHandler property of the NotificationService.
                Appropriate handler methods implemented will be invoked when browser performs notification actions.
            </summary>
        </member>
        <member name="M:DotNetBrowser.INotificationHandler.OnShowNotification(DotNetBrowser.Events.NotificationEventArgs)">
            <summary>
                Invoked when browser informs that a new notification should be displayed.
            </summary>
            <param name="args">
                <see cref="T:DotNetBrowser.Events.NotificationEventArgs"/> will contain information about notification that should be
                displayed.
            </param>
        </member>
        <member name="P:DotNetBrowser.Internals.IBrowserProperties.BrowserType">
            <summary>
                Get or sets current rendering type for browser
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.IBrowserProperties.URL">
            <summary>
                Gets or sets the current Url.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.IBrowserProperties.ZoomLevel">
            <summary>
                Gets or sets zoom level for the currently loaded web page. Zoom level is configured
                for each domain separately. For example, if you load the www.a.com web page and
                set zoom level to 2.5, then load the www.b.org web page, the zoom level for
                www.b.org web page will be reset to default value. When you load the
                www.a.com web page again, its zoom level will be restored to 2.5 automatically.
                <para>
                    This property asynchronously.
                </para>
                <para>
                    <list type="">
                        <item>
                            To zoom in use the positive zoom level. For example, 2.0, 1.5.
                        </item>
                        <item>
                            To zoom out use the negative zoom level. For example, -1.0, -2.5.
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.IBrowserProperties.AudioMuted">
            <summary>
                Gets or sets mutes all audio output for this Browser instance.
                True when audio output must be muted, false otherwise.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.IBrowserProperties.AcceptLanguage">
            <summary>
                Gets or sets a string that represents accept language for this Browser instance and all Browser instances with
                the same BrowserContext.
            </summary>
            <exception cref="T:System.ArgumentNullException">when value set null.</exception>
            <exception cref="T:System.ArgumentException">when value set empty.</exception>
        </member>
        <member name="P:DotNetBrowser.Internals.IBrowserProperties.Preferences">
            <summary>
                Gets or sets browser's preferences.
            </summary>
        </member>
        <member name="T:DotNetBrowser.IInputSimulator">
            <summary>
                Provides an ability to forward messages from input devices.
            </summary>
        </member>
        <member name="M:DotNetBrowser.IInputSimulator.SimulateMouseButtonEvent(System.Object,System.Windows.Input.MouseButtonState,System.Int32,System.Int32,System.Int32)">
            <summary>
                Fires mouse button event in the specified coordinates.
            </summary>
            <param name="button">Represents mouse button value - MouseButton enum for WPF and MouseButtons enum for Windows forms.</param>
            <param name="state">Represents mouse button state.</param>
            <param name="clickCount">Clicks count for selected button.</param>
            <param name="x">X local coordinate of click position.</param>
            <param name="y">Y local coordinate of click position.</param>
        </member>
        <member name="M:DotNetBrowser.IInputSimulator.SimulateMouseMoveEvent(System.Int32,System.Int32)">
            <summary>
                Fires mouse move to the specified coordinates.
            </summary>
            <param name="x">X local coordinate of move position.</param>
            <param name="y">Y local coordinate of move position.</param>
        </member>
        <member name="M:DotNetBrowser.IInputSimulator.SimulateMouseWheelEvent(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Fires mouse wheel rotation event in the specified coordinates and direction.
            </summary>
            <param name="x">X local coordinate of mouse position.</param>
            <param name="y">Y local coordinate of mouse position.</param>
            <param name="unitsToScroll">Mouse wheel rotation units count.</param>
            <param name="isHorizontalScroll">Specifies the scroll direction.</param>
        </member>
        <member name="T:DotNetBrowser.PageType">
            <summary>
                Represents navigation entry page type.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PageType.Normal">
            <summary>
                Page has been loaded successfully.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PageType.Error">
            <summary>
                An error was occured during the page loading.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PageType.Interstitial">
            <summary>
                Page is in interstitial state.
            </summary>
        </member>
        <member name="T:DotNetBrowser.INavigationEntry">
            <summary>
                Represents entry from back-forward navigation list.
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.Offset">
            <summary>
                Navigation entry offset related to current entry
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.Index">
            <summary>
                Navigation entry index in navigation list
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.Url">
            <summary>
                Url that was setted after the redirection.
                If redirection was not performed the value will correspond to "OriginalRequestUrl" property.
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.Title">
            <summary>
                Title of the webpage with specified Url.
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.Timestamp">
            <summary>
                Entry loaded timestamp.
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.PageType">
            <summary>
                Type of the webpage with specified Url.
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.HttpStatusCode">
            <summary>
                Webpage loading HTTP status code.
            </summary>
        </member>
        <member name="P:DotNetBrowser.INavigationEntry.OriginalRequestUrl">
            <summary>
                Url that was setted by user before the redirection occurs (if exists).
            </summary>
        </member>
        <member name="T:DotNetBrowser.IPermissionHandler">
            <summary>
                Allows handling permission requests from web pages such as
                geolocation, desktop notification permission requests, etc.
                Any web page can request permissions for the required type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.IPermissionHandler.OnRequestPermission(DotNetBrowser.PermissionRequest)">
            <summary>
                This method is invoked when a web page requests specific permission.
                If an exception is thrown from this method, the default behavior
                will be used, the <see cref="F:DotNetBrowser.PermissionStatus.DENIED"/> status will be
                return to the web page.
            </summary>
            <param name="request">provides details about permission request.</param>
            <returns>
                <see cref="F:DotNetBrowser.PermissionStatus.GRANTED"/> if the given permission
                request is granted, otherwise <see cref="F:DotNetBrowser.PermissionStatus.DENIED"/>.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DotNetBrowser.Notification" -->
        <member name="M:DotNetBrowser.Notification.Close">
            <summary>
                Informs browser that this notification was closed by user and marks it as Closed. See <see cref="P:DotNetBrowser.Notification.Closed"/>.
                Does nothing if this notification has been already closed or if browser instance in which context this notification
                was created has been disposed or reloaded.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Notification.Click">
            <summary>
                Informs browser that this notification was clicked by user.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                if this notification has been already closed or if browser instance in which
                context this notification was created has been disposed or reloaded.
            </exception>
        </member>
        <member name="P:DotNetBrowser.Notification.Url">
            <summary>
                Gets notification URL.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Notification.Title">
            <summary>
                Gets notification title or empty string if notification doesn't have title.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Notification.Message">
            <summary>
                Gets notification message or empty string if notification doesn't have message.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Notification.Type">
            <summary>
                Gets notification type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Notification.Closed">
            <summary>
                Informs about the state of the notification.
                Closed notification will not receive and proceed events from browser
                and will do nothing on public method invocations.
                Notification can be closed by user invoking the <see cref="M:DotNetBrowser.Notification.Close"/> method or via JavaScript code
                Notification.close().
            </summary>
        </member>
        <member name="E:DotNetBrowser.Notification.OnClose">
            <summary>
                An event that indicates that the notification has been closed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.NotificationService">
            <summary>
                Provides access to browser desktop notifications functionality.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:DotNetBrowser.NotificationService.NotificationHandler" -->
        <member name="T:DotNetBrowser.NotificationType">
            <summary>
                Represents enumeration with HTML5 desktop notification types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.NotificationType.SIMPLE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.NotificationType.BASE_FORMAT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.NotificationType.IMAGE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.NotificationType.MULTIPLE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.NotificationType.PROGRESS">
            <summary />
        </member>
        <member name="T:DotNetBrowser.PermissionRequest">
            <summary>
                Provides details on the permission request.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PermissionRequest.#ctor(DotNetBrowser.PermissionType,System.String)">
            <summary>
                Constructs a new PermissionRequest instance with
                the given type and url.
            </summary>
            <param name="type">the permission type of the current request.</param>
            <param name="url">
                a string that represents URL of the web page
                that requests permission.
            </param>
        </member>
        <member name="P:DotNetBrowser.PermissionRequest.Type">
            <summary>
                Gets the permission type of the current request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PermissionRequest.Url">
            <summary>
                Gets a string that represents URL of the web page
                that requests permission.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PermissionStatus">
            <summary>
                Represents enum with permission statuses.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PermissionStatus.GRANTED">
            <summary>
                Indicates that permission is granted.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PermissionStatus.DENIED">
            <summary>
                Indicates that permission is denied.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PermissionType">
            <summary>
                Represents enum with permission types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PermissionType.MIDI_SYSEX">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.PUSH_MESSAGING">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.NOTIFICATIONS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.GEOLOCATION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.PROTECTED_MEDIA_IDENTIFIER">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.MIDI">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.DURABLE_STORAGE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.AUDIO_CAPTURE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.VIDEO_CAPTURE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PermissionType.BACKGROUND_SYNC">
            <summary />
        </member>
        <member name="T:DotNetBrowser.RenderProcessInfo">
            <summary>
                Contains information about current render process associated with the Browser instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.RenderProcessInfo.Pid">
            <summary>
                Gets process ID of the render process associated with the Browser instance.
                Returns a cached value obtained during the <see cref="P:DotNetBrowser.Browser.RenderProcessInfo"/>
                property invocation. Render process with this ID can be terminated any time, so
                it's possible that there's no render process running with this ID anymore.
            </summary>
        </member>
        <member name="T:DotNetBrowser.StorageType">
            <summary>
                Represents Chromium data storage type.
            </summary>
        </member>
        <member name="F:DotNetBrowser.StorageType.DISK">
            <summary>
                Represents storage type when all the user data such as cache,
                cookies, HTML5 WebStorage files are written to the disk.
                By default, this storage type is used.
            </summary>
        </member>
        <member name="F:DotNetBrowser.StorageType.MEMORY">
            <summary>
                Represents storage type when all the user data such as cache,
                cookies, HTML5 WebStorage files are stored in memory. Kind of
                Chromium's "incognito" mode. When Chromium processes are
                terminated all data will be destroyed automatically.
            </summary>
        </member>
        <member name="T:DotNetBrowser.IWebStorage">
            <summary>
                The IWebStorage interface of the Web Storage API provides access to the session storage or
                local storage for a particular document on the loaded web page, allowing you to for example
                add, modify or delete stored data items.
            </summary>
        </member>
        <member name="M:DotNetBrowser.IWebStorage.Key(System.Int64)">
            <summary>
                Returns the name of the key in the storage. The order of keys is
                user-agent defined, so you should not rely on it.
            </summary>
            <param name="index">
                an integer representing the number of the key you want to get the name of.
                This is a zero-based index. Must be in the range greater than 0 and less than the Count.
            </param>
            <returns>a string containing the name of the key or null.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when the index isn't in the range greater than 0 and less than the Count.</exception>
        </member>
        <member name="M:DotNetBrowser.IWebStorage.Set(System.String,System.String)">
            <summary>
                Adds the key and value to the storage, or updates key's value if it already exists.
            </summary>
            <param name="key">the name of the key you want to create. Cannot be null.</param>
            <param name="value">the value you want to give the key you are creating. Cannot be null.</param>
            <returns>
                true if key/value pair was successfully added or updated.
                Returns false in case of exceptions.
            </returns>
            <exception cref="T:System.ArgumentNullException">when the key or value is null.</exception>
        </member>
        <member name="M:DotNetBrowser.IWebStorage.Remove(System.String)">
            <summary>
                Removes the element with the specified key from the storage.
            </summary>
            <param name="key">key the name of the key you want to remove. Cannot be null.</param>
            <returns>
                true if key/value pair was successfully removed, or key doesn't exist.
                Returns false in case of exceptions.
            </returns>
            <exception cref="T:System.ArgumentNullException">when the key is null.</exception>
        </member>
        <member name="M:DotNetBrowser.IWebStorage.Clear">
            <summary>
                Removes all key/value pairs in the storage.
            </summary>
            <returns>
                true if storage was successfully cleared. Returns false in case of
                exceptions or storage was not initialized.
            </returns>
        </member>
        <member name="M:DotNetBrowser.IWebStorage.Contains(System.String)">
            <summary>
                Returns true if storage contains specified key or false otherwise.
            </summary>
            <param name="key">the name of the key you want to check. Cannot be null.</param>
            <returns>true if storage contains specified key or false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">when the key is null.</exception>
        </member>
        <member name="P:DotNetBrowser.IWebStorage.Count">
            <summary>
                Gets number of key/value pairs in the storage. Returns 0 if the storage
                hasn't been initialized yet or has no key/value pairs.
            </summary>
        </member>
        <member name="P:DotNetBrowser.IWebStorage.Item(System.String)">
            <summary>
                Gets the value associated with the given key or null when the key doesn't exist.
            </summary>
            <param name="key">the name of the key you want to retrieve the value of. Cannot be null.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">when the key is null.</exception>
        </member>
        <member name="T:DotNetBrowser.BrowserFunction">
            <summary>
                Represents a function that can be invoked from JavaScript side.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserFunction.invoke(DotNetBrowser.JSValue[])">
            <summary>
                This method is invoked when an appropriate JavaScript function is invoked
                on JavaScript side.
            </summary>
            <param name="args">args the JavaScript arguments converted to Java types.</param>
            <returns>the result of function execution. This result will be passed on JavaScript side.</returns>
        </member>
        <member name="T:DotNetBrowser.BrowserPreferences">
            <summary>
                Browser instance and global library preferences.
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserPreferences.CHROMIUM_DIR_VARIABLE">
            <summary>
                The name of system environment variable that contains absolute path to Chromium binaries directory.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.SetChromiumDir(System.String)">
            <summary>
                Configures the library with absolute path to the directory where Chromium binaries are located.
            </summary>
            <param name="chromiumDir">Absolute path to the directory with Chromium binaries.</param>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.GetChromiumDir">
            <summary>
                Returns path to the directory where Chromium binaries are located or empty string
                if there's no such path. If the directory wasn't configured via <see cref="M:DotNetBrowser.BrowserPreferences.SetChromiumDir(System.String)"/> method,
                then this method returns default value via the <see cref="M:DotNetBrowser.BrowserPreferences.GetDefaultChromiumDir"/> method.
            </summary>
            <returns>
                path to the directory where Chromium binaries are located or empty string
                if there's no such path.
            </returns>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.SetUserAgent(System.String)">
            <summary>
                Configures the user agent string for all Browser instances. This method must be
                invoked before you create any Browser instance. If you don't provide user agent
                string using this method, then a default user agent string will be used.
            </summary>
            <param name="userAgent">a new user agent string.</param>
            <exception cref="T:System.ArgumentException">when userAgent is null.</exception>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.GetUserAgent">
            <summary>
                Returns the user agent string which was set using the <see cref="M:DotNetBrowser.BrowserPreferences.SetUserAgent(System.String)"/> method.
                Can return null if the user agent string wasn't provided via the
                <see cref="M:DotNetBrowser.BrowserPreferences.SetUserAgent(System.String)"/> method. This method cannot be used to receive a default
                user agent string.
            </summary>
            <returns>the user agent string which was set using the <see cref="M:DotNetBrowser.BrowserPreferences.SetUserAgent(System.String)"/> method.</returns>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.GetDefaultChromiumDir">
            <summary>
                Returns the path to the directory where Chromium binaries will be extracted by default.
                The absolute path to the default directory with Chromium binaries is:
                <pre>USER_TEMP_DIR + <see cref="P:DotNetBrowser.BrowserPreferences.ChromiumDirName"/> + ChromiumBuild</pre>.
            </summary>
            <returns>the path to the directory where Chromium binaries will be extracted by default.</returns>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.GetDefaultDataDir">
            <summary>
                Returns the path to the directory where user data files (e.g. history, cookies) will be stored.
                To calculate the path to this directory the method uses the following way: getDefaultChromiumDir() + "/data"
            </summary>
            <returns>path to the directory where user data files will be stored.</returns>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.GetDefaultAcceptLanguage">
            <summary>
                Returns the default accept language, represented by the string constructed from user.language and
                user.country system properties (e.g. en-us).
            </summary>
            <returns>
                the default accept language, represented by the string constructed from user.language and
                user.country system properties (e.g. en-us). If empty or null - returns "en-us".
            </returns>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.SetChromiumSwitches(System.String[])">
            <summary>
                Configures Chromium engine to use the command line flags (switches) in
                order to enable particular features or modify default functionality.
            </summary>
            <remarks>
                <para>
                    It is important to note that using these switches is not supported or recommended.
                    They should only be used for temporary cases and may break in the future.
                </para>
                <para>
                    Current switches may be found at
                    <a href="http://peter.sh/examples/?/chromium-switches.html">
                        http://peter.sh/examples/?/chromium-switches.html
                    </a>
                </para>
            </remarks>
            <param name="switches">switches a list of command line flags (switches).</param>
            <exception cref="T:System.ArgumentException">when switches is null.</exception>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.GetChromiumSwitches">
            <summary>
                Returns the Chromium switches that were set via the
                <see cref="M:DotNetBrowser.BrowserPreferences.SetChromiumSwitches(System.String[])"/> method.
            </summary>
            <returns>a list of Chromium switches.</returns>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.SetChromiumVariable(System.String,System.String)">
            <summary>
                Sets Chromium environment variables that will be passed to each Chromium process. Use
                this method when you need to provide environment variables to Chromium. For example,
                you can provide your GOOGLE_API_KEY, GOOGLE_DEFAULT_CLIENT_ID and GOOGLE_DEFAULT_CLIENT_SECRET
                environment variables to Chromium to enable Google APIs (see
                <a href="http://www.chromium.org/developers/how-tos/api-keys">API Keys</a>).
                <param name="name"> a string representation of the variable name. Cannot be <pre>null</pre>.</param>
                <param name="value"> value a string representation of the variable value. Cannot be <pre>null</pre>.</param>
                <exception cref="T:System.ArgumentException">when <pre>name</pre> or <pre>value</pre> is <pre>null</pre>.</exception>
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserPreferences.GetChromiumVariables">
            <summary>
                Returns copy of Chromium environment variables set via <see cref="M:DotNetBrowser.BrowserPreferences.SetChromiumVariable(System.String,System.String)"/> or
                empty map if no environment variables were set.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.DefaultEncoding">
            <summary>
                Default encoding for web pages.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.JavaScriptEnabled">
            <summary>
                JavaScript can be executed on the web page.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.JavaScriptCanAccessClipboard">
            <summary>
                JavaScript can access clipboard.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.LoadsImagesAutomatically">
            <summary>
                Images are loaded automatically.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.ImagesEnabled">
            <summary>
                Images are displayed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.PluginsEnabled">
            <summary>
                Plugins are enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.AllowScriptsToCloseWindows">
            <summary>
                JavaScript can close window.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.LocalStorageEnabled">
            <summary>
                Local storage is enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.DatabasesEnabled">
            <summary>
                DataBases are enbaled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.WebAudioEnabled">
            <summary>
                Web Audio is enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.ApplicationCacheEnabled">
            <summary>
                Application cache is enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.AllowDisplayingInsecureContent">
            <summary>
                Allow displaying insecure content.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.AllowRunningInsecureContent">
            <summary>
                Allow running insecure content.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.UnifiedTextcheckerEnabled">
            <summary>
                Text checker is enabled
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.FireMouseEventsEnabled">
            <summary>
                Fire mouse events is enabled
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.FireKeyboardEventsEnabled">
            <summary>
                Fire keyboard events is enabled
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.FireGestureEventsEnabled">
            <summary>
                Fire gesture events is enabled
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicy">
            <summary>
                This will protect against WebRTC leaks - while leaving WebRTC enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.TransparentBackground">
            <summary>
                Enables or disables HTML Transparent Background support.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.SandboxEnabled">
            <summary>
                Gets or sets sandbox status for render process.
                By default sandbox disabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.ChromiumProcessName">
            <summary>
                Gets or sets chromium process file name. By default is "DotNetBrowser.Chromium.exe".
            </summary>
            <exception cref="T:System.ArgumentException">when set value null or empty</exception>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.ChromiumDirName">
            <summary>
                Gets or sets the name of the directory in which the chromium binaries will be extracted to the temporary folder for
                the user.
                By default is "dotnetbrowser-chromium".
            </summary>
            <exception cref="T:System.ArgumentException">when set value null or empty</exception>
        </member>
        <member name="P:DotNetBrowser.BrowserPreferences.CrashDumpDir">
            <summary>
             The path to the directory where Chromium crash dumps will be stored.
            </summary>
        </member>
        <member name="T:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicyEnum">
            <summary>
                The list of supported WebRTC IP handling policy
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicyEnum.Unsupported">
            <summary />
        </member>
        <member name="F:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicyEnum.Empty">
            <summary />
        </member>
        <member name="F:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicyEnum.Default">
            <summary />
        </member>
        <member name="F:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicyEnum.DefaultPublicInterfaceOnly">
            <summary>
                Use the default public interface only.
                Send WebRTC traffic via the default public network adapter. This will be the VPN adapter for system-VPN users.
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicyEnum.DefaultPublicAndPrivateInterfaces">
            <summary>
                Use the default public interface and private interface.
                Same as DefaultPublicInterfaceOnly, except allow WebRTC traffic through the default private interface to your local
                network as well.
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserPreferences.WebRTCIPHandlingPolicyEnum.DisableNonProxiedUdp">
            <summary>
                Disable non-proxied UDP (force proxy).
                Force the use of a proxy, and only allow WebRTC traffic over UDP proxies. This will effectively disable WebRTC
                communication for most users (depending on UDP proxy usage).
            </summary>
        </member>
        <member name="T:DotNetBrowser.BrowserType">
            <summary>
                Provides set of supported browser types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserType.LIGHTWEIGHT">
            <summary>
                Indicates that <see cref="T:DotNetBrowser.Browser"/> instance will be initialized as a lightweight (off-screen)
                component. In this mode Chromium engine renders web page content off-screen and .Net component just
                displays rendering results as image using standard .Net Graphics API.
                <p/>
                In this mode GPU acceleration in Chromium engine isn't used. As result, rendering performance isn't
                so good as with enabled GPU acceleration.
                <p/>
            </summary>
        </member>
        <member name="F:DotNetBrowser.BrowserType.HEAVYWEIGHT">
            <summary>
                Indicates that <see cref="T:DotNetBrowser.Browser"/> instance will be initialized as a heavyweight component. Heavyweight
                components represents a native window embedded into .Net frame.
                <p/>
                In this mode Chromium uses GPU acceleration to render web page content directly onto an embedded into
                .Net frame window. Rendering performance in this case is the same as in Google Chrome.
                <p/>
            </summary>
        </member>
        <member name="T:DotNetBrowser.BrowserView">
            <summary>
                A view that displays web pages. BrowserView handles mouse and keyboard
                events, and manages scrolling automatically.
            </summary>
        </member>
        <member name="M:DotNetBrowser.BrowserView.GetComponent">
            <summary>
                Returns a lightweight ui component with embedded web browser control that
                displays web pages. This component can be used in  applications as
                standard component.
            </summary>
            <returns>component for embedding into applications.</returns>
        </member>
        <member name="M:DotNetBrowser.BrowserView.GetImage">
            <summary>
                Returns an image of the currently loaded web page. The image size will be
                equal to the size of the BrowserView.
            </summary>
            <returns>an image of the currently loaded web page.</returns>
        </member>
        <member name="M:DotNetBrowser.BrowserView.UpdateSize(System.Int32,System.Int32)">
            <summary>
                Updates the size of BrowserView to the required width
                and height. Avoid using this method when the BrowserView
                is embedded into UI container and displayed. This method should be
                used in headless mode, when you don't display this view, but you need
                to update its size.
            </summary>
            <param name="width">the new width of the view in pixels.</param>
            <param name="height">the new height of the view in pixels.</param>
        </member>
        <member name="M:DotNetBrowser.BrowserView.SetKeyFilter(DotNetBrowser.KeyFilter)">
            <summary>
                Sets key filter that can be used to filter key events sent to Browser view.
                By default BrowserView doesn't have key filter, so all key events
                are sent to web browser control.
            </summary>
            <param name="keyFilter">the new key filter.</param>
        </member>
        <member name="M:DotNetBrowser.BrowserView.GetDeviceScaleFactor">
            <summary>
                Returns device scale factor associated with the current view. For
                standard-resolution displays, the scale factor is 1.0 and one point equals
                one pixel. For Retina displays, the scale factor is 2.0 and one point is
                represented by four pixels. Use scale factor to scale image received via the
                <see cref="M:DotNetBrowser.BrowserView.GetImage"/> method.
            </summary>
            <returns>
                the device scale factor associated with the current view. For
                standard-resolution displays, it will be 1.0. For Retina displays - 2.0.
            </returns>
        </member>
        <member name="P:DotNetBrowser.BrowserView.Browser">
            <summary>
                Returns Browser instance associated with the current container.
            </summary>
            <returns>the browser instance</returns>
        </member>
        <member name="P:DotNetBrowser.BrowserView.IsDisposed">
            <summary>
                Gets a value indicating whether the current view has been disposed of.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserView.InputSimulator">
            <summary>
                Returns input simulation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserView.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserView.Focused">
            <summary>
                Sets focus or unfocus to the current view.
                Unfocus available only for <see cref="F:DotNetBrowser.BrowserType.HEAVYWEIGHT"/> view.
            </summary>
        </member>
        <member name="P:DotNetBrowser.BrowserView.InitialFocusOwner">
            <summary>
                Gets or sets the initial focus status for the current view.
                By default, BrowserView obtains the focus after it is shown on a layout.
            </summary>
        </member>
        <member name="T:DotNetBrowser.CacheStorage">
            <summary>
                The system for cache handling.
                The persistent cache are stored in the Browser data directory in Cache folder. By default
                all Browsers use predefined data directory. You can find out where this
                directory is located using the <see cref="M:DotNetBrowser.BrowserPreferences.GetDefaultChromiumDir"/>
                method.
                <p/>
                So, if Browser A and B have the same data directory, then they will access
                the cache of each other.
                <p/>
                If you need to configure each Browser to use unique cache storage which is
                not accessible for other Browser instances, you need to provide unique
                user data directory for each Browser instance. The user data directory path
                can be provided via configured <see cref="M:DotNetBrowser.BrowserContext.#ctor(DotNetBrowser.BrowserContextParams)"/> object that
                must be passed into the <see cref="M:DotNetBrowser.BrowserFactory.Create(DotNetBrowser.BrowserContext)"/> factory method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CacheStorage.ClearCache">
            <summary>
                Clears cache data in Browser's user data directory. This method clears cache asynchronously,
                so when this method returns there's no guaranty that all cache data is cleared completely.
                To clear cache and get notification when cache data is cleared completely use
                the clearCache(Callback) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CacheStorage.ClearCache(System.Action)">
            <summary>
                Clears cache data in Browser's user data directory and notifies when cache is successfully cleared via
                passed <paramref name="onCacheCleared" />.
            </summary>
            <param name="onCacheCleared">action for notification when cache is cleared successfully. Can be null.</param>
        </member>
        <member name="T:DotNetBrowser.CertificateVerifier">
            <summary>
                Represents a service for verifying SSL certificates.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CertificateVerifier.Verify(DotNetBrowser.CertificateVerifyParams)">
            <summary>
                Verifies the given SSL <see cref="P:DotNetBrowser.CertificateVerifyParams.Certificate"/> against
                the given <see cref="P:DotNetBrowser.CertificateVerifyParams.HostName"/> as an SSL server.
                <p/>
                This method is invoked every time when Server SSL certificate verification is required. By default
                Chromium uses its own default certificate verifier which always checks incoming SSL certificate and
                passes verification results as <see cref="P:DotNetBrowser.CertificateVerifyParams.VerifyFlags"/> parameter.
                You can analyze the verify flags parameter to find out how the given certificate was initially
                validated by Chromium engine and decide whether it should be accepted/rejected, or Chromium
                should decide it itself.
                <p/>
                If implementation of this method throws an exception, then default behavior will be used - Chromium
                engine will decide itself whether SSL certificate should be accepted or rejected.
            </summary>
            <param name="parameters">details about certificate, host, and Chromium verify results.</param>
            <returns>
                <see cref="F:DotNetBrowser.CertificateVerifyResult.OK"/> to accept SSL certificate,
                <see cref="F:DotNetBrowser.CertificateVerifyResult.INVALID"/> to reject SSL certificate,
                <see cref="F:DotNetBrowser.CertificateVerifyResult.DEFAULT"/> to let Chromium decide.
            </returns>
        </member>
        <member name="T:DotNetBrowser.CertificateVerifyFlag">
            <summary>
                Enum of flags that indicate result of SSL certificate verification
                by default Chromium certificate verifier.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.COMMON_NAME_INVALID">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.DATE_INVALID">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.AUTHORITY_INVALID">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.NO_REVOCATION_MECHANISM">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.UNABLE_TO_CHECK_REVOCATION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.REVOKED">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.INVALID">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.WEAK_SIGNATURE_ALGORITHM">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.NON_UNIQUE_NAME">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.WEAK_KEY">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.PINNED_KEY_MISSING">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.NAME_CONSTRAINT_VIOLATION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.VALIDITY_TOO_LONG">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.IS_EV">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.REV_CHECKING_ENABLED">
            <summary />
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyFlag.SHA1_SIGNATURE_PRESENT">
            <summary />
        </member>
        <member name="T:DotNetBrowser.CertificateVerifyParams">
            <summary>
                Provides information about SSL certificate, host name, and Chromium verify results.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificateVerifyParams.HostName">
            <summary>
                Gets string that represents SSL server host name.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificateVerifyParams.Certificate">
            <summary>
                Gets SSL certificate to verify.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificateVerifyParams.VerifyFlags">
            <summary>
                Gets list of flags that indicate result of SSL certificate verification by Chromium engine.
                If the list is empty, then default SSL certificate verifier couldn't find any issues with the
                given certificate, so it's a valid certificate.
            </summary>
        </member>
        <member name="T:DotNetBrowser.CertificateVerifyResult">
            <summary>
                Represents possible certificate verification results.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyResult.OK">
            <summary>
                SSL certificate should be accepted.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyResult.INVALID">
            <summary>
                SSL certificate is invalid and must be rejected.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CertificateVerifyResult.DEFAULT">
            <summary>
                Let Chromium decided whether SSL certificate should be accepted or rejected.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ColorModel">
            <summary>
                Print color mode values.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.UNKNOWN_COLOR_MODEL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.GRAY">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.COLOR">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.CMYK">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.CMY">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.KCMY">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.CMY_K">
            <summary>
                Represents CMY+K.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.BLACK">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.GRAYSCALE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.RGB">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.RGB16">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.RGBA">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ColorModel.COLORMODE_COLOR">
            <summary>
                Used in samsung printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.COLORMODE_MONOCHROME">
            <summary>
                Used in samsung printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.HP_COLOR_COLOR">
            <summary>
                Used in HP color printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.HP_COLOR_BLACK">
            <summary>
                Used in HP color printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.PRINTOUTMODE_NORMAL">
            <summary>
                Used in foomatic ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.PRINTOUTMODE_NORMAL_GRAY">
            <summary>
                Used in foomatic ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.PROCESSCOLORMODEL_CMYK">
            <summary>
                Used in canon printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.PROCESSCOLORMODEL_GREYSCALE">
            <summary>
                Used in canon printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.PROCESSCOLORMODEL_RGB">
            <summary>
                Used in canon printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.BROTHER_CUPS_COLOR">
            <summary>
                Used in brother color laser printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.BROTHER_CUPS_MONO">
            <summary>
                Used in brother color laser printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.BROTHER_BRSCRIPT3_COLOR">
            <summary>
                Used in brother BRScript3 color printer ppds.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ColorModel.BROTHER_BRSCRIPT3_BLACK">
            <summary>
                Used in brother BRScript3 color printer ppds.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ContextMenu">
            <summary>
                Provides access to context menu items and allows notifying
                Chromium engine about context menu state.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ContextMenu.NotifyItemSelected(DotNetBrowser.ContextMenuItem)">
            <summary>
                Notifies Chromium engine that the given context menu item has been selected.
                Chromium will execute corresponding functionality of the selected context menu item.
            </summary>
            <param name="item">selected context menu item. Cannot be null.</param>
            <exception cref="T:System.ArgumentException">when item is null.</exception>
        </member>
        <member name="M:DotNetBrowser.ContextMenu.NotifyContextMenuOpened">
            <summary>
                Notifies Chromium engine that context menu has been opened. Can be invoked multiple times.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ContextMenu.NotifyContextMenuClosed">
            <summary>
                Notifies Chromium engine that context menu has been closed. Can be invoked multiple times.
                Chromium engine will update context menu state flag. When context menu is closed,
                Chromium ignores NotifyItemSelected(ContextMenuItem) calls.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenu.Items">
            <summary>
                Gets  a list with context menu items.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ContextMenuItem">
            <summary>
                Provides info about context menu item.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenuItem.Text">
            <summary>
                Gets context menu item text/label. Returns empty string if menu item represents separator.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenuItem.Type">
            <summary>
                Gets context menu item type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenuItem.IsEnabled">
            <summary>
                Indicates whether context menu item is enabled or not.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenuItem.IsChecked">
            <summary>
                Indicates whether context menu item is checked or not.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenuItem.Items">
            <summary>
                Gets a list of sub-items or empty collection if the item doesn't have sub-items.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ContextMenuItemType">
            <summary>
                Provides set of supported context menu types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ContextMenuItemType.ITEM">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ContextMenuItemType.CHECKABLE_ITEM">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ContextMenuItemType.GROUP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ContextMenuItemType.SEPARATOR">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ContextMenuItemType.MENU">
            <summary />
        </member>
        <member name="T:DotNetBrowser.CustomProxyConfig">
            <summary>
                Describes a user's proxy settings.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CustomProxyConfig.#ctor(System.String)">
            <summary>
                Constructs a new CustomProxyConfig instance with given proxyRules.
                <p/>
                Examples of the proxyRules string:
                <li>
                    <pre>"http=foopy:80;ftp=foopy2"</pre>use HTTP proxy "foopy:80" for <code>%http://</code> URLs,
                    and HTTP proxy "foopy2:80" for <code>%ftp://</code> URLs.
                </li>
                <li><pre>"foopy:80"</pre>use HTTP proxy "foopy:80" for all URLs.</li>
                <li><pre>"socks4://foopy"</pre>use SOCKS v4 proxy "foopy:1080" for all URLs.</li>
            </summary>
            <param name="proxyRules">
                string that represents proxy rules in specified format. The string should be a
                semicolon-separated list of ordered proxies that apply to a particular URL scheme.
            </param>
            <exception cref="T:System.ArgumentException">when proxyRules is null.</exception>
        </member>
        <member name="M:DotNetBrowser.CustomProxyConfig.#ctor(System.String,System.String)">
            <summary>
                Constructs a new CustomProxyConfig instance with given proxyRules and
                exceptions.
                <p/>
                The format of the exceptions string can be any of the following:
                <ul>
                    <li>
                        [ URL_SCHEME "://" ] HOSTNAME_PATTERN [ ":" &lt;port&gt; ]
                        Examples:
                        "foobar.com", "*foobar.com", "*.foobar.com", "*foobar.com:99", "https://x.*.y.com:99"
                    </li>
                    <li>
                        "." HOSTNAME_SUFFIX_PATTERN [ ":" PORT ]
                        Examples:
                        ".google.com", ".com", "http://.google.com"
                    </li>
                    <li>
                        [ SCHEME "://" ] IP_LITERAL [ ":" PORT ]
                        Examples:
                        "127.0.1", "[0:0::1]", "[::1]", "http://[::1]:99"
                    </li>
                    <li>
                        IP_LITERAL "/" PREFIX_LENGHT_IN_BITS
                        Examples:
                        "192.168.1.1/16", "fefe:13::abc/33"
                    </li>
                    <li>
                        "&lt;local&gt;"
                        Match local addresses. The meaning of "&lt;local&gt;" is whether the host matches
                        one of: "127.0.0.1", "::1", "localhost".
                    </li>
                </ul>
                <p/>
                If you need to provide several exception rules you can separate them using comma:
                "*foobar.com,.google.com,&lt;local&gt;".
            </summary>
            <param name="proxyRules">
                string that represents proxy rules in specified format. The string should be a
                semicolon-separated list of ordered proxies that apply to a particular URL scheme.
            </param>
            <param name="exceptions">string that represents the set of URLs that should bypass the proxy settings.</param>
            <exception cref="T:System.ArgumentException">when proxyRules is null.</exception>
        </member>
        <member name="P:DotNetBrowser.CustomProxyConfig.ProxyRules">
            <summary>
                Gets string that represents proxy rules in specified format. The string should be a
                semicolon-separated list of ordered proxies that apply to a particular URL scheme.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CustomProxyConfig.Exceptions">
            <summary>
                Gets string that represents the set of URLs that should bypass the proxy settings.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DirectProxyConfig">
            <summary>
                With this proxy configuration the connection doesn't use a proxy server.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DrawingView">
            <summary>
                A view that displays web pages.
                Defines a event that indicates when content of loaded web page in the browser view has been repainted.
            </summary>
        </member>
        <member name="E:DotNetBrowser.DrawingView.OnRepaint">
            <summary>
                An event that indicates when content of loaded web page in Chromium has been repainted.
            </summary>
        </member>
        <member name="E:DotNetBrowser.DrawingView.OnRedraw">
            <summary>
                An event that indicates when content of loaded web page in ui component has been repainted.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DuplexMode">
            <summary>
                Print duplex mode values.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DuplexMode.UNKNOWN">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DuplexMode.SIMPLEX">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DuplexMode.LONG_EDGE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DuplexMode.SHORT_EDGE">
            <summary />
        </member>
        <member name="T:DotNetBrowser.Events.OnRepaintEventArgs">
            <summary>
                Provides event information for event that indicates that content of loaded web page in the browser view has been
                repainted.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.OnRepaintEventArgs.UpdatedRect">
            <summary>
                Gets rectangle on the loaded web page that has been repainted.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.OnRepaintEventArgs.ClientSize">
            <summary>
                Gets size of the loaded web page
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.OnRepaintEventHandler">
            <summary>
                Represents the method that will handle event that indicates when content of loaded web page in the browser view has
                been repainted.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.OnRepaintEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.PrintJobEventArgs">
            <summary>
                Provides event information for event that indicate printing job status
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.PrintJobEventArgs.#ctor(DotNetBrowser.Browser,System.Boolean)">
            <summary>
                Constructor
            </summary>
            <param name="browser">The browser instance on which the event is initially occurred.</param>
            <param name="success">Indicate job finishing satus. Is true when print job has been finished successfully.</param>
        </member>
        <member name="P:DotNetBrowser.Events.PrintJobEventArgs.Success">
            <summary>
                Is true when print job has been finished successfully.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.PrintJobEventHandler">
            <summary>
                Represents the method that will handle event that indicates when printing job updates its state.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.PrintJobEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.FullScreenHandler">
            <summary>
                The listener interface for receiving full screen state change events.
            </summary>
        </member>
        <member name="M:DotNetBrowser.FullScreenHandler.OnFullScreenEnter">
            <summary>
                Invoked when browser instance is entered into full screen mode.
            </summary>
        </member>
        <member name="M:DotNetBrowser.FullScreenHandler.OnFullScreenExit">
            <summary>
                Invoked when browser instance is exited from full screen mode.
            </summary>
        </member>
        <member name="T:DotNetBrowser.HeadersReceivedParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.OnHeadersReceived(HeadersReceivedParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.HeadersReceivedParams.#ctor(System.Int64,System.String,System.String,System.Int32,System.String,System.String,DotNetBrowser.StatusLine,DotNetBrowser.HttpHeaders,DotNetBrowser.HttpHeadersEx)">
            <summary>
                Constructs a new HeadersReceivedParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="headers">HTTP headers for the current request.</param>
        </member>
        <member name="P:DotNetBrowser.HeadersReceivedParams.Headers">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.HeadersReceivedParams.HeadersEx">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="T:DotNetBrowser.FormData">
            <summary>
                Represents POST data parameters if the Content-Type is application/x-www-form-urlencoded.
            </summary>
        </member>
        <member name="M:DotNetBrowser.FormData.#ctor">
            <summary>
                Constructs a new FormData instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.FormData.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
                Constructs a new FormData instance with specified parameters.
            </summary>
            <param name="keyValuePairs">All keys from the key-value pair collection of the POST request.</param>
        </member>
        <member name="M:DotNetBrowser.FormData.GetPairKeys">
            <summary>
                Returns all keys from the key-value pair collection of the POST request.
            </summary>
            <returns>all keys from the key-value pair collection of the POST request.</returns>
        </member>
        <member name="M:DotNetBrowser.FormData.GetPairValues(System.String)">
            <summary>
                Returns a list of values from the key-value pair collection associated with specified key.
            </summary>
            <param name="key">the key.</param>
            <returns>a list of values from the key-value pair collection associated with specified key.</returns>
        </member>
        <member name="M:DotNetBrowser.FormData.SetPair(System.String,System.String[])">
            <summary>
                Sets key-value pair to the key-value pair collection of the POST request. If such a key already exist,
                it will be replaced.
            </summary>
            <param name="key">the key.</param>
            <param name="values">the values.</param>
            <returns>the previous value associated with key, or null if there was no mapping for key.</returns>
        </member>
        <member name="M:DotNetBrowser.FormData.RemovePair(System.String)">
            <summary>
                Removes key-value pair with associated key from the key-value pair collection of the POST request.
            </summary>
            <param name="key">the key.</param>
            <returns>the list of previous values associated with the key, or null if there was no mapping for key.</returns>
        </member>
        <member name="M:DotNetBrowser.FormData.RemoveAllPairs">
            <summary>
                Removes all pairs from the key-value pair collection of the POST request.
            </summary>
        </member>
        <member name="M:DotNetBrowser.FormData.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current FormData.</returns>
        </member>
        <member name="M:DotNetBrowser.FormData.Equals(System.Object)">
            <summary>
                Determines whether the specified FormData is equal to the current FormData.
            </summary>
            <param name="obj">The object to compare with the current FormData object.</param>
            <returns>
                true if the specified object is equal to the current FormData object;
                otherwise, false.
            </returns>
        </member>
        <member name="P:DotNetBrowser.FormData.ContentType">
            <summary>
                Gets content type of POST data.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Internals.IBrowserWatcher">
            <summary>
                Provides an ability to watch browser events.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.FinishLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been finished.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.StartLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been started.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.FailLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been failed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.ProvisionalLoadingFrameEvent">
            <summary>
                An event that indicates that provisional load for a specified frame was successfully committed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.DocumentLoadedInFrameEvent">
            <summary>
                An event that indicates that frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.DocumentLoadedInMainFrameEvent">
            <summary>
                An event that indicates that main frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.RenderCreatedEvent">
            <summary>
                An event that indicates that the render process is created.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.RenderGoneEvent">
            <summary>
                An event that indicates that the render process is gone.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.RenderResponsiveEvent">
            <summary>
                An event that indicates that the render process is no longer hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.RenderUnresponsiveEvent">
            <summary>
                An event that indicates that the render process is hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.StatusChangedEvent">
            <summary>
                An event that indicates that the status has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.TitleChangedEvent">
            <summary>
                An event that indicates that the title of a document in main frame has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.ConsoleMessageEvent">
            <summary>
                An event that indicates that the message was added to the console.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.DisposeEvent">
            <summary>
                An event that indicates that browser instance disposed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.ScriptContextCreated">
            <summary>
                An event that indicates that JavaScript context has been created. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="E:DotNetBrowser.Internals.IBrowserWatcher.ScriptContextDestroyed">
            <summary>
                An event that indicates that JavaScript context has been destroyed. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSArray">
            <summary>
                Represents JavaScript array.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSObject">
            <summary>
                Represents a JavaScript object. Provides access to the object's properties and functions.
                JavaScript object is alive until its JavaScript execution context exist. Once execution context
                is disposed, all JavaScript objects available in scope of this context will be automatically disposed.
                If you try to access already disposed object, you will get InvalidOperationException.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSValue">
            <summary>
                Class for all JavaScript values. This class is used to store the
                result of the <see cref="M:DotNetBrowser.Browser.ExecuteJavaScript(System.String)"/>
                method execution.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSValue.Create(System.Double)">
            <summary>
                Creates double JSValue instance.
            </summary>
            <param name="value">Double value.</param>
            <returns>Double JSValue instance.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.Create(System.Boolean)">
            <summary>
                Creates boolean JSValue instance.
            </summary>
            <param name="value">Boolean value.</param>
            <returns>Boolean JSValue instance.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.CreateUndefined">
            <summary>
                Creates undefined JSValue instance.
            </summary>
            <returns>Undefined JSValue instance.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.Create(System.String)">
            <summary>
                Creates string JSValue instance.
            </summary>
            <param name="value">String value.</param>
            <returns>String JSValue instance.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.CreateJSON(System.String)">
            <summary>
                Creates JavaScript value that represents a string in JSON format. When this
                value is passed to JavaScript side, it will be automatically parsed and converted
                to appropriate JavaScript object.
            </summary>
            <param name="jsonString">string in JSON format.</param>
            <returns>JavaScript value that represents a string in JSON format.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.CreateNull">
            <summary>
                Creates null JSValue instance.
            </summary>
            <returns>null JSValue instance.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsUndefined">
            <summary>
                Indicates whether JavaScript value is undefined.
            </summary>
            <returns>true when JavaScript value is undefined.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsObject">
            <summary>
                Indicates whether JavaScript value is an object. If this method returns true, then
                the value can be casted to JSObject type. For example:
                <code>
            if (value.IsObject()) {
                JSObject object = value.AsObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is an object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsFunction">
            <summary>
                Indicates whether JavaScript value is a function. If this method returns true, then
                the value can be casted to JSFunction type. For example:
                <code>
            if (value.IsFunction()) {
                JSFunction function = value.AsFunction();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is an function.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsNull">
            <summary>
                Indicates whether JavaScript value is NULL.
            </summary>
            <returns>true when JavaScript value is NULL.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsTrue">
            <summary>
                Indicates whether JavaScript value represents bool TRUE value.
            </summary>
            <returns>true when JavaScript value represents bool TRUE value.</returns>
            <exception cref="T:System.InvalidOperationException">
                when current JavaScript object doesn't represent a primitive
                boolean or Boolean object.
            </exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsFalse">
            <summary>
                Indicates whether JavaScript value represents bool FALSE value.
            </summary>
            <returns>true when JavaScript value represents bool FALSE value.</returns>
            <exception cref="T:System.InvalidOperationException">
                when current JavaScript object doesn't represent a primitive
                boolean or Boolean object.
            </exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsString">
            <summary>
                Indicates whether JavaScript value is a string. If this method returns true,
                then the value can be casted to JSString type. For example:
                <code>
            if (value.IsString()) {
                JSString string = value.AsString();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a string.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsJSON">
            <summary>
                Indicates whether JavaScript value is a string in JSON format.
            </summary>
            <returns>true when JavaScript value is a string in JSON format.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsBool">
            <summary>
                Indicates whether JavaScript value is a boolean value. If this method returns true,
                then the value can be casted to JSBoolean type. For example:
                <code>
            if (value.IsBool()) {
                JSBoolean bool = value.AsBoolean();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a Bool object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsNumber">
            <summary>
                Indicates whether JavaScript value is a number value which equals to double type.
                If this method returns true, then the value can be casted to
                JSNumber type. For example:
                <code>
            if (value.IsNumber()) {
                JSNumber number = value.AsNumber();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a number value.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsArray">
            <summary>
                Indicates whether JavaScript value is an array. If this method returns true, then
                the value can be casted to JSArray type. For example:
                <code>
            if (value.IsArray()) {
                JSArray array = value.AsArray();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is an array.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsBooleanObject">
            <summary>
                Indicates whether JavaScript value is a JSBoolean object. If this method returns true, then
                the value can be casted to JSBooleanObject type. For example:
                <code>
            if (value.IsBooleanObject()) {
                JSBooleanObject booleanObject = value.AsBooleanObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a JSBoolean object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsNumberObject">
            <summary>
                Indicates whether JavaScript value is a Number object. If this method returns true, then
                the value can be casted to JSNumberObject type. For example:
                <code>
            if (value.IsNumberObject()) {
                JSNumberObject numberObject = value.AsNumberObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a Number object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsStringObject">
            <summary>
                Indicates whether JavaScript value is a String object. If this method returns true, then
                the value can be casted to JSStringObject type. For example:
                <code>
            if (value.isStringObject()) {
                JSStringObject stringObject = value.asStringObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a String object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.IsDotNetObject">
            <summary>
                Indicates whether JavaScript value is a .Net object. If this method returns true, then
                the value can be casted to Object type. For example:
                <pre>
                    if (value.IsDotNetObject()) {
                    Object object = value.AsDotNetObject();
                    }
                </pre>
            </summary>
            <returns>true when JavaScript value is an .Net object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsBoolean">
            <summary>
                Casts the current JavaScript object to JSBoolean type. If the current object
                doesn't represent a Boolean object, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent a JSBoolean object.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsFunction">
            <summary>
                Casts the current JavaScript object to JSFunction type. If the current object
                doesn't represent a function, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent a function.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsBooleanObject">
            <summary>
                Casts the current JavaScript object to JSBooleanObject type. If the current object
                doesn't represent a Boolean object, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent a Boolean object.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsNumber">
            <summary>
                Casts the current JavaScript object to JSNumber type. If the current object
                doesn't represent a number value, the InvalidCastException error is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsNumberObject">
            <summary>
                Casts the current JavaScript object to JSNumberObject type. If the current object
                doesn't represent a Number object, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent a Number object.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsArray">
            <summary>
                Casts the current JavaScript object to JSArray type. If the current object
                doesn't represent an array, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent an array.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsObject">
            <summary>
                Casts the current JavaScript object to JSObject type. If the current object
                doesn't represent an object (e.g. it's a primitive value), the InvalidCastException
                error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent an Object.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsString">
            <summary>
                Casts the current JavaScript object to JSString type. If the current object
                doesn't represent a string value, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent a string value.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsStringObject">
            <summary>
                Casts the current JavaScript object to JSStringObject type. If the current object
                doesn't represent a String object, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent a String object.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.AsDotNetObject">
            <summary>
                Casts the current JavaScript object to Object type. If the current object
                doesn't represent a .Net object, the InvalidCastException error is thrown.
            </summary>
            <exception cref="T:System.InvalidCastException">when current object doesn't represent a .Net object.</exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.GetBool">
            <summary>
                Returns boolean value of the current JavaScript object if object represents
                a primitive boolean or Boolean object, otherwise throws InvalidOperationException.
            </summary>
            <returns>value of JavaScript bool value.</returns>
            <exception cref="T:System.InvalidOperationException">
                when current JavaScript object doesn't represent a primitive
                boolean or Boolean object.
            </exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.GetNumber">
            <summary>
                Returns number value of the current JavaScript object if object represents
                a primitive number or Number object, otherwise throws InvalidOperationException.
            </summary>
            <returns>
                value of the current JavaScript object if object represents
                a primitive number or Number object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                when current JavaScript object doesn't represent a primitive
                number or Number object.
            </exception>
        </member>
        <member name="M:DotNetBrowser.JSValue.GetString">
            <summary>
                Returns string value of the current JavaScript object if object represents
                a primitive string or String object, otherwise throws InvalidOperationException.
            </summary>
            <returns>
                string value of the current JavaScript object if object represents
                a primitive string or String object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                when current JavaScript object doesn't represent a primitive
                string or String object.
            </exception>
        </member>
        <member name="M:DotNetBrowser.JSObject.HasProperty(System.String)">
            <summary>
                Checks whether JavaScript object has property or function with the given name.
            </summary>
            <param name="name">string that represents name of the property or function. Cannot be null or empty.</param>
            <returns>true if object has property with given name.</returns>
            <exception cref="T:System.ArgumentException">when name is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">when object is already disposed or invalid.</exception>
        </member>
        <member name="M:DotNetBrowser.JSObject.GetProperty(System.String)">
            <summary>
                Returns value of specified JavaScript object's property with the given name.
                The name parameter represents name of the current JavaScript object property or function.
            </summary>
            <param name="name">string that represents name of the property or function. Cannot be null or empty.</param>
            <returns>
                value of the JavaScript object's property with the given name.
                If object doesn't have this key, the return value represent 'undefined' value.
                See <see cref="M:DotNetBrowser.JSValue.IsUndefined"/>.
            </returns>
            <exception cref="T:System.ArgumentException">when name is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">when object is already disposed or invalid.</exception>
        </member>
        <member name="M:DotNetBrowser.JSObject.SetProperty(System.String,System.Object)">
            <summary>
                Sets a new property with the given name or modifies existing one in the current JavaScript object
                and returns true if the property with name was created or updated successfully.
                The name parameter represents JavaScript object's property name. The value can be one of
                the following types: String, Boolean, Integer, Long, Short, Byte, Double, Float, Object[], int,
                boolean, long, short, byte, double, float, Object, JSONString, JSFunctionCallback.
            </summary>
            <param name="name">string that represents name of the property. Cannot be null or empty.</param>
            <param name="value">
                a new value associated with the property with the given name.
                Cannot be null or JSObject with a different JavaScript context.
            </param>
            <returns>true when property with name was created or updated successfully.</returns>
            <exception cref="T:System.ArgumentException">when name is null or empty.</exception>
            <exception cref="T:System.ArgumentException">
                when value is null or represents JSObject with
                a different JavaScript context.
            </exception>
            <exception cref="T:System.InvalidOperationException">when object is already disposed or invalid.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DotNetBrowser.JSObject.SetProperty(System.Int32,System.Object)" -->
        <member name="M:DotNetBrowser.JSObject.RemoveProperty(System.String)">
            <summary>
                Removes property with the given name in the current JavaScript object and returns
                true if the property was successfully removed. Once you remove key, it will not be available
                in the current JavaScript object anymore.
            </summary>
            <param name="name">string that represents name of the property or function. Cannot be null or empty.</param>
            <returns>true if the property was successfully removed.</returns>
            <exception cref="T:System.ArgumentException">when name is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">when object is already disposed or invalid.</exception>
        </member>
        <member name="M:DotNetBrowser.JSObject.GetPropertyNames">
            <summary>
                Returns a list containing the names of the properties of this object, including properties
                from prototype objects.
            </summary>
            <returns>a list containing the names of the properties of this object.</returns>
            <exception cref="T:System.InvalidOperationException">when object is already disposed or invalid.</exception>
        </member>
        <member name="M:DotNetBrowser.JSObject.GetOwnPropertyNames">
            <summary>
                Returns a list containing the names of the properties of this object, excluding properties
                from prototype objects.
            </summary>
            <returns>a list containing the names of the own properties of this object.</returns>
            <exception cref="T:System.InvalidOperationException">when object is already disposed or invalid.</exception>
        </member>
        <member name="M:DotNetBrowser.JSObject.IsObject">
            <summary>
                Indicates whether JavaScript value is an object. If this method returns true, then
                the value can be casted to JSObject type. For example:
                <code>
            if (value.IsObject()) {
                JSObject object = value.AsObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is an object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSObject.IsDotNetObject">
            <summary>
                Indicates whether JavaScript value is an .net object. If this method returns true, then
                the value can be casted to .net object type. For example:
                <code>
            if (value.IsDotNetObject()) {
                object obj = value.AsDotNetObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a .net object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSObject.AsObject">
            <summary>
                Casts the current JavaScript object to JSObject type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSObject.AsDotNetObject">
            <summary>
                Casts the current JavaScript object to .net object type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSObject.ToJSONString">
            <summary>
                Returns text representation of JavaScript object. The equivalent of JSON.stringify() without
                parameters.
            </summary>
            <returns>a text representation of JavaScript object (including arrays), equivalent to JSON.stringify() output.</returns>
            <exception cref="T:System.InvalidOperationException">when object has circular fields aka 'obj.field = obj'.</exception>
            <exception cref="T:System.InvalidOperationException">when object has been already disposed.</exception>
        </member>
        <member name="P:DotNetBrowser.JSObject.IsDisposed">
            <summary>
                Indicates whether object is disposed or not.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSObject.Context">
            <summary>
                Gets JavaScript execution context associated with the current JavaScript object.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSArray.IsArray">
            <summary>
                Indicates whether JavaScript value is an array. If this method returns true, then
                the value can be casted to JSArray type. For example:
                <code>
            if (value.IsArray()) {
                JSArray array = value.AsArray();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is an array.</returns>
        </member>
        <member name="M:DotNetBrowser.JSArray.AsArray">
            <summary>
                Casts the current JavaScript object to JSArray type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSArray.Count">
            <summary>
                Gets the number of elements in this array. If array is empty, returns 0.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSArray.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified position in this array.
            </summary>
            <param name="index">index of the element to return.</param>
            <returns>the element at the specified position in this array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                then the index is less than 0, or index is equal to or greater
                than JSArray.Count.
            </exception>
        </member>
        <member name="T:DotNetBrowser.JSBoolean">
            <summary>
                Represents JavaScript primitive boolean value.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSPrimitive`1">
            <summary>
                An abstract class for JavaScript primitive types.
            </summary>
            <typeparam name="T">corresponding c# primitive type.</typeparam>
        </member>
        <member name="P:DotNetBrowser.JSPrimitive`1.Value">
            <summary>
                Gets the value of the current primitive instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSBoolean.IsBool">
            <summary>
                Indicates whether JavaScript value is a boolean value. If this method returns true,
                then the value can be casted to JSBoolean type. For example:
                <code>
            if (value.IsBool()) {
                JSBoolean bool = value.AsBoolean();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a Bool object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSBoolean.GetBool">
            <summary>
                Returns boolean value of the current JSBoolean instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSBoolean.AsBoolean">
            <summary>
                Casts the current JavaScript object to JSBoolean type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSBoolean.Value">
            <summary>
                Gets the value of the current JSBoolean instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSBooleanObject">
            <summary>
                Represents JavaScript Boolean object.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSBooleanObject.IsBooleanObject">
            <summary>
                Indicates whether JavaScript value is a JSBoolean object. If this method returns true, then
                the value can be casted to JSBooleanObject type. For example:
                <code>
            if (value.IsBooleanObject()) {
                JSBooleanObject booleanObject = value.AsBooleanObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a JSBoolean object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSBooleanObject.AsBooleanObject">
            <summary>
                Casts the current JavaScript object to JSBooleanObject type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSBooleanObject.GetBool">
            <summary>
                Returns boolean value of the current JSBooleanObject instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSBooleanObject.ValueOf">
            <summary>
                Gets the primitive value of the Boolean object.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSContext">
            <summary>
                Represents JavaScript execution context. Each frame on the web page has it's own execution context.
                JavaScript objects created in one context will not be visible and accessible in other contexts.
                <p />
                JavaScript context is initialized and created automatically for each frame on the loaded web page only if this
                frame
                has JavaScript code. If frame doesn't have JavaScript code, context will not be created for this frame. To
                force context creation you can call
                Browser.ExecuteJavaScriptAndReturnValue(long, String)} method for required frame.
                <p />
                When frame is reloaded or another web page is loaded, all existing contexts will be destroyed and new contexts will
                be created. To check whether context is destroyed get the IsDisposed property or use DisposedEvent.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSContext.Dispose">
            <summary>
                Disposes current context
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSContext.Equals(System.Object)">
            <summary>
                Determines whether the specified JSContext is equal to the current JSContext.
            </summary>
            <param name="obj">The object to compare with the current JSContext object.</param>
            <returns>
                true if the specified object is equal to the current JSContext object;
                otherwise, false.
            </returns>
        </member>
        <member name="M:DotNetBrowser.JSContext.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current JSContext.</returns>
        </member>
        <member name="M:DotNetBrowser.JSContext.CreateObject">
            <summary>
                Create a new empty JavaScript object instance that is available in scope of the current execution context.
            </summary>
            <returns>a new empty JavaScript object instance that is available in scope of the current execution context.</returns>
            <exception cref="T:System.InvalidOperationException">when context is not valid anymore and disposed.</exception>
        </member>
        <member name="M:DotNetBrowser.JSContext.Finalize">
            <summary>
                Destructor
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSContext.FrameId">
            <summary>
                Returns unique identifier of a frame which is associated this this JavaScript execution context.
                This method returns valid identifier even when context is disposed and frame with this ID doesn't
                exist anymore. Use this method only in combination with the IsDisposed property.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSContext.WorldId">
            <summary>
                Gets JavaScript world identifier associated with the current context.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSContext.IsDisposed">
            <summary>
                Indicates whether context is disposed or not. JavaScript context is disposed automatically when its frame is
                being unloaded. All JavaScript objects associated with this context will be disposed automaticall
            </summary>
        </member>
        <member name="E:DotNetBrowser.JSContext.DisposeEvent">
            <summary>
                An event that indicates that context instance disposed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSFunction">
            <summary>
                Represents a JavaScript function. JavaScript function always belongs to a JSObject instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSFunction.Invoke(DotNetBrowser.JSObject,System.Object[])">
            <summary>
                Executes JavaScript function asynchronously. It means that this method doesn't block current thread
                execution and ignores return value. If function execution raises an exception and you need to get information
                about this exception, then use ConsoleListener. All unexpected
                exceptions during function execution can be accessible via ConsoleListener like other JavaScript errors.
            </summary>
            <param name="instance">
                represents JSObject instance which is owner of the current function. If function
                represents a global JavaScript function, then you should use null. The instance
                must belong to the same JavaScript execution context as the current function.
            </param>
            <param name="args">input arguments.</param>
            <exception cref="T:System.ArgumentException">
                when instance is a valid JavaScript object, but it belongs to
                a different JavaScript execution context. The instance must be
                running in the same execution context as the current function.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                when function is already disposed or its JavaScript execution context
                isn't available anymore.
            </exception>
        </member>
        <member name="M:DotNetBrowser.JSFunction.InvokeAndReturnValue(DotNetBrowser.JSObject,System.Object[])">
            <summary>
                Executes JavaScript function and returns result of execution as JSValue. This method blocks current
                thread execution until JavaScript function finishes its execution. If JavaScript function raises an exception,
                then JSFunctionException with error message that describes the reason of exception will be thrown. Same
                error message will be printed in JavaScript Console, so you can get using ConsoleListener.
            </summary>
            <param name="instance">
                represents JSObject instance which is owner of the current function. If function
                represents a global JavaScript function, then you should use null. The instance
                must belong to the same JavaScript execution context as the current function.
            </param>
            <param name="args">input arguments.</param>
            <returns>result of JavaScript function execution. Never returns null.</returns>
            <exception cref="T:DotNetBrowser.JSFunctionException">when exception occurs during function execution.</exception>
            <exception cref="T:System.ArgumentException">
                when instance is a valid JavaScript object, but it belongs to
                a different JavaScript execution context. The instance must be
                running in the same execution context as the current function.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                when instance is already disposed or its JavaScript
                execution context isn't available anymore.
            </exception>
        </member>
        <member name="M:DotNetBrowser.JSFunction.IsFunction">
            <summary>
                Indicates whether JavaScript value is a function. If this method returns true, then
                the value can be casted to JSFunction type. For example:
                <code>
            if (value.IsFunction()) {
                JSFunction function = value.AsFunction();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is an function.</returns>
        </member>
        <member name="M:DotNetBrowser.JSFunction.AsFunction">
            <summary>
                Casts the current JavaScript object to JSFunction type.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSFunctionCallback">
            <summary>
                Represents a c# function that can be invoked from JavaScript side.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSFunctionCallback.Invoke(System.Object[])">
            <summary>
                This method is invoked when an appropriate JavaScript function is invoked
                on JavaScript side.
            </summary>
            <param name="args">the function arguments converted to Java types.</param>
            <returns>the result of function execution. This result will be passed on JavaScript side.</returns>
        </member>
        <member name="T:DotNetBrowser.JSFunctionException">
            <summary>
                Thrown when exception occurs during JSFunction execution.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSFunctionException.#ctor(System.String)">
            <summary>
                Constructs a new JSFunctionException instance.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:DotNetBrowser.JSNull">
            <summary>
                Represents JavaScript null value.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSNull.IsNull">
            <summary>
                Indicates whether JavaScript value is NULL.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSNumber">
            <summary>
                Represents JavaScript primitive number value.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSNumber.IsNumber">
            <summary>
                Indicates whether JavaScript value is a number value which equals to double type.
                If this method returns true, then the value can be casted to
                JSNumber type. For example:
                <code>
            if (value.IsNumber()) {
                JSNumber number = value.AsNumber();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a number value.</returns>
        </member>
        <member name="M:DotNetBrowser.JSNumber.AsNumber">
            <summary>
                Casts the current JavaScript object to JSNumber type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSNumber.GetNumber">
            <summary>
                Returns number value of the current JSNumber instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSNumber.Value">
            <summary>
                Gets the value of the current JSNumber instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSNumberObject">
            <summary>
                Represents JavaScript Number object.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSNumberObject.IsNumberObject">
            <summary>
                Indicates whether JavaScript value is a Number object. If this method returns true, then
                the value can be casted to JSNumberObject type. For example:
                <code>
            if (value.IsNumberObject()) {
                JSNumberObject numberObject = value.AsNumberObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a Number object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSNumberObject.AsNumberObject">
            <summary>
                Casts the current JavaScript object to JSNumberObject type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSNumberObject.GetNumber">
            <summary>
                Returns number value of the current JSNumberObject instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSNumberObject.ValueOf">
            <summary>
                Gets the primitive value of the Number object.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSONString">
            <summary>
                Represents a string in JSON format. When this value is passed to JavaScript side,
                it will be automatically parsed and converted to appropriate JavaScript object.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSONString.#ctor(System.String)">
            <summary>
                Constructs a new JSONValue instance with the given value
                that represents a string in JSON format.
            </summary>
            <param name="value">a string in JSON format. Cannot be empty string or null.</param>
            <exception cref="T:System.ArgumentException">when value is empty or null.</exception>
        </member>
        <member name="P:DotNetBrowser.JSONString.Value">
            <summary>
                Gets a string in JSON format.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSString">
            <summary>
                Represents JavaScript primitive string value.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSString.IsString">
            <summary>
                Indicates whether JavaScript value is a string. If this method returns true,
                then the value can be casted to JSString type. For example:
                <code>
            if (value.IsString()) {
                JSString string = value.AsString();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a string.</returns>
        </member>
        <member name="M:DotNetBrowser.JSString.AsString">
            <summary>
                Casts the current JavaScript object to JSString type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSString.GetString">
            <summary>
                Returns string value of the current JSString instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSString.Value">
            <summary>
                Gets the value of the current JSString instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSStringObject">
            <summary>
                Represents JavaScript String object.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSStringObject.IsStringObject">
            <summary>
                Indicates whether JavaScript value is a String object. If this method returns true, then
                the value can be casted to JSStringObject type. For example:
                <code>
            if (value.isStringObject()) {
                JSStringObject stringObject = value.asStringObject();
            }
            </code>
            </summary>
            <returns>true when JavaScript value is a String object.</returns>
        </member>
        <member name="M:DotNetBrowser.JSStringObject.AsStringObject">
            <summary>
                Casts the current JavaScript object to JSStringObject type.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSStringObject.GetString">
            <summary>
                Returns string value of the current JSStringObject instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.JSStringObject.ValueOf">
            <summary>
                Gets the primitive value of the String object.
            </summary>
        </member>
        <member name="T:DotNetBrowser.JSUndefined">
            <summary>
                JavaScript undefined value.
            </summary>
        </member>
        <member name="M:DotNetBrowser.JSUndefined.IsUndefined">
            <summary>
                Indicates whether JavaScript value is undefined.
            </summary>
            <returns>true when JavaScript value is undefined.</returns>
        </member>
        <member name="T:DotNetBrowser.NativeCrashHandler">
            <summary>
                Allows handling chromium native process crash.
            </summary>
        </member>
        <member name="M:DotNetBrowser.NativeCrashHandler.OnChromiumProcessExitNotOk(System.Int64)">
            <summary>
                This method is invoked when chromium process exit not ok.
            </summary>
            <param name="errorCode">the error code.</param>
        </member>
        <member name="T:DotNetBrowser.SaveAction">
            <summary>
                The action
            </summary>
        </member>
        <member name="F:DotNetBrowser.SaveAction.None">
            <summary>
            </summary>
        </member>
        <member name="F:DotNetBrowser.SaveAction.Save">
            <summary>
            </summary>
        </member>
        <member name="F:DotNetBrowser.SaveAction.Update">
            <summary>
            </summary>
        </member>
        <member name="F:DotNetBrowser.SaveAction.Blacklist">
            <summary>
            </summary>
        </member>
        <member name="T:DotNetBrowser.PasswordEventArgs">
            <summary>
                PasswordSubmitted event parameters.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PasswordEventArgs.Url">
            <summary>
                Base URL.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PasswordEventArgs.Login">
            <summary>
                User login.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PasswordEventArgs.Action">
            <summary>
                The action that should be applied to this password.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PasswordSubmittedHandler">
            <summary>
                PasswordSubmitted event delegate.
            </summary>
            <param name="sender">event source. </param>
            <param name="e"> event arguments. </param>
        </member>
        <member name="T:DotNetBrowser.PasswordManagerClient">
            <summary>
                The client Chromium Password Manager functionality.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PasswordManagerClient.ClearPasswordStorage">
            <summary>
                Clears all passwords previously saved in the storage.
            </summary>
        </member>
        <member name="E:DotNetBrowser.PasswordManagerClient.PasswordSubmitted">
            <summary>
                This event is fired when the password is submitted and can be saved in the storage.
            </summary>
        </member>
        <member name="E:DotNetBrowser.PasswordManagerClient.UpdatePasswordSubmitted">
            <summary>
                This event is fired when the new password for an existing credential is submitted and can be updated in the
                storage.
            </summary>
        </member>
        <member name="T:DotNetBrowser.MediaStreamDevice">
            <summary>
                Represents a media stream device.
            </summary>
        </member>
        <member name="P:DotNetBrowser.MediaStreamDevice.Id">
            <summary>
                Gets the device's unique ID.
            </summary>
        </member>
        <member name="P:DotNetBrowser.MediaStreamDevice.Type">
            <summary>
                Gets the device's type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.MediaStreamDevice.Name">
            <summary>
                Gets the device's "friendly" name or empty string when there's no device name.
                Not guaranteed to be unique.
            </summary>
        </member>
        <member name="T:DotNetBrowser.MediaStreamDeviceManager">
            <summary>
                The system for managing media stream devices.
            </summary>
        </member>
        <member name="M:DotNetBrowser.MediaStreamDeviceManager.GetMediaStreamDevices(DotNetBrowser.MediaStreamType)">
            <summary>
                Returns a list of available media stream devices of the given {@code mediaStreamType} or
                empty collection when there were no devices found.
            </summary>
            <param name="mediaStreamType">type of the media stream devices.</param>
            <returns>
                list of available media stream devices or empty collection when there were no devices found for the given
                mediaStreamType.
            </returns>
        </member>
        <member name="P:DotNetBrowser.MediaStreamDeviceManager.Provider">
            <summary>
                Gets or sets media stream device provider or null if there's no provider registered.
                This media stream device provider that will be used for providing Chromium with
                default media stream device of the requested type (audio/video).
            </summary>
        </member>
        <member name="T:DotNetBrowser.MediaStreamDeviceProvider">
            <summary>
                Provides default media stream device that Chromium should use
                for capturing audio/video input on loaded web page.
            </summary>
        </member>
        <member name="M:DotNetBrowser.MediaStreamDeviceProvider.OnRequestDefaultDevice(DotNetBrowser.MediaStreamDeviceRequest)">
            <summary>
                Is invoked when Chromium asks for a default media stream device of the given media stream type
                (audio/video). If this method throws an exception, default behavior is used: the first device
                from the list of available devices is used as default.
            </summary>
            <param name="request">
                contains information about the requested media stream type, list of available media
                stream devices, and methods for setting/getting default device.
            </param>
        </member>
        <member name="T:DotNetBrowser.MediaStreamDeviceRequest">
            <summary>
                Represents a request for media streams (audio/video).
            </summary>
        </member>
        <member name="M:DotNetBrowser.MediaStreamDeviceRequest.GetDefaultMediaStreamDevice">
            <summary>
                Returns default media stream device of the requested type or null when there's
                no media stream devices available.
            </summary>
            <returns>
                default media stream device of the requested type or null when there's
                no media stream devices available.
            </returns>
        </member>
        <member name="M:DotNetBrowser.MediaStreamDeviceRequest.SetDefaultMediaStreamDevice(DotNetBrowser.MediaStreamDevice)">
            <summary>
                Updates default media stream device of the requested type. The device value must be
                the one from the list of available media stream devices you can obtain via
                the GetMediaStreamDevices() method.
            </summary>
            <param name="device">
                default media stream device. Cannot be null. It must be the one from
                the list of available media stream devices you can obtain via the
                GetMediaStreamDevices() method.
            </param>
            <exception cref="T:System.ArgumentException">
                when device is null, or its media type doesn't
                match the requested media type that can be obtained via the
                GetMediaStreamType() method, or the device isn't in the
                list of available devices.
            </exception>
        </member>
        <member name="P:DotNetBrowser.MediaStreamDeviceRequest.Type">
            <summary>
                Gets type of the requested media stream.
            </summary>
        </member>
        <member name="P:DotNetBrowser.MediaStreamDeviceRequest.Devices">
            <summary>
                Gets a list of available media stream devices of the requested type or empty collection
                if there's no media streams devices available.
            </summary>
        </member>
        <member name="T:DotNetBrowser.MediaStreamType">
            <summary>
                Represents types of media streams.
            </summary>
        </member>
        <member name="F:DotNetBrowser.MediaStreamType.AUDIO_CAPTURE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MediaStreamType.VIDEO_CAPTURE">
            <summary />
        </member>
        <member name="T:DotNetBrowser.PluginType">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PluginType.NPAPI">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PluginType.PEPPER_IN_PROCESS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PluginType.PEPPER_OUT_OF_PROCESS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PluginType.PEPPER_UNSANDBOXED">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PluginType.BROWSER_PLUGIN">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PluginType.UNDEFINED">
            <summary />
        </member>
        <member name="T:DotNetBrowser.KeyParams">
            <summary>
                Parameters that are used in the Browser.KeyboardKeyDown(parameters) and Browser.KeyboardKeyUp(parameters) methods.
            </summary>
        </member>
        <member name="M:DotNetBrowser.KeyParams.#ctor(DotNetBrowser.VirtualKeyCode,System.Char,DotNetBrowser.VirtualKeyCode[])">
            <summary>
                Constructs a new KeyboardKeyParams instance.
            </summary>
            <param name="virtualKey">Specifies key code</param>
            <param name="keyChar">The Unicode character</param>
            <param name="modifierKeys">The modifiers</param>
        </member>
        <member name="P:DotNetBrowser.KeyParams.VirtualKey">
            <summary>
                Specifies key code. See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
            </summary>
        </member>
        <member name="P:DotNetBrowser.KeyParams.KeyChar">
            <summary>
                The Unicode character
            </summary>
        </member>
        <member name="P:DotNetBrowser.KeyParams.ModifierKeys">
            <summary>
                The modifiers to indicate additional keys that were held down
                (e.g. shift, ctrl, alt, win) defined as part of Keyboard event.
            </summary>
        </member>
        <member name="T:DotNetBrowser.MessageType">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.None">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CreateBrowser">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DisposeBrowser">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ForwardMouse">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ForwardMouseWheel">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ForwardKeyboard">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.Focus">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.LoadURL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.Unfocus">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetBounds">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.Shutdown">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.IsLoading">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetURL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetTitle">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.Stop">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GoBack">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GoForward">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CanGoBack">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CanGoForward">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.Reload">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ReloadIgnoringCache">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.LoadHTML">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DisposePopup">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetZoomLevel">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetZoomLevel">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetZoom">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetHTML">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CloseJavaScriptDialog">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ExecuteJavaScript">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CloseAuthDialog">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetCookies">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ModifyCookies">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.FlushCookies">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetDocument">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetDocumentElement">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetElementById">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ElementGetSet">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetElements">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetNodeData">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.AddRemoveDOMEvents">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetNodeAtPoint">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SaveWebPage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ExecuteCommand">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ClearCache">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.IsCommandEnabled">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SimulateClick">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SelectClientCertificate">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.AllowCertificateErrorMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CanGoToOffset">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GoToOffset">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GoToIndex">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetEntryCount">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetCurrentEntryIndex">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.RemoveEntryAtIndex">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetEntry">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetWebPreferences">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.UpdateWebPreferences">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetNodeValue">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CreateElement">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.InsertChildNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ReplaceChildNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.RemoveChildNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.AppendChildNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CreateTextNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.QuerySelector">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.QuerySelectorAll">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetRemoteDebuggingURL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DragEnded">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetFrameIds">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.IsFrameExists">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.FindText">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.StopFinding">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ContinuePendingReload">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CancelPendingReload">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetNetworkDelegateConfig">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetSelectedText">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.EvaluateXPath">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetXPathRequestResult">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetPlugins">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.Print">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.RequestPrintSettingsReply">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSGet">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSHas">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSRemove">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSSet">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ChangeDownloadState">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSNewObject">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSInvokeFunction">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DOMEventPreventDefault">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DOMEventStopPropagation">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DOMForm">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.Ping">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DOMSelect">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DOMFormControl">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DOMOption">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DOMInput">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetTextContent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetTextContent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.PrintToPDF">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.BeforeDisposeBrowser">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.FrameAttach">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.FrameSetBounds">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.FrameFocus">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.FrameMoved">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DownloadTargetDetermined">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.FilesSelectedInChooser">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetHandleInputEvents">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetDeviceScaleFactor">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.NotifyContextMenu">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetWebStorageLength">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetWebStorageKey">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetWebStorageItem">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetWebStorageItem">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.RemoveWebStorageItem">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ClearWebStorage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ContainsWebStorageKey">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSGetKeys">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ReplaceMisspelledWord">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.EnableSpellchecker">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.IsSpellcheckerEnabled">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetSpellcheckerLanguage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetSpellcheckerLanguage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.AddWordToDictionary">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.HidePopups">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ColorDialogColorSelected">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetMediaStreamDevices">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.NodeEquals">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetNodeSibling">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetAudioMuted">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.IsAudioMuted">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.IsAudioPlaying">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetSelectedHTML">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetFullSpellCheckForced">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.IsFullSpellCheckForced">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ZoomMode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ElementGetBoundingClientRect">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetAuthServerWhiteList">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ClearWebCache">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetRenderProcessInfo">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ClickNotification">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CloseNotification">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.RequestPermissionResponse">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetupProtocolHandler">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.TestSandbox">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CreateDOMEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CreateDOMUIEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CreateDOMMouseEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.CreateDOMKeyEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.JSObjectStringify">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DispatchBeforeUnload">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetNodeParentFrame">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetUserAgent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetUserAgent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetAcceptLanguage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.SetAcceptLanguage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetFrameId">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.NotifyDisplayChanged">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetAppCacheByURL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetAllAppCache">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.ClearAppCache">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetProxyConfig">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.UpdateProxyConfig">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.InitEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.DispatchEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.PerformPasswordManagerAction">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.GetNativeHandle">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnPaint">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnCursorChange">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRenderViewCreated">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRenderViewGone">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnShowPopupWidget">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDidStartProvisionalLoadForFrame">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDidFinishLoad">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDidFailProvisionalLoad">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDidFailLoad">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDocumentAvailableInMainFrame">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDocumentLoadedInFrame">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnTakeFocus">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnTitleChange">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnTooltipChange">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnShouldCreateWebContents">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnAddNewContents">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnShowContextMenu">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnZoomChanged">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnBeforeDownload">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDownloadUpdated">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRunJavaScriptDialog">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRunAuthDialog">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnWindowClose">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRunFileChooser">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHandleDOMEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnConsoleMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHandleLoadMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHelloMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnStatusChangeMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnCacheClearMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnSelectClientCertificateMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnAllowCertificateErrorMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnBeforeUrlRequest">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnBeforeSendHeaders">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHeadersReceived">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnSendHeaders">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnBeforeRedirect">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnResponseStarted">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnCompleted">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDidCommitProvisionalLoadForFrame">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnStartDragging">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnSearchComplete">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnFormRepostWarningShow">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnGetParentForWindowlessPlugin">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRequestPluginState">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnCanGetCookies">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnCanSetCookies">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRequestPrintSettings">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnPrintingDone">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnShouldBeginRequest">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRequestDestroyed">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnBeforeSendProxyHeaders">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDidCreateScriptContext">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnToggleFullscreenMode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnShowFullscreenWidget">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnFocused">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHandleKeyEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHandleMouseEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnKeyEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnInvokeJSCSEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDidRemoveScriptContext">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnShowColorDialog">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnGetDefaultMediaStreamDevice">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnVerifyCert">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHandleGestureEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDataReceived">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnSpellCheckCompleted">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRequestJSProperty">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnNetworkDelegateReady">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnUpdateJSProperty">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRenderResponsive">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRequestPermission">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnNotificationShown">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnNotificationClosed">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnCustomProtocolRequest">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnImeCompositionRangeChanged">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnGetCss">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnBeforeUnloadFired">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnHandleRenderProcessCreation">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnPasswordManagerStateChanged">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnPasswordSubmitted">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnUpdatePasswordSubmitted">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnMouseEventMessage">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnDragDrop">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnGestureEvent">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRenderFrameCreated">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MessageType.OnRenderFrameDeleted">
            <summary />
        </member>
        <member name="T:DotNetBrowser.MouseEventType">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MouseEventType.PRESS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MouseEventType.RELEASE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MouseEventType.MOVE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MouseEventType.ENTER">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MouseEventType.EXIT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MouseEventType.CONTEXT_MENU">
            <summary />
        </member>
        <member name="F:DotNetBrowser.MouseEventType.WHEEL">
            <summary />
        </member>
        <member name="T:DotNetBrowser.MultipartFormData">
            <summary>
                Represents POST data parameters if the Content-Type is multipart/form-data.
            </summary>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.#ctor">
            <summary>
                Constructs a new MultipartFormData instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
                Constructs a new MultipartFormData instance with specified parameters.
            </summary>
            <param name="keyValuePairs">All keys from the key-value pair collection of the POST request.</param>
            <param name="fileList">The file list of the POST request.</param>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.GetFileKeys">
            <summary>
                Returns all file keys from the file list of the POST request.
            </summary>
            <returns>all file keys from the file list of the POST request.</returns>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.GetFiles(System.String)">
            <summary>
                Returns a list of file paths from the file list associated with specified key.
            </summary>
            <param name="key">the key.</param>
            <returns>a list of file paths from the file list associated with specified key.</returns>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.SetFilePair(System.String,System.String[])">
            <summary>
                Sets key-value pair to the file list of the POST request. If such a key already exist, it will be replaced.
            </summary>
            <param name="key">the key.</param>
            <param name="files">the file.</param>
            <returns>the previous file list associated with key, or null if there was no mapping for key.</returns>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.RemoveFilePair(System.String)">
            <summary>
                Removes the file with associated key from the file list of the POST request.
            </summary>
            <param name="key">the key.</param>
            <returns>the previous file list associated with the key, or null if there was no mapping for key.</returns>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.RemoveAllFilePairs">
            <summary>
                Removes all files from the file list of the POST request.
            </summary>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current MultipartFormData.</returns>
        </member>
        <member name="M:DotNetBrowser.MultipartFormData.Equals(System.Object)">
            <summary>
                Determines whether the specified MultipartFormData is equal to the current MultipartFormData.
            </summary>
            <param name="obj">The object to compare with the current MultipartFormData object.</param>
            <returns>
                true if the specified object is equal to the current MultipartFormData object;
                otherwise, false.
            </returns>
        </member>
        <member name="P:DotNetBrowser.MultipartFormData.ContentType">
            <summary>
                Gets content type of POST data.
            </summary>
        </member>
        <member name="T:DotNetBrowser.NetworkDelegate">
            <summary>
                Interface for handling URL requests and responses.
            </summary>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnBeforeURLRequest(DotNetBrowser.BeforeURLRequestParams)">
            <summary>
                Fires when a request is about to occur. This event is sent before any TCP connection is made
                and can be used to redirect requests to another location. This method is invoked synchronously. URL
                request will be blocked while this method is executing. If this method throws an exception, then default
                behavior will be used - the target URL will not be changed.
            </summary>
            <param name="parameters">
                provides information about request URL and HTTP method ("GET", "POST" etc.). To override the
                target URL use the BeforeRedirectParams.SetURL(String)} method.
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnBeforeRedirect(DotNetBrowser.BeforeRedirectParams)">
            <summary>
                Fired when a server-initiated redirect is about to occur. This method is invoked synchronously. URL
                request will be blocked while this method is executing. If this method throws an exception,
                the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about the current URL, new URL, HTTP method ("GET", "POST" etc.)
                and HTTP response code (e.g., 200, 404, and so on).
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnBeforeSendHeaders(DotNetBrowser.BeforeSendHeadersParams)">
            <summary>
                Fires when a request is about to occur and the initial headers have been prepared. It allows adding,
                modifying, and deleting HTTP request headers. This method is invoked synchronously. URL
                request will be blocked while this method is executing. If this method throws an exception,
                the loading process will not be affected.
                <p />
                Note that one URL request can be split into several HTTP requests (for example to fetch individual
                byte ranges from a large file) or can be handled by the network stack without communicating with the
                network. For this reason, the event does not provide the final HTTP headers that are sent to the
                network. For example, all headers that are related to caching are invisible.
                <p />
                The following headers are currently not provided to the onBeforeSendHeaders event.
                <ul>
                    <li>Authorization</li>
                    <li>Cache-Control</li>
                    <li>Connection</li>
                    <li>Content-Length</li>
                    <li>Host</li>
                    <li>If-Modified-Since</li>
                    <li>If-None-Match</li>
                    <li>If-Range</li>
                    <li>Partial-Data</li>
                    <li>Pragma</li>
                    <li>Proxy-Authorization</li>
                    <li>Proxy-Connection</li>
                    <li>Transfer-Encoding</li>
                </ul>
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP request
                headers.
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnSendHeaders(DotNetBrowser.SendHeadersParams)">
            <summary>
                Fires right before the HTTP headers are sent to the network. This event is informational and it does not
                allow modifying HTTP headers. This method is invoked synchronously. URL request will be blocked while this
                method is executing. If this method throws an exception, the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP request headers.
                HTTP headers overriding has no effect.
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnHeadersReceived(DotNetBrowser.HeadersReceivedParams)">
            <summary>
                Fires each time that an HTTP(S) response header is received. Due to redirects and authentication requests
                this can happen multiple times per request. This event is intended to allow adding, modifying, and deleting
                HTTP response headers, such as incoming "Set-Cookie" headers.
                <p />
                This method is invoked synchronously. URL request will be blocked while this method is executing. If this
                method throws an exception, the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP request
                headers.
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnResponseStarted(DotNetBrowser.ResponseStartedParams)">
            <summary>
                Fires when the first byte of the response body is received. For HTTP requests, this means that the status
                line and response headers are available. This event is informational.
                <p />
                This method is invoked synchronously. URL request will be blocked while this method is executing. If this
                method throws an exception, the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP response
                code.
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnDataReceived(DotNetBrowser.DataReceivedParams)">
            <summary>
                This method is invoked each time when a part of the response body is received. When the whole response body is
                received,
                OnCompleted(RequestCompletedParams) method will be fired. This event is informational.
                <p />
                Note that Mime-Type and Charset, provided by DataReceivedParams, are taken from response headers
                and may be overridden by OnHeadersReceived(HeadersReceivedParams) method.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST", etc.), Mime-Type, and
                response data.
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnCompleted(DotNetBrowser.RequestCompletedParams)">
            <summary>
                Fires when a request has been processed successfully or failed. You can get information about HTTP request
                status via the RequestCompletedParams.GetStatus() method. If HTTP request status is
                RequestStatus.FAILED, you can get information about network error using the
                RequestCompletedParams.GetErrorCode() method.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.), request status,
                response code and network error code.
            </param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnDestroyed(DotNetBrowser.RequestParams)">
            <summary>
                Fires when a request is being destroyed.
            </summary>
            <param name="parameters">provides information about request.</param>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnAuthRequired(DotNetBrowser.AuthRequiredParams)">
            <summary>
                This method is invoked when a request receives an authentication challenge and is
                unable to respond using cached credentials. You can use this method to handle
                "basic" or "digest" authentication.
                FYI: to test "basic" or "digest" authentication you can use http://test.webdav.org/
            </summary>
            <param name="parameters">
                the authentication challenge information such as authentication scheme,
                URL etc. Use <see cref="P:DotNetBrowser.AuthRequiredParams.Username"/> and
                <see cref="P:DotNetBrowser.AuthRequiredParams.Password"/> to provide authentication
                credentials.
            </param>
            <returns> true when authentication must be canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnCanSetCookies(System.String,System.Collections.Generic.List{DotNetBrowser.Cookie})">
            <summary>
                This method is invoked when Chromium engine decides whether cookies can be saved for the url
                or not. Return true to allow engine to save the cookies. If you return false, the cookies will not
                be saved and will not be available in CookieStorage.
                <p />
                If this method throws an exception, then default behavior will be applied - the method returns true.
            </summary>
            <param name="url">a string representation of the URL associated with the cookies.</param>
            <param name="cookies">a list of cookies to apply.</param>
            <returns>true to allow saving cookies.</returns>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnCanGetCookies(System.String,System.Collections.Generic.List{DotNetBrowser.Cookie})">
            <summary>
                This method is invoked when Chromium engine decides whether cookies can be sent back to the web server.
                Return true to allow cookies to be sent to the web server.
                <p />
                If this method throws an exception, then default behavior will be applied - the method returns true.
            </summary>
            <param name="url">a string representation of the URL associated with the cookies.</param>
            <param name="cookies">a list of cookies to send.</param>
            <returns>true to allow sending cookies.</returns>
        </member>
        <member name="M:DotNetBrowser.NetworkDelegate.OnBeforeSendProxyHeaders(DotNetBrowser.BeforeSendProxyHeadersParams)">
            <summary>
                The similar to OnBeforeSendHeaders(BeforeSendHeadersParams)  method. Fires when proxy connection is used,
                after OnBeforeSendHeaders method is invoked. Provides information about proxy
                connection, and also allows adding, modifying, and deleting HTTP request headers.
            </summary>
            <param name="parameters">provides information about request.</param>
        </member>
        <member name="T:DotNetBrowser.NetworkService">
            <summary>
                Provides access to a network level functionality.
            </summary>
        </member>
        <member name="M:DotNetBrowser.NetworkService.Dispose">
            <summary>
                Dispose object and  managed resources.
            </summary>
        </member>
        <member name="M:DotNetBrowser.NetworkService.Dispose(System.Boolean)">
            <summary>
                Dispose object and managed resources.
            </summary>
            <param name="disposing">True if managed resources should be disposed</param>
        </member>
        <member name="M:DotNetBrowser.NetworkService.Finalize">
            <summary>
                Destructor.
            </summary>
        </member>
        <member name="P:DotNetBrowser.NetworkService.ResourceHandler">
            <summary>
                Resource handler that will be invoked every time to ask whether specified resource
                (HTML, image, JavaScript, CSS file, etc.) should be downloaded from a web server or not.
            </summary>
        </member>
        <member name="P:DotNetBrowser.NetworkService.NetworkDelegate">
            <summary>
                Configures the current Browser instance to use new HTTP request/response handler to process
                all HTTP requests/responses. The NetworkDelegate can be used for intercepting
                HTTP request/response headers and modifying them on the fly.
                To reset NetworkDelegate and enable default behavior, pass null to this method.
            </summary>
        </member>
        <member name="P:DotNetBrowser.NetworkService.CertificateVerifier">
            <summary>
                Gets or sets custom SSL certificate verifier or null if no custom SSL certificate
                verifier. By default this property is null, so Chromium default
                verifier is used.
            </summary>
        </member>
        <member name="P:DotNetBrowser.NetworkService.ServerWhiteList">
            <summary>
                The comma/semicolon separated HTTP network delegate authorization white list of URLs.
                By default, network delegate white list is empty.
            </summary>
        </member>
        <member name="P:DotNetBrowser.NetworkService.DelegateWhiteList">
            <summary>
                The comma/semicolon separated server HTTP authorization white list of URLs.
                By default, server white list is empty.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PageMargins">
            <summary>
                Margins in printer device points for a page setup.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PageMargins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs a new <code>PageMargins</code> instance.
            </summary>
            <param name="header">vertical space for the overlay from the top of the sheet. In printer device points.</param>
            <param name="footer">vertical space for the overlay from the bottom of the sheet. In printer device points.</param>
            <param name="top">margin on top side of the sheet in printer device points.</param>
            <param name="left">margin on left side of the sheet in printer device points.</param>
            <param name="right">margin on right side of the sheet in printer device points.</param>
            <param name="bottom">margin on bottom side of the sheet in printer device points.</param>
        </member>
        <member name="M:DotNetBrowser.PageMargins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructs a new <code>PageMargins</code> instance.
            </summary>
            <param name="top">margin on top side of the sheet in printer device points.</param>
            <param name="left">margin on left side of the sheet in printer device points.</param>
            <param name="right">margin on right side of the sheet in printer device points.</param>
            <param name="bottom">margin on bottom side of the sheet in printer device points.</param>
        </member>
        <member name="P:DotNetBrowser.PageMargins.Header">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PageMargins.Footer">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PageMargins.Top">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PageMargins.Left">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PageMargins.Right">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PageMargins.Bottom">
            <summary />
        </member>
        <member name="T:DotNetBrowser.PageRange">
            <summary>
                Page range for printing.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PageRange.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructs a new <code> PageRange</code> instance with given <code>from</code> and <code> to</code> ranges.
                The <code>from</code> and <code> to</code> can be equal when you need to specify a single page.
            </summary>
            <param name="from">number of the first page in range. Page number starts from 0. Cannot be negative.</param>
            <param name="to">number of the last page in range. Cannot be negative or less than <code> from</code>.</param>
        </member>
        <member name="P:DotNetBrowser.PageRange.From">
            <summary>
                Number of the first page in range.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PageRange.To">
            <summary>
                Number of the last page in range.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PaperSize">
            <summary>
                Enum of known paper sizes.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PaperSize.DEFAULT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_INDEX_3X5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_PERSONAL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_MONARCH">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_NUMBER_9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_INDEX_4X6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_NUMBER_10">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_A2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_NUMBER_11">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_NUMBER_12">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_5X7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_INDEX_5X8">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_NUMBER_14">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_INVOICE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_INDEX_4X6_EXT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_6X9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_C5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_7X9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_EXECUTIVE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_GOVT_LETTER">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_GOVT_LEGAL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_QUARTO">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_LETTER">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_FANFOLD_EUR">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_LETTER_PLUS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_FOOLSCAP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_LEGAL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_SUPER_A">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_9X11">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_ARCH_A">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_LETTER_EXTRA">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_LEGAL_EXTRA">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_10X11">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_10X13">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_10X14">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_10X15">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_11X12">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_EDP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_FANFOLD_US">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_11X15">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_LEDGER">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_EUR_EDP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_ARCH_B">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_12X19">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_B_PLUS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_SUPER_B">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_C">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_ARCH_C">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_D">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_ARCH_D">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_ASME_F">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_WIDE_FORMAT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_E">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_ARCH_E">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.NA_F">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ROC_16K">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ROC_8K">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_32K">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_1">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_8">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_16K">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_JUURO_KU_KAI">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_PA_KAI">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_DAI_PA_KAI">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.PRC_10">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A10">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A8">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A5_EXTRA">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4_TAB">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4_EXTRA">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4X3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4X4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4X5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4X6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4X7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4X8">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A4X9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A3_EXTRA">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A3X3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A3X4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A3X5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A3X6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A3X7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A1">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A2X3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A2X4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A2X5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A0">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A1X3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A1X4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_2A0">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_A0X3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B10">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B8">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B6C4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B5_EXTRA">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B1">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_B0">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C10">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C8">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C7C6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C6C5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C1">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_C0">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_DL">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_RA2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_SRA2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_RA1">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_SRA1">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_RA0">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.ISO_SRA0">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B10">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B9">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B8">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B7">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B6">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B1">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_B0">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JIS_EXEC">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_CHOU4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_HAGAKI">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_YOU4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_CHOU2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_CHOU3">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_OUFUKU">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_KAHU">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.JPN_KAKU2">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_SMALL_PHOTO">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_ITALIAN">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_POSTFIX">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_LARGE_PHOTO">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_FOLIO">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_FOLIO_SP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.OM_INVITE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.PaperSize.CUSTOM">
            <summary />
        </member>
        <member name="T:DotNetBrowser.PaperSizes">
            <summary>
                Define extension methods for <see cref="T:DotNetBrowser.PaperSize"/>.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PaperSizes.GetWidth(DotNetBrowser.PaperSize)">
            <summary>
                Returns paper width in microns.
            </summary>
            <returns>paper width in microns.</returns>
        </member>
        <member name="M:DotNetBrowser.PaperSizes.GetHeight(DotNetBrowser.PaperSize)">
            <summary>
                Returns paper height in microns.
            </summary>
            <returns>paper height in microns.</returns>
        </member>
        <member name="T:DotNetBrowser.CustomPaperSize">
            <summary>
            Custom paper size for printing.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CustomPaperSize.#ctor(System.Single,System.Single,DotNetBrowser.PaperSizeUnits)">
            <summary>
            Creates a new CustomPaperSize instance with given parameters.
            </summary>
            <param name="width">Custom paper width.</param>
            <param name="height">Custom paper height.</param>
            <param name="unitUm">The size units.</param>
        </member>
        <member name="P:DotNetBrowser.CustomPaperSize.Width">
            <summary>
            Paper width.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CustomPaperSize.Height">
            <summary>
            Paper height.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PaperSizeUnits">
            <summary>
            Paper size units.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PaperSizeUnits.Inches">
            <summary/>
        </member>
        <member name="F:DotNetBrowser.PaperSizeUnits.Millimeters">
            <summary/>
        </member>
        <member name="T:DotNetBrowser.DefaultPopupContainer">
            <summary>
                Default implementation of PopupContainer.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PopupContainer">
            <summary>
                Each container that can be used for newly created browser must implement this interface.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PopupContainer.InsertBrowser(DotNetBrowser.Browser,System.Drawing.Rectangle)">
            <summary>
                Notification is called when newly created browser instance should be
                inserted into the parent container and displayed. The initialBounds
                parameter contains popup window bounds on the screen.
            </summary>
            <remarks>
                When popup window is opened via the window.open('url','target','left=0, top=0, width=100, height=100')
                JavaScript function, the initialBounds will contain the
                Rectangle(0, 0, 100, 100) value.
            </remarks>
            <param name="browser">the newly created browser.</param>
            <param name="initialBounds">initial bounds of popup window.</param>
        </member>
        <member name="M:DotNetBrowser.DefaultPopupContainer.InsertBrowser(DotNetBrowser.Browser,System.Drawing.Rectangle)">
            <summary>
                Creates a UI popup window with embedded Browser instance.
            </summary>
            <param name="browser">the newly created browser.</param>
            <param name="initialBounds">initial bounds of popup window.</param>
        </member>
        <member name="M:DotNetBrowser.DefaultPopupContainer.InsertBrowser(System.Func{DotNetBrowser.Browser},System.Drawing.Rectangle)">
            <summary>
                Creates a UI popup window with embedded Browser instance.
            </summary>
            <param name="getBrowser">method which return the new browser instance</param>
            <param name="initialBounds">initial bounds of popup window.</param>
        </member>
        <member name="T:DotNetBrowser.PrintJob">
            <summary>
                Indicates a print job.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PrintJob.#ctor(DotNetBrowser.PrintSettings)">
            <summary>
                Construct PrintJob with settings.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PrintJob.PrintSettings">
            <summary>
                Provides access to the current print job settings. Can be used for accessing default
                print settings and providing custom settings by modifying return value.
            </summary>
        </member>
        <member name="E:DotNetBrowser.PrintJob.PrintJobEvent">
            <summary>
                An event that indicates that the printing job status was changed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PrintSettings">
            <summary>
                Provides access to different printing settings.
            </summary>
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PrinterName">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.Copies">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.Landscape">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PrintBackgrounds">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PrintSelectionOnly">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.DisplayHeaderFooter">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PageMargins">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.ColorModel">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.DuplexMode">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PaperSize">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.CustomPaperSize">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PageRanges">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PrintToPDF">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.PDFFilePath">
            <summary />
        </member>
        <member name="P:DotNetBrowser.PrintSettings.DocumentType">
            <summary />
        </member>
        <member name="T:DotNetBrowser.PrintStatus">
            <summary>
                The print status indicates whether printing must be canceled or not.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PrintStatus.CONTINUE">
            <summary>
                The printing must continue.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PrintStatus.CANCEL">
            <summary>
                The printing must be canceled.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Alias">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Cell">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.ColumnResize">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.EastPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Grab">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Grabbing">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Help">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Invalid32x32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.MiddlePanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.NativeCrashErrorDumpInfo">
            <summary>
              Looks up a localized string similar to The dump file was generated automatically and stored in {0}..
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.NativeCrashErrorText">
            <summary>
              Looks up a localized string similar to Chromium Native Process has been stopped working. Exit code {0}..
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.NativeCrashErrorTitle">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.None">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.NorthEastPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.NorthPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.NorthWestPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.Progress">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.RowResize">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.SouthEastPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.SouthPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.SouthWestPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.VerticalText">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.WestPanning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.ZoomIn">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Properties.Resources.ZoomOut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ProxyType">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ProxyType.DIRECT">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ProxyType.HTTP">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ProxyType.SOCKS4">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ProxyType.SOCKS5">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ProxyType.HTTPS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.ProxyType.QUIC">
            <summary />
        </member>
        <member name="T:DotNetBrowser.RawData">
            <summary>
                Contains POST parameters which cannot be represented as FormData or MultipartFormData.
            </summary>
        </member>
        <member name="M:DotNetBrowser.RawData.#ctor(System.String)">
            <summary>
                Constructs a new RawData instance with specified parameters.
            </summary>
            <param name="rawData">a string that contains unparsed POST data.</param>
        </member>
        <member name="P:DotNetBrowser.RawData.Data">
            <summary>
                Gets or sets a string that contains unparsed POST data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.RawData.ContentType">
            <summary>
                Gets content type.
            </summary>
        </member>
        <member name="T:DotNetBrowser.RequestCompletedParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.OnCompleted(RequestCompletedParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.RequestCompletedParams.#ctor(System.Int64,System.String,System.String,System.Int32,DotNetBrowser.RequestStatus,System.Nullable{DotNetBrowser.Events.NetError})">
            <summary>
                Constructs a new RequestCompletedParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="responseCode">The response code of the current URL request.</param>
            <param name="status">Status of the current URL request. </param>
            <param name="errorCode">Error code of the current URL request.</param>
        </member>
        <member name="P:DotNetBrowser.RequestCompletedParams.ResponseCode">
            <summary>
                Gets the response code of the current URL request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.RequestCompletedParams.Status">
            <summary>
                Gets status of the current URL request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.RequestCompletedParams.ErrorCode">
            <summary>
                Gets error code of the current URL request.
            </summary>
        </member>
        <member name="T:DotNetBrowser.RequestStatus">
            <summary>
                Possible statuses of a HTTP request.
            </summary>
        </member>
        <member name="F:DotNetBrowser.RequestStatus.SUCCESS">
            <summary />
        </member>
        <member name="F:DotNetBrowser.RequestStatus.IO_PENDING">
            <summary />
        </member>
        <member name="F:DotNetBrowser.RequestStatus.CANCELED">
            <summary />
        </member>
        <member name="F:DotNetBrowser.RequestStatus.FAILED">
            <summary />
        </member>
        <member name="T:DotNetBrowser.ResponseStartedParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.OnResponseStarted(ResponseStartedParams)  method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ResponseStartedParams.#ctor(System.Int64,System.String,System.String,System.Int32)">
            <summary>
                Constructs a new ResponseStartedParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="responseCode">the response code of the current URL request.</param>
        </member>
        <member name="P:DotNetBrowser.ResponseStartedParams.ResponseCode">
            <summary>
                Gets the response code of the current URL request.
            </summary>
        </member>
        <member name="T:DotNetBrowser.SearchParams">
            <summary>
                Represents search request parameters, that are used for searching text on a web page.
            </summary>
        </member>
        <member name="M:DotNetBrowser.SearchParams.#ctor(System.String)">
            <summary>
                Constructs a new <code>SearchParams</code> instance. The default search parameters are set as shown below:
                <ul>
                    <li>forward =<code> true</code></li>
                    <li>matchCase =<code> false</code></li>
                    <li>findNext =<code> false</code></li>
                </ul>
            </summary>
            <param name="searchText">text to search</param>
        </member>
        <member name="M:DotNetBrowser.SearchParams.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                Constructs a new <code>SearchParams</code> instance.
            </summary>
            <param name="searchText">the text to search</param>
            <param name="matchCase">true if search is case-sensitive</param>
            <param name="forward">true to search forward, false to search backward</param>
            <exception cref="T:System.ArgumentException"> when <code>searchText</code> is <code>null</code>.</exception>
        </member>
        <member name="P:DotNetBrowser.SearchParams.SearchText">
            <summary>
                Text to search.
            </summary>
        </member>
        <member name="P:DotNetBrowser.SearchParams.Forward">
            <summary>
                Direction to search.
            </summary>
        </member>
        <member name="P:DotNetBrowser.SearchParams.MatchCase">
            <summary>
                True if search is case-sensitive.
            </summary>
        </member>
        <member name="T:DotNetBrowser.SearchResult">
            <summary>Provides information about the number of matches of a specified text on a web page.</summary>
        </member>
        <member name="M:DotNetBrowser.SearchResult.#ctor(System.Int32,System.Int32)">
            <summary>
                Constructs a new SearchResult instance.
            </summary>
            <param name="currentMatch">index of the currently selected match or 0 when there's no matches.</param>
            <param name="numberOfMatches">number of the matches or 0 when no matches found.</param>
        </member>
        <member name="P:DotNetBrowser.SearchResult.NumberOfMatches">
            <summary>
                Returns index of the currently selected match or 0 when there's no matches.
            </summary>
        </member>
        <member name="P:DotNetBrowser.SearchResult.CurrentMatch">
            <summary>
                Returns number of the matches or 0 when no matches found.
            </summary>
        </member>
        <member name="T:DotNetBrowser.SendHeadersParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.OnSendHeaders(SendHeadersParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.SendHeadersParams.#ctor(System.Int64,System.String,System.String,DotNetBrowser.HttpHeaders,DotNetBrowser.HttpHeadersEx)">
            <summary>
                Constructs a new SendHeadersParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="headers">HTTP headers for the current request.</param>
            ///
            <param name="headersEx">HTTP headers for the current request.</param>
        </member>
        <member name="P:DotNetBrowser.SendHeadersParams.Headers">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.SendHeadersParams.HeadersEx">
            <summary>
                Gets HTTP headers for the current request.
            </summary>
        </member>
        <member name="T:DotNetBrowser.SpellCheckerService">
            <summary>
                Provides access to spellchecker service.
            </summary>
        </member>
        <member name="P:DotNetBrowser.SpellCheckerService.Enabled">
            <summary>
                Enables or disables spellchecker service. true when spellchecker service is enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.SpellCheckerService.FullSpellCheckForced">
            <summary>
                Gets or sets force spell check flag that indicates whether Chromium should spell check
                the whole text in the currently focusable text input element on the loaded web page, or check
                only modified paragraph. By default this flag is set to false, so Chromium checks
                only modified paragraph.
            </summary>
        </member>
        <member name="P:DotNetBrowser.SpellCheckerService.Language">
            <summary>
                Gets or sets spellchecker language used for checking spelling. For example, "en-US". Chromium checks spelling
                according to the current spellchecker language. Dictionary for the currently selected language is downloaded
                programmatically by Chromium engine. The dictionaries are stored in Chromium user's date directory.
                <p/>
                By default spellchecker language is set to "en-US".
            </summary>
            <exception cref="T:System.ArgumentException">when set value is null or empty.</exception>
        </member>
        <member name="E:DotNetBrowser.SpellCheckerService.SpellCheckCompleted">
            <summary>
                An event that indicates that the spell check process is completed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.StopFindAction">
            <summary>Provides actions for <see cref="M:DotNetBrowser.Browser.StopFindingText(DotNetBrowser.StopFindAction)"/> method.</summary>
        </member>
        <member name="F:DotNetBrowser.StopFindAction.CLEAR_SELECTION">
            <summary />
        </member>
        <member name="F:DotNetBrowser.StopFindAction.KEEP_SELECTION">
            <summary />
        </member>
        <member name="T:DotNetBrowser.URLProxyConfig">
            <summary>
                With this proxy configuration the connection uses proxy settings
                received from proxy auto-config (PAC) file which is located at
                the specific address.
                <p />
                In case PAC script fails, a direct connection will be used.
            </summary>
        </member>
        <member name="M:DotNetBrowser.URLProxyConfig.#ctor(System.String)">
            <summary>
                Constructs a new URLProxyConfig instance initiated with
                the proxyAutoConfigFileURL URL address where PAC file with
                proxy settings is located. The address of the PAC file must be a
                valid URL address. The address cannot contain a path to the PAC
                file on local file system.
            </summary>
            <param name="proxyAutoConfigFileURL">URL address of the PAC file with proxy settings.</param>
            <exception cref="T:System.ArgumentException">when proxyAutoConfigFileURL is null.</exception>
        </member>
        <member name="P:DotNetBrowser.URLProxyConfig.ProxyAutoConfigFileURL">
            <summary>
                Gets URL address of the PAC file with proxy settings.
            </summary>
        </member>
        <member name="T:DotNetBrowser.VirtualKeyCode">
            <summary>
                The list of VirtualKeyCodes (see: https://msdn.microsoft.com/en-us/library/dd375731(VS.85).aspx)
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LBUTTON">
            <summary>
                Left mouse button
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.RBUTTON">
            <summary>
                Right mouse button
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.CANCEL">
            <summary>
                Control-break processing
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MBUTTON">
            <summary>
                Middle mouse button (three-button mouse) - NOT contiguous with LBUTTON and
                RBUTTON
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.XBUTTON1">
            <summary>
                Windows 2000/XP: X1 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.XBUTTON2">
            <summary>
                Windows 2000/XP: X2 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BACK">
            <summary>
                BACKSPACE key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.TAB">
            <summary>
                TAB key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.CLEAR">
            <summary>
                CLEAR key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.RETURN">
            <summary>
                ENTER key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SHIFT">
            <summary>
                SHIFT key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.CONTROL">
            <summary>
                CTRL key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MENU">
            <summary>
                ALT key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.PAUSE">
            <summary>
                PAUSE key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.CAPITAL">
            <summary>
                CAPS LOCK key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.KANA">
            <summary>
                Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.HANGEUL">
            <summary>
                IME Hanguel mode (maintained for compatibility; use HANGUL)
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.HANGUL">
            <summary>
                IME Hangul mode
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.JUNJA">
            <summary>
                IME Junja mode
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.FINAL">
            <summary>
                IME final mode
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.KANJI">
            <summary>
                IME Kanji mode
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.HANJA">
            <summary>
                IME Hanja mode
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.ESCAPE">
            <summary>
                ESC key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.CONVERT">
            <summary>
                IME convert
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NONCONVERT">
            <summary>
                IME nonconvert
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.ACCEPT">
            <summary>
                IME accept
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MODECHANGE">
            <summary>
                IME mode change request
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SPACE">
            <summary>
                SPACEBAR
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.PRIOR">
            <summary>
                PAGE UP key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NEXT">
            <summary>
                PAGE DOWN key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.END">
            <summary>
                END key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.HOME">
            <summary>
                HOME key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LEFT">
            <summary>
                LEFT ARROW key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.UP">
            <summary>
                UP ARROW key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.RIGHT">
            <summary>
                RIGHT ARROW key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.DOWN">
            <summary>
                DOWN ARROW key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SELECT">
            <summary>
                SELECT key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.PRINT">
            <summary>
                PRINT key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.EXECUTE">
            <summary>
                EXECUTE key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SNAPSHOT">
            <summary>
                PRINT SCREEN key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.INSERT">
            <summary>
                INS key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.DELETE">
            <summary>
                DEL key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.HELP">
            <summary>
                HELP key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_0">
            <summary>
                0 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_1">
            <summary>
                1 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_2">
            <summary>
                2 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_3">
            <summary>
                3 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_4">
            <summary>
                4 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_5">
            <summary>
                5 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_6">
            <summary>
                6 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_7">
            <summary>
                7 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_8">
            <summary>
                8 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_9">
            <summary>
                9 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_A">
            <summary>
                A key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_B">
            <summary>
                B key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_C">
            <summary>
                C key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_D">
            <summary>
                D key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_E">
            <summary>
                E key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_F">
            <summary>
                F key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_G">
            <summary>
                G key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_H">
            <summary>
                H key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_I">
            <summary>
                I key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_J">
            <summary>
                J key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_K">
            <summary>
                K key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_L">
            <summary>
                L key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_M">
            <summary>
                M key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_N">
            <summary>
                N key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_O">
            <summary>
                O key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_P">
            <summary>
                P key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_Q">
            <summary>
                Q key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_R">
            <summary>
                R key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_S">
            <summary>
                S key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_T">
            <summary>
                T key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_U">
            <summary>
                U key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_V">
            <summary>
                V key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_W">
            <summary>
                W key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_X">
            <summary>
                X key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_Y">
            <summary>
                Y key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VK_Z">
            <summary>
                Z key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LWIN">
            <summary>
                Left Windows key (Microsoft Natural keyboard)
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.RWIN">
            <summary>
                Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.APPS">
            <summary>
                Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SLEEP">
            <summary>
                Computer Sleep key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD0">
            <summary>
                Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD1">
            <summary>
                Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD2">
            <summary>
                Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD3">
            <summary>
                Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD4">
            <summary>
                Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD5">
            <summary>
                Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD6">
            <summary>
                Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD7">
            <summary>
                Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD8">
            <summary>
                Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMPAD9">
            <summary>
                Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MULTIPLY">
            <summary>
                Multiply key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.ADD">
            <summary>
                Add key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SEPARATOR">
            <summary>
                Separator key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SUBTRACT">
            <summary>
                Subtract key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.DECIMAL">
            <summary>
                Decimal key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.DIVIDE">
            <summary>
                Divide key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F1">
            <summary>
                F1 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F2">
            <summary>
                F2 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F3">
            <summary>
                F3 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F4">
            <summary>
                F4 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F5">
            <summary>
                F5 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F6">
            <summary>
                F6 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F7">
            <summary>
                F7 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F8">
            <summary>
                F8 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F9">
            <summary>
                F9 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F10">
            <summary>
                F10 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F11">
            <summary>
                F11 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F12">
            <summary>
                F12 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F13">
            <summary>
                F13 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F14">
            <summary>
                F14 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F15">
            <summary>
                F15 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F16">
            <summary>
                F16 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F17">
            <summary>
                F17 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F18">
            <summary>
                F18 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F19">
            <summary>
                F19 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F20">
            <summary>
                F20 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F21">
            <summary>
                F21 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F22">
            <summary>
                F22 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F23">
            <summary>
                F23 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.F24">
            <summary>
                F24 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NUMLOCK">
            <summary>
                NUM LOCK key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.SCROLL">
            <summary>
                SCROLL LOCK key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LSHIFT">
            <summary>
                Left SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.RSHIFT">
            <summary>
                Right SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LCONTROL">
            <summary>
                Left CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.RCONTROL">
            <summary>
                Right CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LMENU">
            <summary>
                Left MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.RMENU">
            <summary>
                Right MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BROWSER_BACK">
            <summary>
                Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BROWSER_FORWARD">
            <summary>
                Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BROWSER_REFRESH">
            <summary>
                Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BROWSER_STOP">
            <summary>
                Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BROWSER_SEARCH">
            <summary>
                Windows 2000/XP: Browser Search key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BROWSER_FAVORITES">
            <summary>
                Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.BROWSER_HOME">
            <summary>
                Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VOLUME_MUTE">
            <summary>
                Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VOLUME_DOWN">
            <summary>
                Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.VOLUME_UP">
            <summary>
                Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MEDIA_NEXT_TRACK">
            <summary>
                Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MEDIA_PREV_TRACK">
            <summary>
                Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MEDIA_STOP">
            <summary>
                Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.MEDIA_PLAY_PAUSE">
            <summary>
                Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LAUNCH_MAIL">
            <summary>
                Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LAUNCH_MEDIA_SELECT">
            <summary>
                Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LAUNCH_APP1">
            <summary>
                Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.LAUNCH_APP2">
            <summary>
                Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_1">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP:
                For the US standard keyboard, the ';:' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_PLUS">
            <summary>
                Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_COMMA">
            <summary>
                Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_MINUS">
            <summary>
                Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_PERIOD">
            <summary>
                Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_2">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP:
                For the US standard keyboard, the '/?' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_3">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP:
                For the US standard keyboard, the '`~' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_4">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP:
                For the US standard keyboard, the '[{' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_5">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP:
                For the US standard keyboard, the '\|' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_6">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP:
                For the US standard keyboard, the ']}' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_7">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP:
                For the US standard keyboard, the 'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_8">
            <summary>
                Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_102">
            <summary>
                Windows 2000/XP: Either the angle bracket key or the backslash key on the
                RT 102-key keyboard
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.PROCESSKEY">
            <summary>
                Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.PACKET">
            <summary>
                Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes.
                The PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard
                input methods. For more information, see Remark in KEYBDINPUT, SendInput,
                WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.ATTN">
            <summary>
                Attn key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.CRSEL">
            <summary>
                CrSel key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.EXSEL">
            <summary>
                ExSel key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.EREOF">
            <summary>
                Erase EOF key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.PLAY">
            <summary>
                Play key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.ZOOM">
            <summary>
                Zoom key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.NONAME">
            <summary>
                Reserved
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.PA1">
            <summary>
                PA1 key
            </summary>
        </member>
        <member name="F:DotNetBrowser.VirtualKeyCode.OEM_CLEAR">
            <summary>
                Clear key
            </summary>
        </member>
        <member name="T:DotNetBrowser.UIComponent">
            <summary>
                Each UI component for embedding web content in your application and display web pages must implement this
                interface.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.Internals.WinFormsHeavyBrowserView.IsDisposed">
            <summary>
                Gets true when the current view instance is disposed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.Internals.WinFormsHeavyBrowserView.InputSimulator">
            <summary>
                Returns input simulation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.Internals.WinFormsHeavyBrowserView.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsBrowserView">
            <summary>
                WinForms implementation of the BrowserView interface.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.#ctor">
            <summary>
                Constructs a new WinFormsBrowserView component based on a new browser instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new WinFormsBrowserView component based on passed browser instance.
            </summary>
            <param name="browser">The Browser instance associated with the current view.</param>
            <exception cref="T:System.ArgumentNullException">when browser is null.</exception>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.GetComponent">
            <summary>
                Returns UIComponent instance that can be embedded into application GUI.
            </summary>
            <returns>UIComponent instance.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.GetImage">
            <summary>
                Returns image representation of the currently loaded and displayed web page.
            </summary>
            <returns>The drawing.Image instance or null if web page is not loaded or not displayed.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.UpdateSize(System.Int32,System.Int32)">
            <summary>
                Updates size of the this view.
            </summary>
            <param name="width">New width in pixels.</param>
            <param name="height">New height in pixels.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.SetKeyFilter(DotNetBrowser.KeyFilter)">
            <summary>
                Configures KeyFilter for this view.
            </summary>
            <param name="keyFilter">The KeyFilter instance.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.GetDeviceScaleFactor">
            <summary>
                Returns device scale factor that is used to render this view.
            </summary>
            <returns>The device scale factor.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.Dispose">
            <summary>
                Disposes current view.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.GetInnerView">
            <summary>
                Gets view instance that can be embedded into application GUI.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.Dispose(System.Boolean)">
            <summary>
                Disposes current view.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsBrowserView.Finalize">
            <summary>
                Destructor
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.KeyPress">
            <summary>
                Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.KeyDown">
            <summary>
                Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.KeyUp">
            <summary>
                Occurs when a key is released while the control has focus.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.MouseWheel">
            <summary>
                Occurs when a mouse wheel is rotated while the control has focus.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.IsDisposed">
            <summary>
                Gets true when the current view instance is disposed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.Focused">
            <summary>
                Sets focus or unfocus to the view.
                Unfocus available only for <see cref="!:BrowserType.HEAVYWEIGHT"/> view.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.Browser">
            <summary>
                Browser instance associated with the current view.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.Load">
            <summary>
                Occurs before the control becomes visible for the first time.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.FinishLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been finished.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.StartLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been started.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.FailLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been failed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.ProvisionalLoadingFrameEvent">
            <summary>
                An event that indicates that provisional load for a specified frame was successfully committed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.DocumentLoadedInFrameEvent">
            <summary>
                An event that indicates that frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.DocumentLoadedInMainFrameEvent">
            <summary>
                An event that indicates that main frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.RenderCreatedEvent">
            <summary>
                An event that indicates that the render process is gone or created.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.RenderGoneEvent">
            <summary>
                An event that indicates that the render process is gone.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.RenderResponsiveEvent">
            <summary>
                An event that indicates that the render process is no longer hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.RenderUnresponsiveEvent">
            <summary>
                An event that indicates that the render process is hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.StatusChangedEvent">
            <summary>
                An event that indicates that the status has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.TitleChangedEvent">
            <summary>
                An event that indicates that the title of a document in main frame has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.ConsoleMessageEvent">
            <summary>
                An event that indicates that the message was added to the console.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.DragEnterEvent">
            <summary>
                An event that indicates that the object is dragged into the browser's bounds.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.DragExitEvent">
            <summary>
                An event that indicates that the object is dragged out of the browser's bounds.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.DropEvent">
            <summary>
                An event that indicates when a drag-and-drop operation is completed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.GestureEvent">
            <summary>
                An event that indicates when the gesture status has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.DisposeEvent">
            <summary>
                An event that indicates that browser instance disposed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.ScriptContextCreated">
            <summary>
                An event that indicates that JavaScript context has been created. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WinForms.WinFormsBrowserView.ScriptContextDestroyed">
            <summary>
                An event that indicates that JavaScript context has been destroyed. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.BrowserType">
            <summary>
                Gets or sets rendering type for browser that will use for constructs a new WPFBrowserView component based on a new
                browser instance.
                Uses for create a new browser instance only.
            </summary>
            <exception cref="T:System.InvalidOperationException">if the value is set when a browser instance has already been created</exception>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.URL">
            <summary>
                Gets or sets the current Url.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.ZoomLevel">
            <summary>
                Gets or sets zoom level for the currently loaded web page. Zoom level is configured
                for each domain separately. For example, if you load the www.a.com web page and
                set zoom level to 2.5, then load the www.b.org web page, the zoom level for
                www.b.org web page will be reset to default value. When you load the
                www.a.com web page again, its zoom level will be restored to 2.5 automatically.
                <para>
                    This property asynchronously.
                </para>
                <para>
                    <list type="">
                        <item>
                            To zoom in use the positive zoom level. For example, 2.0, 1.5.
                        </item>
                        <item>
                            To zoom out use the negative zoom level. For example, -1.0, -2.5.
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.AudioMuted">
            <summary>
                Gets or sets mutes all audio output for this Browser instance.
                True when audio output must be muted, false otherwise.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.AcceptLanguage">
            <summary>
                Gets or sets a string that represents accept language for this Browser instance and all Browser instances with
                the same BrowserContext.
            </summary>
            <exception cref="T:System.ArgumentNullException">when value set null.</exception>
            <exception cref="T:System.ArgumentException">when value set empty.</exception>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.Preferences">
            <summary>
                Browser's preferences.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.InputSimulator">
            <summary>
                Returns input simulation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.WinFormsBrowserView.InitialFocusOwner">
            <summary>
                Gets or sets the initial focus status for the current view.
                By default, BrowserView obtains the focus after it is shown on a layout.
            </summary>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsDefaultContextMenuHandler">
            <summary>
                Represents default WinForms context menu implementation.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ContextMenuHandler">
            <summary>
                Interface for handling browser context menu requests.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ContextMenuHandler.ShowContextMenu(DotNetBrowser.ContextMenuParams)">
            <summary>
                Invoked when context menu should be displayed.
            </summary>
            <param name="parameters">different useful information about context menu.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultContextMenuHandler.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
                Constructs WinFormsDefaultContextMenuHandler instance.
            </summary>
            <param name="view">Owner UI component.</param>
            <param name="isShowDefaultContextMenu">
                a value indicating whether show default context menu
                (Back, Forward, Reload, Save As... etc.),
                true if the menu is show; otherwise, false.
            </param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultContextMenuHandler.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructs WinFormsDefaultContextMenuHandler instance.
            </summary>
            <param name="view">Owner UI component.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultContextMenuHandler.ShowContextMenu(DotNetBrowser.ContextMenuParams)">
            <summary>
                Invoked when context menu should be displayed.
            </summary>
            <param name="parameters">different useful information about context menu.</param>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsDefaultNetworkDelegate">
            <summary>
                Sample implemnetation of <see cref="T:DotNetBrowser.NetworkDelegate"/>
            </summary>
        </member>
        <member name="T:DotNetBrowser.DefaultNetworkDelegate">
            <summary>
                Default implementation of <see cref="T:DotNetBrowser.NetworkDelegate"/>
            </summary>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnBeforeURLRequest(DotNetBrowser.BeforeURLRequestParams)">
            <summary>
                Fires when a request is about to occur. This event is sent before any TCP connection is made
                and can be used to redirect requests to another location. This method is invoked synchronously. URL
                request will be blocked while this method is executing. If this method throws an exception, then default
                behavior will be used - the target URL will not be changed.
            </summary>
            <param name="parameters">
                provides information about request URL and HTTP method ("GET", "POST" etc.). To override the
                target URL use the BeforeRedirectParams.SetURL(String)} method.
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnBeforeRedirect(DotNetBrowser.BeforeRedirectParams)">
            <summary>
                Fired when a server-initiated redirect is about to occur. This method is invoked synchronously. URL
                request will be blocked while this method is executing. If this method throws an exception,
                the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about the current URL, new URL, HTTP method ("GET", "POST" etc.)
                and HTTP response code (e.g., 200, 404, and so on).
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnBeforeSendHeaders(DotNetBrowser.BeforeSendHeadersParams)">
            <summary>
                Fires when a request is about to occur and the initial headers have been prepared. It allows adding,
                modifying, and deleting HTTP request headers. This method is invoked synchronously. URL
                request will be blocked while this method is executing. If this method throws an exception,
                the loading process will not be affected.
                <p />
                Note that one URL request can be split into several HTTP requests (for example to fetch individual
                byte ranges from a large file) or can be handled by the network stack without communicating with the
                network. For this reason, the event does not provide the final HTTP headers that are sent to the
                network. For example, all headers that are related to caching are invisible.
                <p />
                The following headers are currently not provided to the onBeforeSendHeaders event.
                <ul>
                    <li>Authorization</li>
                    <li>Cache-Control</li>
                    <li>Connection</li>
                    <li>Content-Length</li>
                    <li>Host</li>
                    <li>If-Modified-Since</li>
                    <li>If-None-Match</li>
                    <li>If-Range</li>
                    <li>Partial-Data</li>
                    <li>Pragma</li>
                    <li>Proxy-Authorization</li>
                    <li>Proxy-Connection</li>
                    <li>Transfer-Encoding</li>
                </ul>
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP request
                headers.
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnSendHeaders(DotNetBrowser.SendHeadersParams)">
            <summary>
                Fires right before the HTTP headers are sent to the network. This event is informational and it does not
                allow modifying HTTP headers. This method is invoked synchronously. URL request will be blocked while this
                method is executing. If this method throws an exception, the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP request headers.
                HTTP headers overriding has no effect.
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnHeadersReceived(DotNetBrowser.HeadersReceivedParams)">
            <summary>
                Fires each time that an HTTP(S) response header is received. Due to redirects and authentication requests
                this can happen multiple times per request. This event is intended to allow adding, modifying, and deleting
                HTTP response headers, such as incoming "Set-Cookie" headers.
                <p />
                This method is invoked synchronously. URL request will be blocked while this method is executing. If this
                method throws an exception, the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP request
                headers.
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnResponseStarted(DotNetBrowser.ResponseStartedParams)">
            <summary>
                Fires when the first byte of the response body is received. For HTTP requests, this means that the status
                line and response headers are available. This event is informational.
                <p />
                This method is invoked synchronously. URL request will be blocked while this method is executing. If this
                method throws an exception, the loading process will not be affected.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.) and HTTP response
                code.
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnDataReceived(DotNetBrowser.DataReceivedParams)">
            <summary>
                Fires each time when a part of the response body is received. When the whole response body is received,
                OnCompleted(RequestCompletedParams) method will be fired. This event is informational.
                <p />
                Note that Mime-Type and Charset, provided by DataReceivedParams, are taken from response headers
                and may be overridden by OnHeadersReceived(HeadersReceivedParams) method.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST", etc.), Mime-Type, and
                response data.
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnCompleted(DotNetBrowser.RequestCompletedParams)">
            <summary>
                Fires when a request has been processed successfully or failed. You can get information about HTTP request
                status via the RequestCompletedParams.GetStatus() method. If HTTP request status is
                RequestStatus.FAILED, you can get information about network error using the
                RequestCompletedParams.GetErrorCode() method.
            </summary>
            <param name="parameters">
                provides information about request URL, HTTP method ("GET", "POST" etc.), request status,
                response code and network error code.
            </param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnDestroyed(DotNetBrowser.RequestParams)">
            <summary>
                Fires when a request is being destroyed.
            </summary>
            <param name="parameters">provides information about request.</param>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnAuthRequired(DotNetBrowser.AuthRequiredParams)">
            <summary>
                This method is invoked when a request receives an authentication challenge and is
                unable to respond using cached credentials. You can use this method to handle
                "basic" or "digest" authentication.
                FYI: to test "basic" or "digest" authentication you can use http://test.webdav.org/
            </summary>
            <param name="parameters">
                the authentication challenge information such as authentication scheme,
                URL etc. Use <see cref="P:DotNetBrowser.AuthRequiredParams.Username"/> and
                <see cref="P:DotNetBrowser.AuthRequiredParams.Password"/> to provide authentication
                credentials.
            </param>
            <returns>true</returns>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnCanSetCookies(System.String,System.Collections.Generic.List{DotNetBrowser.Cookie})">
            <summary>
                This method is invoked when Chromium engine decides whether cookies can be saved for the url
                or not. Return true to allow engine to save the cookies. If you return false, the cookies will not
                be saved and will not be available in CookieStorage.
                <p />
                If this method throws an exception, then default behavior will be applied - the method returns true.
            </summary>
            <param name="url">a string representation of the URL associated with the cookies.</param>
            <param name="cookies">a list of cookies to apply.</param>
            <returns>true</returns>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnCanGetCookies(System.String,System.Collections.Generic.List{DotNetBrowser.Cookie})">
            <summary>
                This method is invoked when Chromium engine decides whether cookies can be sent back to the web server.
                Return true to allow cookies to be sent to the web server.
                <p />
                If this method throws an exception, then default behavior will be applied - the method returns true.
            </summary>
            <param name="url">a string representation of the URL associated with the cookies.</param>
            <param name="cookies">a list of cookies to send.</param>
            <returns>true</returns>
        </member>
        <member name="M:DotNetBrowser.DefaultNetworkDelegate.OnBeforeSendProxyHeaders(DotNetBrowser.BeforeSendProxyHeadersParams)">
            <summary>
                The similar to OnBeforeSendHeaders(BeforeSendHeadersParams)  method. Fires when proxy connection is used,
                after OnBeforeSendHeaders method is invoked. Provides information about proxy
                connection, and also allows adding, modifying, and deleting HTTP request headers.
            </summary>
            <param name="parameters">provides information about request.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultNetworkDelegate.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructs a new WinFormsDefaultNetworkDelegate instance.
            </summary>
            <param name="parent">Owner UI component.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultNetworkDelegate.OnAuthRequired(DotNetBrowser.AuthRequiredParams)">
            <summary>
                This method is invoked when a request receives an authentication challenge and is
                unable to respond using cached credentials. You can use this method to handle
                "basic" or "digest" authentication.
                FYI: to test "basic" or "digest" authentication you can use http://test.webdav.org/
            </summary>
            <param name="parameters">
                the authentication challenge information such as authentication scheme,
                URL etc. Use <see cref="P:DotNetBrowser.AuthRequiredParams.Username"/> and
                <see cref="P:DotNetBrowser.AuthRequiredParams.Password"/> to provide authentication
                credentials.
            </param>
            <returns> true when authentication must be canceled.</returns>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsDefaultNativeCrashHandler">
            <summary>
                Represents default implementation of the NativeCrashHandler that will
                display message if chromium native process crash.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultNativeCrashHandler.OnChromiumProcessExitNotOk(System.Int64)">
            <summary>
                This method is invoked when chromium process exit not ok.
            </summary>
            <param name="errorCode">the error code.</param>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFDefaultContextMenuHandler">
            <summary>
                Represents default WPF context menu implementation.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultContextMenuHandler.#ctor(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
                Constructs WPFDefaultContextMenuHandler instance.
            </summary>
            <param name="component">Owner UI component.</param>
            <param name="isShowDefaultContextMenu">
                a value indicating whether show default context menu
                (Back, Forward, Reload, Save As... etc.),
                true if the menu is show; otherwise, false.
            </param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultContextMenuHandler.#ctor(System.Windows.FrameworkElement)">
            <summary>
                Constructs WPFDefaultContextMenuHandler instance.
            </summary>
            <param name="component">Owner UI component.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultContextMenuHandler.ShowContextMenu(DotNetBrowser.ContextMenuParams)">
            <summary>
                Invoked when context menu should be displayed.
            </summary>
            <param name="parameters">different useful information about context menu.</param>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFDefaultNetworkDelegate">
            <summary>
                Sample implemnetation of <see cref="T:DotNetBrowser.NetworkDelegate"/>
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultNetworkDelegate.OnAuthRequired(DotNetBrowser.AuthRequiredParams)">
            <summary>
                This method is invoked when a request receives an authentication challenge and is
                unable to respond using cached credentials. You can use this method to handle
                "basic" or "digest" authentication.
                FYI: to test "basic" or "digest" authentication you can use http://test.webdav.org/
            </summary>
            <param name="parameters">
                the authentication challenge information such as authentication scheme,
                URL etc. Use <see cref="P:DotNetBrowser.AuthRequiredParams.Username"/> and
                <see cref="P:DotNetBrowser.AuthRequiredParams.Password"/> to provide authentication
                credentials.
            </param>
            <returns> true when authentication must be canceled.</returns>
        </member>
        <member name="T:DotNetBrowser.WPFBrowserViewFactory">
            <summary>
                A browser view factory for creating browser view instances, depending on rendering type of browser.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Certificate">
            <summary>
                Provides information about X509 certificate. X509 certificate represents a X.509 certificate,
                which is comprised a particular identity or end-entity certificate, such as an SSL server
                identity or an SSL client certificate, and zero or more intermediate certificates.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Certificate.#ctor(System.String,System.String,System.Boolean,System.Int64,System.Int64)">
            <summary>
                Constructs a new Certificate instance.
            </summary>
            <param name="issuerName">the name of the issuer of the certificate.</param>
            <param name="subjectName">
                the name of the subject of the certificate. For HTTPS server certificates, this
                represents the web server. The common name of the subject should match the host name of the web server.
            </param>
            <param name="hasExpired">indicates whether certificate has already expired.</param>
            <param name="startTime">a period of time in milliseconds starting from the certificate is valid.</param>
            <param name="expiryTime">a period of time in milliseconds that describes until what time the certificate is valid.</param>
        </member>
        <member name="M:DotNetBrowser.Certificate.#ctor(System.String,System.String,System.Boolean,System.Int64,System.Int64,System.String,System.String)">
            <summary>
                Constructs a new Certificate instance.
            </summary>
            <param name="issuerName">the name of the issuer of the certificate.</param>
            <param name="subjectName">
                the name of the subject of the certificate. For HTTPS server certificates, this
                represents the web server. The common name of the subject should match the host name of the web server.
            </param>
            <param name="hasExpired">indicates whether certificate has already expired.</param>
            <param name="startTime">a period of time in milliseconds starting from the certificate is valid.</param>
            <param name="expiryTime">a period of time in milliseconds that describes until what time the certificate is valid.</param>
            <param name="caFingerPrint">the CA Fingerprint of certificate. Returns an empty string when constructed from a X509Certificate.</param>
            <param name="certData">a string data from certificate.</param>
        </member>
        <member name="M:DotNetBrowser.Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Constructs a new Certificate instance from an X509Certificate.
            </summary>
            <param name="certificate">the certificate.</param>
        </member>
        <member name="M:DotNetBrowser.Certificate.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Certificate.X509Certificate">
            <summary>
                Gets the X509Certificate that provides access to all certificate information
                or null if it's failed to extract information because of corrupted certificate data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.X509Certificate2">
            <summary>
                Gets the X509Certificate2 that provides access to all certificate information
                or null if it's failed to extract information because of corrupted certificate data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.Issuer">
            <summary>
                Returns the Issuer entity of certificate or null if it's failed to extract
                the issuer from certificate data because of corrupted certificate data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.Subject">
            <summary>
                Returns the Subject entity of certificate or null if it's failed to extract
                the subject from certificate data because of corrupted certificate data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.IssuerName">
            <summary>
                Gets the name of the issuer of the certificate.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.SubjectName">
            <summary>
                Gets the name of the subject of the certificate. For HTTPS server certificates, this
                represents the web server. The common name of the subject should match the host name of the web server.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.HasExpired">
            <summary>
                Gets true if certificate has already expired, otherwise - false.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.ValidStartTime">
            <summary>
                Gets a period of time in milliseconds starting from the certificate is valid.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.ValidExpiryTime">
            <summary>
                Gets a period of time in milliseconds that describes until what time the certificate is valid.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.CAFingerPrint">
            <summary>
                Gets the CA Fingerprint of certificate.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.FingerPrint">
            <summary>
                Gets Fingerprint of certificate or empty string if it's failed to extract fingerprint
                from certificate because of corrupted data.
            </summary>
            Returns 
        </member>
        <member name="P:DotNetBrowser.Certificate.SerialNumber">
            <summary>
                Gets the serial number of certificate or empty string if it's failed to extract serial
                number from certificate because of corrupted data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.KeyUsages">
            <summary>
                Gets a flags of key usages or null if it's failed to extract key usages info
                from certificate because of corrupted data.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Certificate.ExtendedKeyUsages">
            <summary>
                Gets a list of extended key usages or empty collection if it's failed to extract
                extended key usages info from certificate because of corrupted data.
            </summary>
        </member>
        <member name="T:DotNetBrowser.CertificateErrorParams">
            <summary>
                Contains information about SSL certificate error.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CertificateErrorParams.#ctor(System.String,DotNetBrowser.Certificate,DotNetBrowser.ResourceType,DotNetBrowser.Events.NetError)">
            <summary>
                Constructs a new CertificateErrorParams instance.
            </summary>
            <param name="url">a string that represents URL of the request that causes SSL certificate error.</param>
            <param name="certificate">Certificate object with the information about problematic SSL certificate.</param>
            <param name="resourceType">type of the resource that has initiated the request.</param>
            <param name="certificateError">network error code that describes the reason of SSL certificate error.</param>
        </member>
        <member name="P:DotNetBrowser.CertificateErrorParams.RequestURL">
            <summary>
                Gets a string that represents URL of the request that causes SSL certificate error.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificateErrorParams.ResourceType">
            <summary>
                Gets type of the resource that has initiated the request.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificateErrorParams.CertificateError">
            <summary>
                Gets network error code that describes the reason of SSL certificate error.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificateErrorParams.Certificate">
            <summary>
                Gets Certificate object with the information about problematic SSL certificate.
            </summary>
            <value>the problematic SSL certificate.</value>
        </member>
        <member name="T:DotNetBrowser.CertificatesDialogParams">
            <summary>
                The OnSelectCertificate event parameters.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CertificatesDialogParams.#ctor(DotNetBrowser.Browser,System.Boolean,DotNetBrowser.HostPortPair,System.Collections.Generic.List{DotNetBrowser.Certificate})">
            <summary>
                Constructs a new CertificatesDialogEventArgs instance.
            </summary>
            <param name="browser">the browser instance that requests SSL client certificate authorization.</param>
            <param name="isProxy">
                indicates whether the server that issues this request was the HTTPS proxy used in
                the request.
            </param>
            <param name="hostPortPair">host and port of SSL server that requested SSL client authentication.</param>
            <param name="certificates">a list of client certificates matching the server criteria.</param>
        </member>
        <member name="P:DotNetBrowser.CertificatesDialogParams.Browser">
            <summary>
                Gets Browser instance that requests SSL client certificate authorization.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificatesDialogParams.IsProxy">
            <summary>
                Gets true if the server that issues this request was the HTTPS proxy used in
                the request. False, if the server was the origin server.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificatesDialogParams.HostPortPair">
            <summary>
                Gets host and port of SSL server that requested SSL client authentication.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificatesDialogParams.Certificates">
            <summary>
                Gets a list of client certificates matching the server criteria.
            </summary>
        </member>
        <member name="P:DotNetBrowser.CertificatesDialogParams.SelectedCertificate">
            <summary>
                Returns the currently selected certificate for SSL authorization. Initially returns null
                to indicate that certificate for SSL authorization hasn't been selected yet.
            </summary>
            <remarks>
                Sets the certificate that must be used for SSL client certificate authorization.
                The certificate can be obtained in two ways:
            <ol>
            <li>From the client certificate list.To get a list of client certificates
                use <see cref="P:DotNetBrowser.CertificatesDialogParams.Certificates"/> property.</li>
            <li>From an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> using the corresponding constructor.</li>
            </ol>
            </remarks>
            <value>the currently selected certificate for SSL authorization.</value>
            <exception cref="T:System.ArgumentException">when certificate is created manually and does not contain the
                underlying <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>.</exception>
        </member>
        <member name="P:DotNetBrowser.CertificatesDialogParams.Status">
            <summary>
                Gets or sets the dialog close status indicates the way (OK or Cancel button) the dialog was closed
                <see cref="T:DotNetBrowser.CloseStatus"/>.
            </summary>
        </member>
        <member name="T:DotNetBrowser.CloseStatus">
            <summary>
                The dialog close status indicates the way (OK or Cancel button) the dialog was closed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CloseStatus.OK">
            <summary>
                The dialog was closed via OK button.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CloseStatus.CANCEL">
            <summary>
                The dialog was closed via Cancel button or 'X' button of the dialog.
            </summary>
        </member>
        <member name="F:DotNetBrowser.CloseStatus.UNDEFINED">
            <summary>
                The dialog was closed unexpectedly because of an exception or internal error.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Cookie">
            <summary>
                Represents an HTTP cookie.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Cookie.Name">
            <summary>
                Gets the name of the cookie.
            </summary>
            <value>a String specifying the cookie's name.</value>
        </member>
        <member name="P:DotNetBrowser.Cookie.Value">
            <summary>
                Gets the value of the cookie.
            </summary>
            <value>a String containing the cookie's present value.</value>
        </member>
        <member name="P:DotNetBrowser.Cookie.Domain">
            <summary>
                Gets the domain name set for this cookie.
            </summary>
            <value>a String containing the domain name.</value>
        </member>
        <member name="P:DotNetBrowser.Cookie.Path">
            <summary>
                Gets the path on the server
                to which the browser returns this cookie. The
                cookie is visible to all subpaths on the server.
            </summary>
            <value>
                a String specifying a path that contains
                a servlet name, for example, <i>/catalog</i>.
            </value>
        </member>
        <member name="P:DotNetBrowser.Cookie.CreationTime">
            <summary>
                Gets cookie creation time in microseconds.
            </summary>
            <value>the creation time in microseconds.</value>
        </member>
        <member name="P:DotNetBrowser.Cookie.ExpirationTime">
            <summary>
                Gets cookie expiration time in microseconds.
            </summary>
            <value>the expiration time in microseconds.</value>
        </member>
        <member name="P:DotNetBrowser.Cookie.Secure">
            <summary>
                Gets true if sending this cookie should be
                restricted to a secure protocol, or false if the
                it can be sent using any protocol.
            </summary>
            <value>
                false if the cookie can be sent over
                any standard protocol; otherwise, true.
            </value>
        </member>
        <member name="P:DotNetBrowser.Cookie.HttpOnly">
            <summary>
                Returns true if this cookie contains the <i>HttpOnly</i>
                attribute. This means that the cookie should not be accessible to
                scripting engines, like javascript.
            </summary>
            <value>true if this cookie should be considered http only.</value>
        </member>
        <member name="P:DotNetBrowser.Cookie.Session">
            <summary>
                Returns true if this cookie is a session cookie without
                expiration time and false if this cookie is a persistent
                cookie that has expiration time.
            </summary>
        </member>
        <member name="T:DotNetBrowser.CookieStorage">
            <summary>
                The system for storing and retrieving cookies. The cookies can be stored in
                the process memory (session cookies) or in files (persistent cookies).
                The CookieStorage provides access to both session and persistent cookies.
                <p/>
                The persistent cookies are stored in the Browser cache directory. By default
                all Browsers use predefined cache directory. You can find out where this
                directory is located using the <see cref="M:DotNetBrowser.BrowserPreferences.GetDefaultChromiumDir"/>
                method.
                <p/>
                So, if Browser A and B have the same cache directory, then they will access
                the cookies of each other.
                <p/>
                If you need to configure each Browser to use unique cookie storage which is
                not accessible for other Browser instances, you need to provide unique
                user data directory for each Browser instance. The user data directory path
                can be provided via configured <see cref="!:BrowserContext.BrowserContext(string)"/> object that
                must be passed into the <see cref="M:DotNetBrowser.BrowserFactory.Create(DotNetBrowser.BrowserContext)"/> factory method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.CookieStorage.GetAllCookies">
            <summary>
                Returns all the cookies including secure and HTTP only cookies.
                This doesn't mark the cookies as having been accessed.
            </summary>
            <returns>a list of all the cookies or empty list when there's no cookies.</returns>
        </member>
        <member name="M:DotNetBrowser.CookieStorage.GetAllCookies(System.String)">
            <summary>
                Returns all the cookies for given url including HTTP only cookies.
            </summary>
            <param name="url">the URL associated with the returned cookies.</param>
            <returns>a list of all the cookies or empty list when there's no cookies.</returns>
        </member>
        <member name="M:DotNetBrowser.CookieStorage.Delete(DotNetBrowser.Cookie)">
            <summary>
                Deletes one specific cookie. The cookie instance can be received from
                a list of cookies returned from the <see cref="M:DotNetBrowser.CookieStorage.GetAllCookies"/> method.
            </summary>
            <param name="cookie">cookie to delete.</param>
            <returns>true when cookie was deleted successfully.</returns>
        </member>
        <member name="M:DotNetBrowser.CookieStorage.DeleteAll">
            <summary>
                Deletes all of the cookies including session, secure or HTTP only cookies.
            </summary>
            <returns>the number of deleted cookies.</returns>
        </member>
        <member name="M:DotNetBrowser.CookieStorage.SetCookie(System.String,System.String,System.String,System.String,System.String,System.Int64,System.Boolean,System.Boolean)">
            <summary>
                Sets a cookie given explicit user-provided cookie attributes and associate
                it with the given url.
                <p />
                This method expects each cookie attribute to be well-formed. It will check for
                disallowed characters (e.g. the ';' character is disallowed within the
                cookie value attribute) and will return false without setting the cookie
                if such characters are found.
                <p />
                If url and domain are different, the cookie will not be set
                and the method returns false. So, make sure that url and
                cookie domain are the same domains. For example, for http://www.teamdev.com
                address the cookie domain must be .teamdev.com
                <p />
                If you set the cookie successfully and the method returns true and you
                decide to find the cookie in the list of all cookies, please note that
                the cookie storage can modify some cookies attributes such as domain or expiration time.
            </summary>
            <param name="url">
                a string that represents a valid URL which host will be associated
                with a new cookie instance. The url string must be
                valid and has the following format: http[https]://host. For example,
                http://www.google.com , https://www.gmail.com etc.
            </param>
            <param name="name">the cookie name.</param>
            <param name="value">the cookie value.</param>
            <param name="domain">the cookie domain. For example, ".google.com".</param>
            <param name="path">the cookie path. For example, "/".</param>
            <param name="expirationTime">the expiration time in microseconds.</param>
            <param name="secure">indicates whether cookie is secure.</param>
            <param name="httpOnly">indicates whether cookie is HTTPOnly.</param>
            <returns>
                when cookie was inserted successfully, otherwise -
                false. If the passed cookie is valid but already expired, the
                method returns true, but the cookie will not be in the list of
                all cookies.
            </returns>
        </member>
        <member name="M:DotNetBrowser.CookieStorage.SetSessionCookie(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                Sets a session cookie given explicit user-provided cookie attributes and associate
                it with the given <paramref name="url" />.
                <p />
                This method expects each cookie attribute to be well-formed. It will check for
                disallowed characters (e.g. the ';' character is disallowed within the
                cookie value attribute) and will return false without setting the cookie
                if such characters are found.
                <p />
                If <paramref name="url" /> and <paramref name="domain" /> are different, the cookie will not be set
                and the method returns false. So, make sure that <paramref name="url" /> and
                cookie domain are the same domains. For example, for http://www.teamdev.com
                address the cookie domain must be .teamdev.com
                <p />
                If you set the cookie successfully and the method returns true and you
                decide to find the cookie in the list of all cookies, please note that
                the cookie storage can modify some cookies attributes such as domain or expiration time.
            </summary>
            <param name="url">
                a string that represents a valid URL which host will be associated
                with a new cookie instance. The url string must be
                valid and has the following format: http[https]://host. For example,
                http://www.google.com, https://www.gmail.com etc.
            </param>
            <param name="name">the cookie name.</param>
            <param name="value">the cookie value.</param>
            <param name="domain">the cookie domain. For example, ".google.com".</param>
            <param name="path">the cookie path. For example, "/".</param>
            <param name="secure">indicates whether cookie is secure.</param>
            <param name="httpOnly">indicates whether cookie is HTTPOnly.</param>
            <returns>true when session cookie was inserted successfully, otherwise - false.</returns>
        </member>
        <member name="M:DotNetBrowser.CookieStorage.Save">
            <summary>
                Use this method to save all the changes you apply to this cookie storage.
                By default all the changes to the cookie store are made in memory, so when
                you restart the application you will not see the changes you made if you
                don't invoke this method on application exit. You can invoke this method
                after every change you made to cookie storage.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ContextMenuParams">
            <summary>
                Contains information about context menu.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ContextMenuParams.#ctor(DotNetBrowser.Browser,DotNetBrowser.MediaType,System.Int32,System.Int32,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int64,System.String,System.String,System.String,DotNetBrowser.ContextMenu,System.Collections.Generic.List{System.String})">
            <summary>
                Constructs a new ContextMenuParams instance.
            </summary>
            <param name="browser">the browser instance the context menu is being invoked on.</param>
            <param name="mediaType">the type of media.</param>
            <param name="x">the x coordinate of context menu.</param>
            <param name="y">the y coordinate of context menu.</param>
            <param name="linkURL">
                the URL of the link that encloses the node the context menu
                was invoked on.
            </param>
            <param name="linkText">the text associated with the link.</param>
            <param name="srcURL">
                the source URL for the element that the context menu was
                invoked on.
            </param>
            <param name="imageBlocked">indicates whether the context menu was invoked on a blocked image.</param>
            <param name="pageURL">the URL of the top level page.</param>
            <param name="frameURL">the URL of the subframe.</param>
            <param name="frameId">the ID of the subframe.</param>
            <param name="selectionText">the text of the selection that the context menu was invoked on.</param>
            <param name="misspelledWord">the misspelled word under the cursor.</param>
            <param name="frameCharset">the character encoding of the frame.</param>
            <param name="contextMenu">the presentation of default context menu</param>
            <param name="dictionarySuggestions">suggestions for replacing misspelled word</param>
        </member>
        <member name="M:DotNetBrowser.ContextMenuParams.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.Browser">
            <summary>
                Gets the browser instance the context menu is being invoked on.
            </summary>
            <value>the browser instance the context menu is being invoked on.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.MediaType">
            <summary>
                Gets the type of media the context menu is being invoked on.
            </summary>
            <value>a value from the <see cref="P:DotNetBrowser.ContextMenuParams.MediaType"/> list of known media types.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.Location">
            <summary>
                Gets the coordinates of the mouse when the context menu
                was invoked.
            </summary>
            <value>the context menu coordinates.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.LinkURL">
            <summary>
                Gets the URL of the link that encloses the node the context menu
                was invoked on.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.LinkText">
            <summary>
                Gets the text associated with the link. May be an empty string
                if the contents of the link are an image.
            </summary>
            <value>the text associated with the link.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.SrcURL">
            <summary>
                This is the source URL for the element that the context menu was
                invoked on. Example of elements with source URLs are img, audio, and
                video.
            </summary>
            <value>the source URL for the element.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.IsImageBlocked">
            <summary>
                Indicates whether the context menu was invoked on a blocked image.
            </summary>
            <value>true if the context menu was invoked on a blocked image.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.PageURL">
            <summary>
                Gets the URL of the top level page that the context menu was invoked on.
            </summary>
            <value>the URL of the top level page.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.FrameURL">
            <summary>
                Gets the URL of the subframe that the context menu was invoked on.
            </summary>
            <value>the URL of the subframe.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.FrameId">
            <summary>
                Gets the ID of the subframe that the context menu was invoked on.
            </summary>
            <value>the ID of the subframe.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.SelectionText">
            <summary>
                Gets the text of the selection that the context menu was invoked on.
            </summary>
            <value>the text of the selection.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.MisspelledWord">
            <summary>
                Gets the misspelled word under the cursor, if any.
            </summary>
            <value>the misspelled word under the cursor.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.FrameCharset">
            <summary>
                Gets the character encoding of the frame on which the menu is invoked.
            </summary>
            <value>the character encoding of the frame.</value>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.ContextMenu">
            <summary>
                Gets presentation of default context menu. It can be used for getting list
                of context menu items, notifying Chromium engine about context menu state
                (e.g. whether it's opened or closed). Using information about context menu
                items you can build and display context menu.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ContextMenuParams.DictionarySuggestions">
            <summary>
                Gets words suggestions for replacing misspelled word.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DefaultDownloadHandler">
            <summary>
                Basic implementation of the DownloadHandler.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DownloadHandler">
            <summary>
                Allows handling file downloads.
                <para>
                    When Browser instance cannot display a specified file (e.g. ///.zip file) the
                    DownloadHandler.AllowDownload(DownloadItem)} method will be used to check
                    whether this file can be downloaded. If this method returns TRUE, the
                    file download is started.
                </para>
                <para>
                    You can use this handler to suppress all file downloads or download only files
                    with a specific mime type.
                </para>
            </summary>
        </member>
        <member name="M:DotNetBrowser.DownloadHandler.AllowDownload(DotNetBrowser.DownloadItem)">
            <summary>
                This method is invoked when Browser is going to download a file. The download
                parameter contains all information about the the file which is going to be downloaded.
                <p />
                To suppress file download, this method must return FALSE.
                <p />
                By default the file will be downloaded into application's working directory. You can get or set
                the absolute file path using the DownloadItem.DestinationFile property.
            </summary>
            <param name="downloadItem">information about the file that will be downloaded.</param>
            <returns>TRUE to allow downloading the file or FALSE to suppress it.</returns>
        </member>
        <member name="P:DotNetBrowser.DefaultDownloadHandler.DownloadMode">
            <summary>
                Gets or sets the file download handler mode that will be invoked every time when requests file download.
                Primary DownloadHandlerMode has <code>Default</code> mode. It means that download dialog
                displayed. When it is in <code>Silent</code> mode it means that download dialog isn't displayed and file will be
                downloaded into application's working directory.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DefaultLoadHandler">
            <summary>
                Default implementation of the LoadHandler.
            </summary>
        </member>
        <member name="T:DotNetBrowser.LoadHandler">
            <summary>
                Allows handling any load activity including filtering all URLs loaded in Browser component. Using
                LoadHandler you can cancel any load event or suppress problematic SSL certificates.
            </summary>
        </member>
        <member name="M:DotNetBrowser.LoadHandler.OnLoad(DotNetBrowser.LoadParams)">
            <summary>
                Invoked before native engine starts loading the URL defined in the
                <see cref="P:DotNetBrowser.LoadParams.Url"/> property.
            </summary>
            <remarks>
                If this method throws exception, the loading will continue.
            </remarks>
            <param name="loadParams">information about load event.</param>
            <returns>true if loading must be canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.LoadHandler.CanNavigateOnBackspace">
            <summary>
                Invoked when user press Backspace/Shift+Backspace keys to navigate backward/forward. Return
                true to allow backward/forward navigation. To suppress Backspace/Shift+Backspace
                keystrokes return false. Navigation on Backspace/Shift+Backspace is supported on
                Windows platform only.
            </summary>
            <remarks>
                If this method throws exception, the Backspace/Shift+Backspace will work as expected.
            </remarks>
            <returns>false when Backspace/Shift+Backspace keystrokes must be ignored.</returns>
        </member>
        <member name="M:DotNetBrowser.LoadHandler.OnCertificateError(DotNetBrowser.CertificateErrorParams)">
            <summary>
                Informs that a SSL certificate error has occurred. The passed errorParams object contains
                information about problematic SSL certificate. You can accept this SSL certificate and
                continue loading the resource. The SSL certificate will not be added to the list of
                trusted certificates.
            </summary>
            <remarks>
                If this method throws exception, the SSL certificate error will be ignored and the required
                resource will be loaded.
            </remarks>
            <param name="errorParams">provides information about problematic SSL certificate.</param>
            <returns>
                true if loading must be canceled and false if you ignore SSL certificate
                error and want to load the required resource.
            </returns>
        </member>
        <member name="M:DotNetBrowser.DefaultLoadHandler.OnLoad(DotNetBrowser.LoadParams)">
            <summary>
                Invoked before native engine starts loading the URL defined in the
                <see cref="P:DotNetBrowser.LoadParams.Url"/> property.
            </summary>
            <param name="loadParams">information about load event.</param>
            <returns>false.</returns>
        </member>
        <member name="M:DotNetBrowser.DefaultLoadHandler.CanNavigateOnBackspace">
            <summary>
                Invoked when user press Backspace/Shift+Backspace keys to navigate backward/forward. Return
                true to allow backward/forward navigation. To suppress Backspace/Shift+Backspace
                keystrokes return false. Navigation on Backspace/Shift+Backspace is supported on
                Windows platform only.
            </summary>
            <remarks>
                If this method throws exception, the Backspace/Shift+Backspace will work as expected.
            </remarks>
            <returns>true.</returns>
        </member>
        <member name="M:DotNetBrowser.DefaultLoadHandler.OnCertificateError(DotNetBrowser.CertificateErrorParams)">
            <summary>
                Informs that a SSL certificate error has occurred. The passed errorParams object contains
                information about problematic SSL certificate. You can accept this SSL certificate and
                continue loading the resource. The SSL certificate will not be added to the list of
                trusted certificates.
            </summary>
            <remarks>
                If this method throws exception, the SSL certificate error will be ignored and the required
                resource will be loaded.
            </remarks>
            <param name="errorParams">provides information about problematic SSL certificate.</param>
            <returns>
                false.
            </returns>
        </member>
        <member name="T:DotNetBrowser.DefaultResourceHandler">
            <summary>
                Default implementation of ResourceHandler.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ResourceHandler">
            <summary>
                Allows handling process of loading resources such as HTML, images, JavaScript, CSS files, etc.
                You can use this handler to cancel loading specified resources. For example, you can tell
                web browser engine not to load images or HTML from a specified URL.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ResourceHandler.CanLoadResource(DotNetBrowser.ResourceParams)">
            <summary>
                Invoked when native engine decides whether specified resource should be requested from
                web server and loaded.
            </summary>
            <remarks>
                If this method throws an exception, then default behavior will be used - the resource
                will be loaded.
            </remarks>
            <param name="resourceParams">information about resource.</param>
            <returns>false to cancel resource loading.</returns>
        </member>
        <member name="M:DotNetBrowser.DefaultResourceHandler.CanLoadResource(DotNetBrowser.ResourceParams)">
            <summary>
                Invoked when native engine decides whether specified resource should be requested from
                web server and loaded.
            </summary>
            <remarks>
                If this method throws an exception, then default behavior will be used - the resource
                will be loaded.
            </remarks>
            <param name="resourceParams">information about resource.</param>
            <returns>true.</returns>
        </member>
        <member name="T:DotNetBrowser.DialogHandler">
            <summary>
                Allows handling browser dialogs such as JavaScript alert, confirmation and prompt.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnAlert(DotNetBrowser.DialogParams)">
            <summary>
                This method is invoked when JavaScript alert dialog should be displayed. In this
                method you can display standard modal dialog with the message
                that you can get from parameters. Please note that it's not necessary to
                display modal dialog in this method.
            </summary>
            <param name="parameters">The alert dialog parameters.</param>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnConfirmation(DotNetBrowser.DialogParams)">
            <summary>
                This method is invoked when JavaScript confirmation dialog should be displayed. In this
                method you can display standard modal dialog with the message
                that you can get from parameters. Please note that it's not necessary to
                display modal dialog in this method.
            </summary>
            <param name="parameters">The confirmation dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnPrompt(DotNetBrowser.PromptDialogParams)">
            <summary>
                This method is invoked when JavaScript prompt dialog should be displayed. In this
                method you can display standard modal dialog with the message and with text
                field with default prompt text that you can get from parameters.
                Please note that it's not necessary to display modal dialog in this method.
            </summary>
            <param name="parameters">The prompt dialog parameters such as dialog message and default prompt text.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnFileChooser(DotNetBrowser.FileChooserParams)">
            <summary>
                This method is invoked when file selection is to be done. You can use this method to
                display a file chooser dialog with the required type that you can find out from the
                FileChooserMode.
            </summary>
            <param name="parameters">The file chooser dialog parameters such as dialog mode, etc.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnBeforeUnload(DotNetBrowser.UnloadDialogParams)">
            <summary>
                This method is invoked before web page unload. Some web page may override the
                window.onbeforeunload JavaScript function, so that a confirmation dialog will
                be shown every time when user try to reload web page or navigate to another web page.
                You can use this method to display an appropriate confirmation message dialog to
                ask user whether he or she really wants to leave or reload the web page.
            </summary>
            <param name="parameters">The unload dialog parameters such as dialog message and reload flag.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnSelectCertificate(DotNetBrowser.CertificatesDialogParams)">
            <summary>
                This method is invoked when web server requires authorization via SSL client certificate,
                to access the list of the certificates from the system storage that match the server criteria.
            </summary>
            <param name="parameters">
                Use it to get information about SSL authorization request, get a list of
                available certificates and select the required one.
            </param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnReloadPostData(DotNetBrowser.ReloadPostDataParams)">
            <summary>
                This method is invoked when attempt to reload a web page that has POST data and the user
                must confirm whether POST data must be sent again or reload must be canceled.
            </summary>
            <param name="parameters">The reload dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.DialogHandler.OnColorChooser(DotNetBrowser.ColorChooserParams)">
            <summary>
                This method is invoked when color selection is to be done, when user selects HTML5 input element with color type.
                You can use this method to display a color chooser dialog.
            </summary>
            <param name="parameters">The color chooser dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="T:DotNetBrowser.DialogParams">
            <summary>
                Represents parameters that are passed to the
                DialogHandler.OnAlert(parameters) and
                DialogHandler.OnConfirmation(parameters) methods.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DialogParams.#ctor(DotNetBrowser.Browser,System.String,System.String)">
            <summary>
                Constructs a new DialogEventArgs instance.
            </summary>
            <param name="browser">the browser instance of the dialog.</param>
            <param name="url">the address of the web page that causes this dialog.</param>
            <param name="message">a string that represents the dialog message.</param>
        </member>
        <member name="P:DotNetBrowser.DialogParams.Browser">
            <summary>
                Gets the browser instance of the dialog.
            </summary>
            <value>the owner of this dialog.</value>
        </member>
        <member name="P:DotNetBrowser.DialogParams.Url">
            <summary>
                Gets the address of the web page that causes this dialog.
            </summary>
            <value>the address of the web page that causes this dialog.</value>
        </member>
        <member name="P:DotNetBrowser.DialogParams.Message">
            <summary>
                Gets a string that represents the dialog message.
            </summary>
            <value>a string that represents the dialog message.</value>
        </member>
        <member name="P:DotNetBrowser.DialogParams.Status">
            <summary>
                Gets or sets the dialog close status indicates the way (OK or Cancel button) the dialog was closed
                <see cref="T:DotNetBrowser.CloseStatus"/>.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMDocument">
            <summary>
                Represents DOM HTML document of the web page.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMDocument.GetElementsByTagName(System.String)">
            <summary>
                Returns a list of DOM nodes with specific <paramref name="tagName" />.
            </summary>
            <param name="tagName">the name of the tag to match on.</param>
            <returns>a list of the matched DOM nodes.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMDocument.GetElementById(System.String)">
            <summary>
                Returns the DOMElement that has an ID attribute with the
                given value.
            </summary>
            <param name="elementId">The unique id value for an element.</param>
            <returns>the matching element or null if there is none.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMDocument.GetElementsByName(System.String)">
            <summary>
                Returns a list of DOM nodes whose name attribute is given by <paramref name="name"/>.
            </summary>
            <param name="name">the name attribute value for a node.</param>
            <returns>a list of the matched DOM nodes.</returns>
            <exception cref="T:System.ArgumentException"> when <paramref name="name"/> parameter is empty or null.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMDocument.GetElementsByClassName(System.String)">
            <summary>
                Returns a list of DOM nodes whose class attribute is given by <paramref name="className"/>.
            </summary>
            <param name="className">the class attribute value for a node.</param>
            <returns>a list of the matched DOM nodes.</returns>
            <exception cref="T:System.ArgumentException"> when <paramref name="className"/> parameter is empty or null.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMDocument.CreateElement(System.String)">
            <summary>
                Creates and returns a new DOM element with the specified tag name.
            </summary>
            <param name="tagName">the tag name (e.g. "A", "P", "DIV") of the new DOM element.</param>
            <returns>the new DOMElement or null if tagName is wrong.</returns>
            <exception cref="T:System.ArgumentException">when tagName parameter is empty or null.</exception>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMDocument.CreateTextNode">
            <summary>
                Creates and returns a new Text DOM node with <see cref="F:DotNetBrowser.DOM.DOMNodeType.TextNode"/> type.
            </summary>
            <returns>the new Text DOM node with <see cref="F:DotNetBrowser.DOM.DOMNodeType.TextNode"/> type.</returns>
        </member>
        <member name="M:DotNetBrowser.DOM.DOMDocument.CreateTextNode(System.String)">
            <summary>
                Returns a new Text DOM node with <see cref="F:DotNetBrowser.DOM.DOMNodeType.TextNode"/> type.
            </summary>
            <param name="text">the string, which will be used to initialize node value.</param>
            <returns>the new Text DOM node with <see cref="F:DotNetBrowser.DOM.DOMNodeType.TextNode"/> type.</returns>
            <exception cref="T:System.ArgumentException">when text parameter is empty or null.</exception>
        </member>
        <member name="P:DotNetBrowser.DOM.DOMDocument.DocumentElement">
            <summary>
                Gets the document HTML element that usually represents HTML tag.
                This method can return null if document element is not
                available (e.g. the web page of this document was disposed).
            </summary>
            <value>
                the document HTML element that usually represents HTML tag or
                null if document element is not available.
            </value>
        </member>
        <member name="T:DotNetBrowser.DOM.DOMNodeType">
            <summary>
                List of DOM Node types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.ElementNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.AttributeNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.TextNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.CDataSectionNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.EntityReferenceNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.EntityNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.ProcessingInstructionsNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.CommentNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.DocumentNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.DocumentTypeNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.DocumentFragmentNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.NotationNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.XPathNamespaceNode">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.DOMNodeType.ShadowRootNode">
            <summary />
        </member>
        <member name="T:DotNetBrowser.DOM.Events.DOMEventArgs">
            <summary>
                Provides access to the DOM event data.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventArgs.#ctor">
            <summary>
                Initializes a new instance of the DOMEventArgs class.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventArgs.PreventDefault">
            <summary>
                Cancels the event if it is cancelable, without stopping further propagation of the event.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DOM.Events.DOMEventArgs.StopPropagation">
            <summary>
                Prevents further propagation of the current event.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEventArgs.Type">
            <summary>
                Returns the type of this DOM event.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEventArgs.EventType">
            <summary>
                Returns a string containing the type of this DOM event.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEventArgs.Target">
            <summary>
                Returns the DOMEventTarget to which the event was originally dispatched.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEventArgs.CurrentTarget">
            <summary>
                Returns the DOMEventTarget whose DOMEventHandler are currently
                being processed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEventArgs.EventPhase">
            <summary>
                Used to indicate which phase of event flow is currently being evaluated.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEventArgs.Bubbles">
            <summary>
                Used to indicate whether or not an event is a bubbling event. If the
                event can bubble the value is true, else the value is false.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DOM.Events.DOMEventArgs.Cancelable">
            <summary>
                Used to indicate whether or not an event can have its default action
                prevented. If the default action can be prevented the value is true,
                else the value is false.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DOM.Events.DOMEventHandler">
            <summary>
                Represents the method that will handle whenever an DOM event occurs.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.DOM.Events.DOMEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.DOM.Events.DOMEventPhase">
            <summary>
                List of DOM event phases
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventPhase.CapturingPhase">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventPhase.AtTarget">
            <summary />
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventPhase.BubblingPhase">
            <summary />
        </member>
        <member name="T:DotNetBrowser.DOM.Events.DOMEventType">
            <summary>
                The list of supported HTML event types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnClick">
            <summary>
                Fires when the pointing device button is clicked over an element.
                A click is defined as a mousedown and mouseup over the same screen
                location.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnDoubleClick">
            <summary>
                Fires when the pointing device button is double clicked over an element.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnMouseDown">
            <summary>
                Fires when the pointing device button is pressed over an element.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnMouseUp">
            <summary>
                Fires when the pointing device button is released over an element.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnMouseOver">
            <summary>
                Fires when the pointing device is moved onto an element.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnMouseMove">
            <summary>
                Fires when the pointing device is moved while it is over an element.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnMouseOut">
            <summary>
                Fires when the pointing device is moved away from an element.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnKeyDown">
            <summary>
                Fires before keypress, when a key on the keyboard is pressed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnKeyUp">
            <summary>
                Fires when a key on the keyboard is released
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnKeyPress">
            <summary>
                Fires after keydown, when a key on the keyboard is pressed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnLoad">
            <summary>
                Fires when the user agent finishes loading all content within a document,
                including window, frames, objects and images. For elements, it fires when
                the target element and all of its content has finished loading.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnUnload">
            <summary>
                Fires when the user agent removes all content from a window or frame.
                For elements, it fires when the target element or any of its content
                has been removed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnAbort">
            <summary>
                Fires when an object/image is stopped from loading before completely loaded.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnError">
            <summary>
                Fires when an object/image/frame cannot be loaded properly.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnResize">
            <summary>
                Fires when a document view is resized.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnScroll">
            <summary>
                Fires when a document view is scrolled.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnSelect">
            <summary>
                Fires when a user selects some text in a text field, including input
                and textarea.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnChange">
            <summary>
                Fires when a control loses the input focus and its value has been
                modified since gaining focus.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnSubmit">
            <summary>
                Fires when a form is submitted.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnReset">
            <summary>
                Fires when a form is reset.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnFocus">
            <summary>
                Fires when an element receives focus either via the pointing device or
                by tab navigation.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.OnBlur">
            <summary>
                Fires when an element loses focus either via the pointing device or
                by tabbing navigation.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DOM.Events.DOMEventType.Custom">
            <summary />
        </member>
        <member name="T:DotNetBrowser.DownloadMode">
            <summary>
                Provides set of supported download modes.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadMode.Default">
            <summary>
                Indicates that download dialog will be display at every download request.
            </summary>
        </member>
        <member name="F:DotNetBrowser.DownloadMode.Silent">
            <summary>
                Indicates that download dialog will not be display and file will be
                download into application's working directory.
            </summary>
        </member>
        <member name="T:DotNetBrowser.DownloadItem">
            <summary>
                Provides different information such as file URL, its mime type,
                percent complete, received bytes etc. Also it allows registering
                the <see cref="E:DotNetBrowser.DownloadItem.DownloadEvent"/> to receive download update events for
                this particular download item.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DownloadItem.Pause">
            <summary>
                Pauses this download. Will have no effect when the download is already paused.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DownloadItem.Resume">
            <summary>
                Resumes this download. Will have no effect when the download is not paused.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DownloadItem.Cancel">
            <summary>
                Cancels this download. Will have no effect when the download is already cancelled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.URL">
            <summary>
                Gets URL of this download.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.Paused">
            <summary>
                Indicates whether this download is paused. Use this method in the
                download event to find out whether download is paused or not.
                Return true when this download is paused.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.Canceled">
            <summary>
                Indicates whether this download is canceled. Use this method in the
                download event to find out whether download is canceled or not.
                Return true when this download is canceled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.Completed">
            <summary>
                Indicates whether this download is completed. Use this method in the
                <see cref="E:DotNetBrowser.DownloadItem.DownloadEvent"/> event to find out whether download is completed or not.
            </summary>
            <value>TRUE when this download is completed.</value>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.MimeType">
            <summary>
                Gets the MIME type of this download.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.ID">
            <summary>
                Gets unique identifier of this download.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.CurrentSpeed">
            <summary>
                Gets simple speed estimate in bytes/s.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.PercentComplete">
            <summary>
                Gets rough percent complete. -1 means we don't know it, because we
                didn't receive a total size.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.TotalBytes">
            <summary>
                Gets the total size of a file in bytes.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.ReceivedBytes">
            <summary>
                Gets the number or received (downloaded) bytes. The received bytes
                must be always less that total bytes.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.DestinationFile">
            <summary>
                Gets or sets destination file that indicates where the file will be downloaded.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DownloadItem.DownloadInterruptReason">
            <summary>
                Gets the possible download interrupt reason.
            </summary>
        </member>
        <member name="E:DotNetBrowser.DownloadItem.DownloadEvent">
            <summary>
                An event that indicates that download update for this download instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.DownloadEventArgs">
            <summary>
                Provides event information for event that indicates that download is updated.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.DownloadEventArgs.#ctor(DotNetBrowser.DownloadItem)">
            <summary>
                Constructs a new DownloadEventArgs instance.
            </summary>
            <param name="item">the download instance which causes this event.</param>
        </member>
        <member name="P:DotNetBrowser.Events.DownloadEventArgs.Item">
            <summary>
                Gets the download instance which causes this event.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.DownloadEventHandler">
            <summary>
                Represents the method that will handle event that indicates when download updates its state.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.DownloadEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.ZoomEventArgs">
            <summary>
                Arguments fpr an event that indicates that zoom level for a specific URL has been changed.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.ZoomEventArgs.#ctor(System.Double,System.String)">
            <summary>
                Constructs a new ZoomEvent instance.
            </summary>
            <param name="zoomLevel">the level of zoom. Can be -2.5, 0.0, 2.5.</param>
            <param name="url">URL of the web page which zoom level has been changed.</param>
        </member>
        <member name="M:DotNetBrowser.Events.ZoomEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.ZoomEventArgs.Url">
            <summary>
                Gets URL of the web page which zoom level has been changed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.ZoomEventArgs.ZoomLevel">
            <summary>
                Gets zoom level of the web page. Zoom level can be negative when
                zoom is out, positive when zoom is in and 0.0 when zoom level is
                reset to default value.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.ZoomChangedHandler">
            <summary>
                Represents the method that will handle event that indicates that the zoom of a document in main frame has been
                changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.ZoomEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.FileChooserParams">
            <summary>
                The OnFileChooser event parameters.
            </summary>
        </member>
        <member name="M:DotNetBrowser.FileChooserParams.#ctor(DotNetBrowser.Browser,DotNetBrowser.FileChooserMode,System.String)">
            <summary>
                Constructs a new FileChooserEventArgs instance.
            </summary>
            <param name="browser">the browser instance of the dialog.</param>
            <param name="mode">the mode of the dialog</param>
            <param name="acceptTypes">
                the accept attribute specifies the types of files that the server accepts (that can be
                submitted through a file upload)
            </param>
        </member>
        <member name="P:DotNetBrowser.FileChooserParams.SelectedFiles">
            <summary>
                Gets or set the full path of selected files or null if file wasn't selected.
            </summary>
        </member>
        <member name="P:DotNetBrowser.FileChooserParams.Status">
            <summary>
                Gets or set <see cref="F:DotNetBrowser.CloseStatus.OK"/> when dialog was closed successfully or
                <see cref="F:DotNetBrowser.CloseStatus.CANCEL"/> when dialog was closed via Cancel button.
            </summary>
        </member>
        <member name="P:DotNetBrowser.FileChooserParams.AcceptTypes">
            <summary>
                Gets or sets the accept attribute specifies the types of files that the server accepts (that can be submitted
                through a file upload).
            </summary>
        </member>
        <member name="P:DotNetBrowser.FileChooserParams.Browser">
            <summary>
                Gets the browser instance of the dialog.
            </summary>
            <value>the owner of this dialog.</value>
        </member>
        <member name="P:DotNetBrowser.FileChooserParams.Mode">
            <summary>
                Gets the mode of the dialog.
            </summary>
            <value>the mode of the dialog.</value>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.BrowserViewEventArgs.BrowserView">
            <summary>
                Should be filled in handler
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.ConsoleEventArgs">
            <summary>
                Provides event information for event that indicates that the message was added to the console.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.ConsoleEventArgs.#ctor(DotNetBrowser.Browser,DotNetBrowser.Events.ConsoleEventArgs.MessageLevel,System.Int32,System.String,System.String)">
            <summary>
                Constructs a new ConsoleEvent instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="level">the console message level (debug, log, warning or error).</param>
            <param name="lineNumber">the line number that causes the message.</param>
            <param name="message">the console message.</param>
            <param name="source">the source that causes console message. E.g. file name.</param>
        </member>
        <member name="M:DotNetBrowser.Events.ConsoleEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.ConsoleEventArgs.Level">
            <summary>
                Gets the console message level (debug, log, warning or error).
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.ConsoleEventArgs.LineNumber">
            <summary>
                Gets the line number that causes the message.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.ConsoleEventArgs.Message">
            <summary>
                Gets the console message.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.ConsoleEventArgs.Source">
            <summary>
                Gets a string that describes the source of the console message. Usually the source
                is a path to a file that causes this console message.
            </summary>
            <value>a string that describes the source of the console message.</value>
        </member>
        <member name="T:DotNetBrowser.Events.ConsoleEventArgs.MessageLevel">
            <summary>
                Console message levels.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.ConsoleEventArgs.MessageLevel.DEBUG">
            <summary>
                Debug level.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.ConsoleEventArgs.MessageLevel.LOG">
            <summary>
                Log level.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.ConsoleEventArgs.MessageLevel.WARNING">
            <summary>
                Warning level.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.ConsoleEventArgs.MessageLevel.ERROR">
            <summary>
                Error level.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.ConsoleMessageHandler">
            <summary>
                Represents the method that will handle event that indicates that the message was added to the console.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.ConsoleEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.DisposeEventArgs">
            <summary>
                Provides event information for event that indicates that browser instance disposed.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.DisposeEventArgs.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new DisposeEvent instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
        </member>
        <member name="T:DotNetBrowser.Events.DisposeEventHandler">
            <summary>
                Represents the method that will handle event that indicates that browser instance disposed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.DisposeEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.FailLoadingEventArgs">
            <summary>
                Provides event information for event that indicates that frame loading process has been failed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.LoadEventArgs">
            <summary>
                Provides event information for event that indicates that main frame with a document is loaded.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.LoadEventArgs.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new LoadEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
        </member>
        <member name="M:DotNetBrowser.Events.FailLoadingEventArgs.#ctor(DotNetBrowser.Browser,System.Int64,System.Boolean,System.String,System.Int32,System.String)">
            <summary>
                Constructs a new FailLoadingEvent instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="frameId">identifier of a frame that is failed to download.</param>
            <param name="mainFrame">indicates whether the frameId is a main frame.</param>
            <param name="validatedURL">address of a frame which is failed to download.</param>
            <param name="errorCode">describes the reason of failure. Use <see cref="T:DotNetBrowser.Events.NetError"/> to compare.</param>
            <param name="errorDescription">description of the reason of failure.</param>
        </member>
        <member name="M:DotNetBrowser.Events.FailLoadingEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.FailLoadingEventArgs.FrameId">
            <summary>
                Gets identifier of a frame which is failed to load.
            </summary>
            <value>identifier of a frame which is failed to load.</value>
        </member>
        <member name="P:DotNetBrowser.Events.FailLoadingEventArgs.IsMainFrame">
            <summary>
                Gets indicates whether the failed frame is a main frame or not.
            </summary>
            <value>true when the frame is a main frame.</value>
        </member>
        <member name="P:DotNetBrowser.Events.FailLoadingEventArgs.ValidatedURL">
            <summary>
                Gets a string that represents address of a frame which is failed to load.
            </summary>
            <value>address of a frame which is failed to load.</value>
        </member>
        <member name="P:DotNetBrowser.Events.FailLoadingEventArgs.ErrorCode">
            <summary>
                Gets Network error code which is one from the <see cref="T:DotNetBrowser.Events.NetError"/> list.
            </summary>
            <value>
                network error code.
                <see cref="T:DotNetBrowser.Events.NetError"/>
            </value>
        </member>
        <member name="P:DotNetBrowser.Events.FailLoadingEventArgs.ErrorDescription">
            <summary>
                Gets the description of the error code.
            </summary>
            <value>the description of the error code.</value>
        </member>
        <member name="T:DotNetBrowser.Events.FailLoadingFrameHandler">
            <summary>
                Represents the method that will handle event that indicates that frame loading process has been failed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.FailLoadingEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.FinishLoadingEventArgs">
            <summary>
                Provides event information for event that indicates that frame loading process has been finished.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.FinishLoadingEventArgs.#ctor(DotNetBrowser.Browser,System.Int64,System.Boolean,System.String)">
            <summary>
                Constructs a new FinishLoadingEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="frameId">identifier of a frame that is finished loading.</param>
            <param name="mainFrame">indicates whether the frameId is a main frame.</param>
            <param name="validatedURL">address of a frame which is finished loading.</param>
        </member>
        <member name="M:DotNetBrowser.Events.FinishLoadingEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.FinishLoadingEventArgs.FrameId">
            <summary>
                Gets identifier of a frame which is finished loading.
            </summary>
            <value>identifier of a frame which is finished loading.</value>
        </member>
        <member name="P:DotNetBrowser.Events.FinishLoadingEventArgs.IsMainFrame">
            <summary>
                Indicates whether the current frame is a main frame or not.
            </summary>
            <value>true when the frame is a main frame.</value>
        </member>
        <member name="P:DotNetBrowser.Events.FinishLoadingEventArgs.ValidatedURL">
            <summary>
                Gets a string that represents address of a frame which is finished loading.
            </summary>
            <value>address of a frame which is finished loading.</value>
        </member>
        <member name="T:DotNetBrowser.Events.FinishLoadingFrameHandler">
            <summary>
                Represents the method that will handle event that indicates that frame loading process has been finished.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.FinishLoadingEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.FrameLoadEventArgs">
            <summary>
                Provides event information for event that indicates that frame with a document is loaded.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.FrameLoadEventArgs.#ctor(DotNetBrowser.Browser,System.Int64)">
            <summary>
                Constructs a new FrameLoadEvent instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="frameId">identifier of a frame that is loaded.</param>
        </member>
        <member name="M:DotNetBrowser.Events.FrameLoadEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.FrameLoadEventArgs.FrameId">
            <summary>
                Gets identifier of a frame which is loaded.
            </summary>
            <value>identifier of a frame which is loaded.</value>
        </member>
        <member name="T:DotNetBrowser.Events.DocumentLoadedInFrameHandler">
            <summary>
                Represents the method that will handle event that indicates that frame with a document is loaded.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.StartLoadingArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.Internals.InputEventListenerArgs">
            <summary>
                The root event class for all component-level input events.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.SHIFT_DOWN_MASK">
            <summary>
                The Shift key extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.CTRL_DOWN_MASK">
            <summary>
                The Control key extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.META_DOWN_MASK">
            <summary>
                The Meta key extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.ALT_DOWN_MASK">
            <summary>
                The Alt key extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.BUTTON1_DOWN_MASK">
            <summary>
                The Mouse Button1 extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.BUTTON2_DOWN_MASK">
            <summary>
                The Mouse Button2 extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.BUTTON3_DOWN_MASK">
            <summary>
                The Mouse Button3 extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.ALT_GRAPH_DOWN_MASK">
            <summary>
                The AltGraph key extended modifier constant.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.JDK_1_3_MODIFIERS">
            <summary>
                Internal JDK_1_3_MODIFIERS value.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.InputEventListenerArgs.ShouldExcludeButtonFromExtModifiers">
            <summary>
                Excludes button from extended modifiers.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.Internals.InputEventListenerArgs.GetMaskForButton(System.Int32)">
            <summary>
                Returns BUTTONX_DOWN_MASK constant for button number.
            </summary>
            <param name="button">the button number value.</param>
            <returns>BUTTONX_DOWN_MASK constant.</returns>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.InputEventListenerArgs.Button">
            <summary>
                Button number.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.InputEventListenerArgs.When">
            <summary>
                Timestamp in milliseconds when event is fired.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.InputEventListenerArgs.Modifiers">
            <summary>
                Keyboard modifiers.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.KeyEventListenerArgs.KEY_FIRST">
            The first number in the range of ids used for key events.
        </member>
        <member name="F:DotNetBrowser.Events.Internals.KeyEventListenerArgs.KEY_LAST">
            The last number in the range of ids used for key events.
        </member>
        <member name="F:DotNetBrowser.Events.Internals.KeyEventListenerArgs.KEY_TYPED">
            The "key typed" event.  This event is generated when a character is
            entered.  In the simplest case, it is produced by a single key press.
            Often, however, characters are produced by series of key presses, and
            the mapping from key pressed events to key typed events may be
            many-to-one or many-to-many.
        </member>
        <member name="F:DotNetBrowser.Events.Internals.KeyEventListenerArgs.KEY_PRESSED">
            The "key pressed" event. This event is generated when a key
            is pushed down.
        </member>
        <member name="F:DotNetBrowser.Events.Internals.KeyEventListenerArgs.KEY_RELEASED">
            The "key released" event. This event is generated when a key
            is let up.
        </member>
        <member name="T:DotNetBrowser.Events.DocumentLoadedInMainFrameHandler">
            <summary>
                Represents the method that will handle event that indicates that main frame with a document is loaded.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.StartLoadingArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.Internals.MouseEventListenerArgs">
            <summary>
                An event which indicates that a mouse action occurred in a component.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_FIRST">
            <summary>
                The first number in the range of ids used for mouse events.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_LAST">
            <summary>
                The last number in the range of ids used for mouse events.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_CLICKED">
            <summary>
                The "mouse clicked" event. This MouseEvent occurs when a mouse button is pressed and released.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_PRESSED">
            <summary>
                The "mouse pressed" event. This MouseEvent occurs when a mouse button is pushed down.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_RELEASED">
            <summary>
                The "mouse released" event. This MouseEvent occurs when a mouse button is let up.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_MOVED">
            <summary>
                The "mouse moved" event. This MouseEvent occurs when the mouse position changes.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_ENTERED">
            <summary>
                The "mouse entered" event. This MouseEvent occurs when the mouse cursor enters the unobscured part of component's
                geometry.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_EXITED">
            <summary>
                The "mouse exited" event. This MouseEvent occurs when the mouse cursor exits the unobscured part of component's
                geometry.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_DRAGGED">
            <summary>
                The "mouse dragged" event. This MouseEvent occurs when the mouse position changes while a mouse button is pressed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MOUSE_WHEEL">
            <summary>
                The "mouse wheel" event.  This is the only MouseWheelEvent. It occurs when a mouse equipped with a wheel has its
                wheel rotated.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.NOBUTTON">
            <summary>
                Indicates no mouse buttons
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.BUTTON1">
            <summary>
                Indicates mouse button #1
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.BUTTON2">
            <summary>
                Indicates mouse button #2
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseEventListenerArgs.BUTTON3">
            <summary>
                Indicates mouse button #3
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.Internals.MouseEventListenerArgs.GetModifiersEx">
            <summary>
                Returns the extended modifier mask for this event.
            </summary>
            <returns>
                Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix, such as ALT_DOWN_MASK,
                BUTTON1_DOWN_MASK, and others.
            </returns>
        </member>
        <member name="M:DotNetBrowser.Events.Internals.MouseEventListenerArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32)">
            <summary>
                Constructs a new MouseEventListenerArgs instance.
            </summary>
            <param name="mouseEventID">Event ID.</param>
            <param name="x">The horizontal x coordinate for the mouse location.</param>
            <param name="y">The vertical y coordinate for the mouse location.</param>
            <param name="globalX">The absolute horizontal x coordinate for the mouse location.</param>
            <param name="globalY">The absolute vertical y coordinate for the mouse location.</param>
            <param name="button">An integer that indicates, which of the mouse buttons has changed its state.</param>
            <param name="clickCount">The number of mouse clicks associated with event.</param>
            <param name="when">A long integer that gives the time the event occurred.</param>
            <param name="modifiers">
                a modifier mask describing the modifier keys and mouse buttons (for example, shift, ctrl, alt,
                and meta) that are down during the event.
            </param>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.MouseEventListenerArgs.MouseEventID">
            <summary>
                Returns the event type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.MouseEventListenerArgs.X">
            <summary>
                Returns the horizontal x position of the event relative to the source component.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.MouseEventListenerArgs.Y">
            <summary>
                Returns the vertical y position of the event relative to the source component.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.MouseEventListenerArgs.GlobalX">
            <summary>
                Returns the absolute horizontal x position of the event.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.MouseEventListenerArgs.GlobalY">
            <summary>
                Returns the absolute vertical y position of the event.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Events.Internals.MouseEventListenerArgs.ClickCount">
            <summary>
                Returns the number of mouse clicks associated with this event.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseWheelEventListenerArgs.WHEEL_UNIT_SCROLL">
             Constant representing scrolling by "units" (like scrolling with the
             arrow keys)
            
             @see #getScrollType
        </member>
        <member name="F:DotNetBrowser.Events.Internals.MouseWheelEventListenerArgs.WHEEL_BLOCK_SCROLL">
             Constant representing scrolling by a "block" (like scrolling
             with page-up, page-down keys)
            
             @see #getScrollType
        </member>
        <member name="T:DotNetBrowser.Events.NetError">
            <summary>
                The list of network errors.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNDEFINED">
            <summary>
                Undefined
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.IO_PENDING">
            <summary>
                An asynchronous IO operation is not yet complete.  This usually does not
                indicate a fatal error.  Typically this error will be generated as a
                notification to wait for some external notification that the IO operation
                finally completed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FAILED">
            <summary>
                A generic failure occurred.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ABORTED">
            <summary>
                An operation was aborted ( due to user action).
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INVALID_ARGUMENT">
            <summary>
                An argument to the function is incorrect.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INVALID_HANDLE">
            <summary>
                The handle or file descriptor is invalid.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FILE_NOT_FOUND">
            <summary>
                The file or directory cannot be found.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.TIMED_OUT">
            <summary>
                An operation timed out.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FILE_TOO_BIG">
            <summary>
                The file is too large.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNEXPECTED">
            <summary>
                An unexpected error.  This may be caused by a programming mistake or an invalid assumption.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ACCESS_DENIED">
            <summary>
                Permission to access a resource, other than the network, was denied.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NOT_IMPLEMENTED">
            <summary>
                The operation failed because of unimplemented functionality.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INSUFFICIENT_RESOURCES">
            <summary>
                There were not enough resources to complete the operation.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.OUT_OF_MEMORY">
            <summary>
                Memory allocation failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UPLOAD_FILE_CHANGED">
            <summary>
                The file upload failed because the file's modification time was different from the expectation.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SOCKET_NOT_CONNECTED">
            <summary>
                The socket is not connected.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FILE_EXISTS">
            <summary>
                The file already exists.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FILE_PATH_TOO_LONG">
            <summary>
                The path or file name is too long.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FILE_NO_SPACE">
            <summary>
                Not enough room left on the disk.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FILE_VIRUS_INFECTED">
            <summary>
                The file has a virus.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.BLOCKED_BY_CLIENT">
            <summary>
                The client chose to block the request.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NETWORK_CHANGED">
            <summary>
                The network changed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.BLOCKED_BY_ADMINISTRATOR">
            <summary>
                The request was blocked by the URL blacklist configured by the domain administrator.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SOCKET_IS_CONNECTED">
            <summary>
                The socket is already connected.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONNECTION_CLOSED">
            <summary>
                A connection was closed  = corresponding to a TCP FIN.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONNECTION_RESET">
            <summary>
                A connection was reset  = corresponding to a TCP RST.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONNECTION_REFUSED">
            <summary>
                A connection attempt was refused.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONNECTION_ABORTED">
            <summary>
                A connection timed out as a result of not receiving an ACK for data sent.
                This can include a FIN packet that did not get ACK'd.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONNECTION_FAILED">
            <summary>
                A connection attempt failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NAME_NOT_RESOLVED">
            <summary>
                The host name could not be resolved.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INTERNET_DISCONNECTED">
            <summary>
                The Internet connection has been lost.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_PROTOCOL_ERROR">
            <summary>
                An SSL protocol error occurred.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ADDRESS_INVALID">
            <summary>
                The IP address or port number is invalid  = e.g., cannot connect to the IP
                address 0 or the port 0.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ADDRESS_UNREACHABLE">
            <summary>
                The IP address is unreachable.  This usually means that there is no route
                to the specified host or network.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_CLIENT_AUTH_CERT_NEEDED">
            <summary>
                The server requested a client certificate for SSL client authentication.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.TUNNEL_CONNECTION_FAILED">
            <summary>
                A tunnel connection through the proxy could not be established.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NO_SSL_VERSIONS_ENABLED">
            <summary>
                No SSL protocol versions are enabled.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_VERSION_OR_CIPHER_MISMATCH">
            <summary>
                The client and server don't support a common SSL protocol version or cipher suite.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_RENEGOTIATION_REQUESTED">
            <summary>
                The server requested a renegotiation  = rehandshake,.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PROXY_AUTH_UNSUPPORTED">
            <summary>
                The proxy requested authentication  = for tunnel establishment, with an unsupported method.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_ERROR_IN_SSL_RENEGOTIATION">
            <summary>
                During SSL renegotiation  = rehandshake,, the server sent a certificate with an error.
                Note: this error is not in the -2xx range so that it won't be handled as a certificate error.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.BAD_SSL_CLIENT_AUTH_CERT">
            <summary>
                The SSL handshake failed because of a bad or missing client certificate.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONNECTION_TIMED_OUT">
            <summary>
                A connection attempt timed out.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.HOST_RESOLVER_QUEUE_TOO_LARGE">
            <summary>
                There are too many pending DNS resolves, so a request in the queue was aborted.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SOCKS_CONNECTION_FAILED">
            <summary>
                Failed establishing a connection to the SOCKS proxy server for a target host.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SOCKS_CONNECTION_HOST_UNREACHABLE">
            <summary>
                The SOCKS proxy server failed establishing connection to the target host
                because that host is unreachable.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NPN_NEGOTIATION_FAILED">
            <summary>
                The request to negotiate an alternate protocol failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_NO_RENEGOTIATION">
            <summary>
                The peer sent an SSL no_renegotiation alert message.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.WINSOCK_UNEXPECTED_WRITTEN_BYTES">
            <summary>
                Winsock sometimes reports more data written than passed.  This is probably due to a broken LSP.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_DECOMPRESSION_FAILURE_ALERT">
            <summary>
                An SSL peer sent us a fatal decompression_failure alert. This typically occurs when a peer
                selects DEFLATE compression in the mistaken belief that it supports it.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_BAD_RECORD_MAC_ALERT">
            <summary>
                An SSL peer sent us a fatal bad_record_mac alert. This has been observed from servers with
                buggy DEFLATE support.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PROXY_AUTH_REQUESTED">
            <summary>
                The proxy requested authentication  = for tunnel establishment.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_UNSAFE_NEGOTIATION">
            <summary>
                A known TLS strict server didn't offer the renegotiation extension.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_WEAK_SERVER_EPHEMERAL_DH_KEY">
            <summary>
                The SSL server attempted to use a weak ephemeral Diffie-Hellman key.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PROXY_CONNECTION_FAILED">
            <summary>
                Could not create a connection to the proxy server. An error occurred either
                in resolving its name, or in connecting a socket to it. Note that this does
                NOT include failures during the actual "CONNECT" method of an HTTP proxy.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.MANDATORY_PROXY_CONFIGURATION_FAILED">
            <summary>
                A mandatory proxy configuration could not be used. Currently this means that
                a mandatory PAC script could not be fetched, parsed or executed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PRECONNECT_MAX_SOCKET_LIMIT">
            <summary>
                We've hit the max socket limit for the socket pool while preconnecting.
                We don't bother trying to preconnect more sockets.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED">
            <summary>
                The permission to use the SSL client certificate's private key was denied.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY">
            <summary>
                The SSL client certificate has no private key.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PROXY_CERTIFICATE_INVALID">
            <summary>
                The certificate presented by the HTTPS Proxy was invalid.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NAME_RESOLUTION_FAILED">
            <summary>
                An error occurred when trying to do a name resolution  = DNS,.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NETWORK_ACCESS_DENIED">
            <summary>
                Permission to access the network was denied. This is used to distinguish
                errors that were most likely caused by a firewall from other access denied errors.
                See also ERR_ACCESS_DENIED.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.TEMPORARILY_THROTTLED">
            <summary>
                The request throttler module cancelled this request to avoid DDOS.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.HTTPS_PROXY_TUNNEL_RESPONSE">
            <summary>
                A request to create an SSL tunnel connection through the HTTPS proxy
                received a non-200  = OK, and non-407  = Proxy Auth, response. The response body
                might include a description of why the request failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_CLIENT_AUTH_SIGNATURE_FAILED">
            <summary>
                <para>
                    We were unable to sign the CertificateVerify data of an SSL client auth
                    handshake with the client certificate's private key.
                </para>
                <para>
                    Possible causes for this include the user implicitly or explicitly
                    denying access to the private key, the private key may not be valid for
                    signing, the key may be relying on a cached handle which is no longer
                    valid, or the CSP won't allow arbitrary data to be signed.
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.MSG_TOO_BIG">
            <summary>
                The message was too large for the transport.
                = for example a UDP message which exceeds size threshold,.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SPDY_SESSION_ALREADY_EXISTS">
            <summary>
                A SPDY session already exists, and should be used instead of this connection.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.WS_PROTOCOL_ERROR">
            <summary>
                Websocket protocol error. Indicates that we are terminating the connection
                due to a malformed frame or other protocol violation.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PROTOCOL_SWITCHED">
            <summary>
                Connection was aborted for switching to another protocol. WebSocket abort
                SocketStream connection when alternate protocol is found.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ADDRESS_IN_USE">
            <summary>
                Returned when attempting to bind an address that is already in use.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_HANDSHAKE_NOT_COMPLETED">
            <summary>
                An operation failed because the SSL handshake has not completed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_BAD_PEER_PUBLIC_KEY">
            <summary>
                SSL peer's public key is invalid.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SSL_PINNED_KEY_NOT_IN_CERT_CHAIN">
            <summary>
                The certificate didn't match the built-in public key pins for the host name.
                The pins are set in net/http/transport_security_state.cc and require that one
                of a set of public keys exist on the path from the leaf to the root.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CLIENT_AUTH_CERT_TYPE_UNSUPPORTED">
            <summary>
                Server request for client certificate did not contain any types we support.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ORIGIN_BOUND_CERT_GENERATION_TYPE_MISMATCH">
            <summary>
                Server requested one type of cert, then requested a different type while
                the first was still being generated.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_COMMON_NAME_INVALID">
            <summary>
                <para>
                    The server responded with a certificate whose common name did not match the host name.
                    This could mean:
                </para>
                <para>
                    1. An attacker has redirected our traffic to his server and is presenting a certificate
                    for which he knows the private key.
                </para>
                <para>
                    2. The server is misconfigured and responding with the wrong cert.
                </para>
                <para>
                    3. The user is on a wireless network and is being redirected to the network's login page.
                </para>
                <para>
                    4. The OS has used a DNS search suffix and the server doesn't have a certificate for
                    the abbreviated name in the address bar.
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_DATE_INVALID">
            <summary>
                <para>
                    The server responded with a certificate that, by our clock, appears to
                    either not yet be valid or to have expired.  This could mean:
                </para>
                <para>
                    1. An attacker is presenting an old certificate for which he has managed
                    to obtain the private key.
                </para>
                <para>
                    2. The server is misconfigured and is not presenting a valid cert.
                </para>
                <para>
                    3. Our clock is wrong.
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_AUTHORITY_INVALID">
            <summary>
                <para>
                    The server responded with a certificate that is signed by an authority we don't trust.
                    The could mean:
                </para>
                <para>
                    1. An attacker has substituted the real certificate for a cert that
                    contains his public key and is signed by his cousin.
                </para>
                <para>
                    2. The server operator has a legitimate certificate from a CA we don't
                    know about, but should trust.
                </para>
                <para>
                    3. The server is presenting a self-signed certificate, providing no
                    defense against active attackers  = but foiling passive attackers.
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_CONTAINS_ERRORS">
            <summary>
                <para>
                    The server responded with a certificate that contains errors.
                    This error is not recoverable.
                </para>
                <para>
                    MSDN describes this error as follows:
                    "The SSL certificate contains errors."
                    NOTE: It's unclear how this differs from ERR_CERT_INVALID. For consistency,
                    use that code instead of this one from now on.
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_NO_REVOCATION_MECHANISM">
            <summary>
                The certificate has no mechanism for determining if it is revoked.  In
                effect, this certificate cannot be revoked.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_UNABLE_TO_CHECK_REVOCATION">
            <summary>
                <para>
                    Revocation information for the security certificate for this site is not
                    available.  This could mean:
                </para>
                <para>
                    1. An attacker has compromised the private key in the certificate and is
                    blocking our attempt to find out that the cert was revoked.
                </para>
                <para>
                    2. The certificate is unrevoked, but the revocation server is busy or
                    unavailable.
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_REVOKED">
            <summary>
                The server responded with a certificate has been revoked.
                We have the capability to ignore this error, but it is probably not the
                thing to do.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_INVALID">
            <summary>
                <para>
                    The server responded with a certificate that is invalid.
                    This error is not recoverable.
                </para>
                <para>
                    MSDN describes this error as follows:
                    "The SSL certificate is invalid."
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_WEAK_SIGNATURE_ALGORITHM">
            <summary>
                The server responded with a certificate that is signed using a weak
                signature algorithm.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_NON_UNIQUE_NAME">
            <summary>
                The host name specified in the certificate is not unique.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_WEAK_KEY">
            <summary>
                The server responded with a certificate that contains a weak key  = e.g.
                a too-small RSA key.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CERT_END">
            <summary>
                The value immediately past the last certificate error code.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INVALID_URL">
            <summary>
                The URL is invalid.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DISALLOWED_URL_SCHEME">
            <summary>
                The scheme of the URL is disallowed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNKNOWN_URL_SCHEME">
            <summary>
                The scheme of the URL is unknown.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.TOO_MANY_REDIRECTS">
            <summary>
                Attempting to load an URL resulted in too many redirects.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNSAFE_REDIRECT">
            <summary>
                Attempting to load an URL resulted in an unsafe redirect  = e.g., a redirect
                to file:// is considered unsafe.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNSAFE_PORT">
            <summary>
                Attempting to load an URL with an unsafe port number.  These are port
                numbers that correspond to services, which are not robust to spurious input
                that may be constructed as a result of an allowed web construct  = e.g., HTTP
                looks a lot like SMTP, so form submission to port 25 is denied,.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INVALID_RESPONSE">
            <summary>
                The server's response was invalid.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INVALID_CHUNKED_ENCODING">
            <summary>
                Error in chunked transfer encoding.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.METHOD_NOT_SUPPORTED">
            <summary>
                The server did not support the request method.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNEXPECTED_PROXY_AUTH">
            <summary>
                The response was 407  = Proxy Authentication Required,, yet we did not send
                the request to a proxy.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.EMPTY_RESPONSE">
            <summary>
                The server closed the connection without sending any data.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.RESPONSE_HEADERS_TOO_BIG">
            <summary>
                The headers section of the response is too large.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PAC_STATUS_NOT_OK">
            <summary>
                The PAC requested by HTTP did not have a valid status code  = non-200.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PAC_SCRIPT_FAILED">
            <summary>
                The evaluation of the PAC script failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.REQUEST_RANGE_NOT_SATISFIABLE">
            <summary>
                The response was 416  = Requested range not satisfiable, and the server cannot
                satisfy the range requested.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.MALFORMED_IDENTITY">
            <summary>
                The identity used for authentication is invalid.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONTENT_DECODING_FAILED">
            <summary>
                Content decoding of the response body failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NETWORK_IO_SUSPENDED">
            <summary>
                An operation could not be completed because all network IO
                is suspended.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SYN_REPLY_NOT_RECEIVED">
            <summary>
                FLIP data received without receiving a SYN_REPLY on the stream.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ENCODING_CONVERSION_FAILED">
            <summary>
                Converting the response to target encoding failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT">
            <summary>
                The server sent an FTP directory listing in a format we do not understand.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INVALID_SPDY_STREAM">
            <summary>
                Attempted use of an unknown SPDY stream id.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NO_SUPPORTED_PROXIES">
            <summary>
                There are no supported proxies in the provided list.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SPDY_PROTOCOL_ERROR">
            <summary>
                There is a SPDY protocol error.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INVALID_AUTH_CREDENTIALS">
            <summary>
                Credentials could not be established during HTTP Authentication.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNSUPPORTED_AUTH_SCHEME">
            <summary>
                An HTTP Authentication scheme was tried which is not supported on this
                machine.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ENCODING_DETECTION_FAILED">
            <summary>
                Detecting the encoding of the response failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.MISSING_AUTH_CREDENTIALS">
            <summary>
                = GSSAPI, No Kerberos credentials were available during HTTP Authentication.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNEXPECTED_SECURITY_LIBRARY_STATUS">
            <summary>
                An unexpected, but documented, SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.MISCONFIGURED_AUTH_ENVIRONMENT">
            <summary>
                The environment was not set up correctly for authentication  = for
                example, no KDC could be found or the principal is unknown.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.UNDOCUMENTED_SECURITY_LIBRARY_STATUS">
            <summary>
                An undocumented SSPI or GSSAPI status code was returned.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.RESPONSE_BODY_TOO_BIG_TO_DRAIN">
            <summary>
                The HTTP response was too big to drain.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH">
            <summary>
                The HTTP response contained multiple distinct Content-Length headers.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INCOMPLETE_SPDY_HEADERS">
            <summary>
                SPDY Headers have been received, but not all of them - status or version
                headers are missing, so we're expecting additional frames to complete them.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PAC_NOT_IN_DHCP">
            <summary>
                No PAC URL configuration could be retrieved from DHCP. This can indicate
                either a failure to retrieve the DHCP configuration, or that there was no
                PAC URL configured in DHCP.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION">
            <summary>
                The HTTP response contained multiple Content-Disposition headers.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.RESPONSE_HEADERS_MULTIPLE_LOCATION">
            <summary>
                The HTTP response contained multiple Location headers.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SPDY_SERVER_REFUSED_STREAM">
            <summary>
                SPDY server refused the stream. Client should retry. This should never be a
                user-visible error.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.SPDY_PING_FAILED">
            <summary>
                SPDY server didn't respond to the PING message.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PIPELINE_EVICTION">
            <summary>
                The request couldn't be completed on an HTTP pipeline. Client should retry.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CONTENT_LENGTH_MISMATCH">
            <summary>
                The HTTP response body transferred fewer bytes than were advertised by the
                Content-Length header when the connection is closed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INCOMPLETE_CHUNKED_ENCODING">
            <summary>
                The HTTP response body is transferred with Chunked-Encoding, but the
                terminating zero-length chunk was never sent when the connection is closed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.QUIC_PROTOCOL_ERROR">
            <summary>
                There is a QUIC protocol error.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.HEADERS_TRUNCATED">
            <summary>
                The HTTP headers were truncated by an EOF.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_MISS">
            <summary>
                The cache does not have the requested entry.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_READ_FAILURE">
            <summary>
                Unable to read from the disk cache.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_WRITE_FAILURE">
            <summary>
                Unable to write to the disk cache.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_OPERATION_NOT_SUPPORTED">
            <summary>
                The operation is not supported for this entry.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_OPEN_FAILURE">
            <summary>
                The disk cache is unable to open this entry.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_CREATE_FAILURE">
            <summary>
                The disk cache is unable to create this entry.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_RACE">
            <summary>
                Multiple transactions are racing to create disk cache entries. This is an
                internal error returned from the HttpCache to the HttpCacheTransaction that
                tells the transaction to restart the entry-creation logic because the state
                of the cache has changed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_CHECKSUM_READ_FAILURE">
            <summary>
                The cache was unable to read a checksum record on an entry. This can be
                returned from attempts to read from the cache. It is an internal error,
                returned by the SimpleCache backend, but not by any URLRequest methods
                or members.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.CACHE_CHECKSUM_MISMATCH">
            <summary>
                The cache found an entry with an invalid checksum. This can be returned from
                attempts to read from the cache. It is an internal error, returned by the
                SimpleCache backend, but not by any URLRequest methods or members.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.INSECURE_RESPONSE">
            <summary>
                The server's response was insecure  = e.g. there was a cert error,.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.NO_PRIVATE_KEY_FOR_CERT">
            <summary>
                The server responded to a &lt;keygen&gt; with a generated client cert that we
                don't have the matching private key for.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ADD_USER_CERT_FAILED">
            <summary>
                An error adding to the OS certificate database  = e.g. OS X Keychain,.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FTP_FAILED">
            <summary>
                A generic error for failed FTP control connection command.
                If possible, please use or add a more specific error code.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FTP_SERVICE_UNAVAILABLE">
            <summary>
                The server cannot fulfill the request at this point. This is a temporary
                error.
                FTP response code 421.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FTP_TRANSFER_ABORTED">
            <summary>
                The server has aborted the transfer.
                FTP response code 426.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FTP_FILE_BUSY">
            <summary>
                The file is busy, or some other temporary error condition on opening
                the file.
                FTP response code 450.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FTP_SYNTAX_ERROR">
            <summary>
                Server rejected our command because of syntax errors.
                FTP response codes 500, 501.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FTP_COMMAND_NOT_SUPPORTED">
            <summary>
                Server does not support the command we issued.
                FTP response codes 502, 504.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.FTP_BAD_COMMAND_SEQUENCE">
            <summary>
                Server rejected our command because we didn't issue the commands in right
                order.
                FTP response code 503.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PKCS12_IMPORT_BAD_PASSWORD">
            <summary>
                PKCS #12 import failed due to incorrect password.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PKCS12_IMPORT_FAILED">
            <summary>
                PKCS #12 import failed due to other error.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.IMPORT_CA_CERT_NOT_CA">
            <summary>
                CA import failed - not a CA cert.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.IMPORT_CERT_ALREADY_EXISTS">
            <summary>
                Import failed - certificate already exists in database.
                Note it's a little weird this is an error but reimporting a PKCS12 is ok
                = no-op,.  That's how Mozilla does it, though.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.IMPORT_CA_CERT_FAILED">
            <summary>
                CA import failed due to some other error.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.IMPORT_SERVER_CERT_FAILED">
            <summary>
                Server certificate import failed due to some internal error.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PKCS12_IMPORT_INVALID_MAC">
            <summary>
                PKCS #12 import failed due to invalid MAC.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PKCS12_IMPORT_INVALID_FILE">
            <summary>
                PKCS #12 import failed due to invalid/corrupt file.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PKCS12_IMPORT_UNSUPPORTED">
            <summary>
                PKCS #12 import failed due to unsupported features.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.KEY_GENERATION_FAILED">
            <summary>
                Key generation failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.ORIGIN_BOUND_CERT_GENERATION_FAILED">
            <summary>
                Server-bound certificate generation failed.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.PRIVATE_KEY_EXPORT_FAILED">
            <summary>
                Failure to export private key.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DNS_MALFORMED_RESPONSE">
            <summary>
                DNS resolver received a malformed response.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DNS_SERVER_REQUIRES_TCP">
            <summary>
                DNS server requires TCP
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DNS_SERVER_FAILED">
            <summary>
                <para>
                    DNS server failed.  This error is returned for all of the following
                    error conditions:
                </para>
                <para>
                    1 - Format error - The name server was unable to interpret the query.
                </para>
                <para>
                    2 - Server failure - The name server was unable to process this query
                    due to a problem with the name server.
                </para>
                <para>
                    4 - Not Implemented - The name server does not support the requested
                    kind of query.
                </para>
                <para>
                    5 - Refused - The name server refuses to perform the specified
                    operation for policy reasons.
                </para>
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DNS_TIMED_OUT">
            <summary>
                DNS transaction timed out.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DNS_CACHE_MISS">
            <summary>
                The entry was not found in cache, for cache-only lookups.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DNS_SEARCH_EMPTY">
            <summary>
                Suffix search list rules prevent resolution of the given host name.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Events.NetError.DNS_SORT_ERROR">
            <summary>
                Failed to sort addresses according to RFC3484.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Events.ProvisionalLoadingArgs">
            <summary>
                Provides event information for event that indicates that provisional load for a specified frame was successfully
                committed.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.ProvisionalLoadingArgs.#ctor(DotNetBrowser.Browser,System.Int64,System.Boolean,System.String,System.Boolean)">
            <summary>
                Constructs a new ProvisionalLoadingEvent instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="frameId">identifier of a frame that is loading.</param>
            <param name="mainFrame">indicates whether the frameId is a main frame.</param>
            <param name="url">address of a frame which is loading.</param>
            <param name="isSameDocument">
                indicates whether the loading event is initiated 
                by a navigation within the same document.
            </param>
        </member>
        <member name="M:DotNetBrowser.Events.ProvisionalLoadingArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.ProvisionalLoadingArgs.FrameId">
            <summary>
                Gets identifier of a frame which is loading.
            </summary>
            <value>identifier of a frame which is loading.</value>
        </member>
        <member name="P:DotNetBrowser.Events.ProvisionalLoadingArgs.IsMainFrame">
            <summary>
                Indicates whether the current frame is a main frame or not.
            </summary>
            <value>true when the frame is a main frame.</value>
        </member>
        <member name="P:DotNetBrowser.Events.ProvisionalLoadingArgs.Url">
            <summary>
                Gets a string that represents address of a frame which is loading.
            </summary>
            <value>address of a frame which is loading.</value>
        </member>
        <member name="P:DotNetBrowser.Events.ProvisionalLoadingArgs.IsSameDocument">
            <summary>
                Indicates whether the loading event is initiated by a navigation
                within the same document. Navigations within the same document do not change the
                DOM tree state. The following cases are considered the same document navigation:
            <list type="bullet">
            <item>
            <description>
                Reference fragment navigations (e.g. http://www.example.org/foo.html#bar).
            </description>
            </item>
            <item>
            <description>
                HTML5 History API: <c>pushState()</c> / <c>replaceState()</c> methods.
            </description>
            </item>
            <item>
            <description>
                History navigation within the same page.
            </description>
            </item>
            </list>
            </summary>
            <value>true if the navigation occurs within the same document.</value>
        </member>
        <member name="T:DotNetBrowser.Events.ProvisionalLoadingFrameHandler">
            <summary>
                Represents the method that will handle event that indicates that provisional load for a specified frame was
                successfully committed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.StartLoadingArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.RenderEventArgs">
            <summary>
                Provides event information for event that indicates that the render process is gone or created.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.RenderEventArgs.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new RenderEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
        </member>
        <member name="M:DotNetBrowser.Events.RenderEventArgs.#ctor(DotNetBrowser.Browser,System.Int32,DotNetBrowser.TerminationStatus)">
            <summary>
                Constructs a new RenderEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="errorCode">the code or error that caused render process to exit.</param>
            <param name="terminationStatus">the status of render process termination.</param>
        </member>
        <member name="M:DotNetBrowser.Events.RenderEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.RenderEventArgs.ErrorCode">
            <summary>
                Gets or sets error code that indicates the reason of unexpected render process exit or crash.
            </summary>
            <value>error code that indicates the reason of unexpected render process exit or crash.</value>
        </member>
        <member name="P:DotNetBrowser.Events.RenderEventArgs.TerminationStatus">
            <summary>
                Gets or sets the status of render process termination.
            </summary>
            <value>the status of render process termination.</value>
        </member>
        <member name="T:DotNetBrowser.Events.RenderCreatedHandler">
            <summary>
                Represents the method that will handle event that indicates that the render process is gone or created.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.RenderEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.StartLoadingArgs">
            <summary>
                Provides event information for event that indicates that frame loading process has been started.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.StartLoadingArgs.#ctor(DotNetBrowser.Browser,System.Int64,System.Int64,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
                Constructs a new StartLoadingEvent instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="frameId">identifier of a frame that is started loading.</param>
            <param name="parentFrameId">identifier of the frame containing the navigating frame.</param>
            <param name="mainFrame">indicates whether the frameId is a main frame.</param>
            <param name="validatedURL">address of a frame which is started loading.</param>
            <param name="errorPage">indicates whether the page which is started loading is an error page.</param>
            <param name="isSameDocument">
                indicates whether the loading event is initiated 
                by a navigation within the same document.
            </param>
        </member>
        <member name="M:DotNetBrowser.Events.StartLoadingArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.StartLoadingArgs.FrameId">
            <summary>
                Gets identifier of a frame which is started loading.
            </summary>
            <value>the identifier of a frame which is started loading.</value>
        </member>
        <member name="P:DotNetBrowser.Events.StartLoadingArgs.ParentFrameId">
            <summary>
                Gets identifier of the frame containing the navigating frame, or -1 if
                the frame is not contained in other frame.
            </summary>
            <value>
                identifier of the frame containing the navigating frame, or -1 if
                the frame is not contained in other frame.
            </value>
        </member>
        <member name="P:DotNetBrowser.Events.StartLoadingArgs.IsMainFrame">
            <summary>
                Indicates whether the navigating frame is a main frame.
            </summary>
            <value>true when the navigating frame is a main frame.</value>
        </member>
        <member name="P:DotNetBrowser.Events.StartLoadingArgs.ValidatedURL">
            <summary>
                Gets a string that represents address of the navigating frame.
            </summary>
            <value>address of the navigating frame.</value>
        </member>
        <member name="P:DotNetBrowser.Events.StartLoadingArgs.IsErrorPage">
            <summary>
                Indicates whether the navigating frame is an error page.
            </summary>
            <value>true if the navigating frame is an error page.</value>
        </member>
        <member name="P:DotNetBrowser.Events.StartLoadingArgs.IsSameDocument">
            <summary>
                Indicates whether the loading event is initiated by a navigation
                within the same document. Navigations within the same document do not change the
                DOM tree state. The following cases are considered the same document navigation:
            <list type="bullet">
            <item>
            <description>
                Reference fragment navigations (e.g. http://www.example.org/foo.html#bar).
            </description>
            </item>
            <item>
            <description>
                HTML5 History API: <c>pushState()</c> / <c>replaceState()</c> methods.
            </description>
            </item>
            <item>
            <description>
                History navigation within the same page.
            </description>
            </item>
            </list>
            </summary>
            <value>true if the navigation occurs within the same document.</value>
        </member>
        <member name="T:DotNetBrowser.Events.StartLoadingFrameHandler">
            <summary>
                Represents the method that will handle event that indicates that frame loading process has been started.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.StartLoadingArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.StatusEventArgs">
            <summary>
                Provides event information for event that indicates that the status has been changed.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.StatusEventArgs.#ctor(DotNetBrowser.Browser,System.String)">
            <summary>
                Constructs a new StatusEvent instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="statusText">statusText the status text.</param>
        </member>
        <member name="M:DotNetBrowser.Events.StatusEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.StatusEventArgs.Text">
            <summary>
                Gets a string that represents status text or empty string.
            </summary>
            <value>a string that represents status text or empty string.</value>
        </member>
        <member name="T:DotNetBrowser.Events.StatusEventHandler">
            <summary>
                Represents the method that will handle event that indicates that the status has been changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.StatusEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.Events.TitleEventArgs">
            <summary>
                Provides event information for event that indicates that the title of a document in main frame has been changed.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Events.TitleEventArgs.#ctor(DotNetBrowser.Browser,System.String)">
            <summary>
                Constructs a new TitleEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="title">the new title value.</param>
        </member>
        <member name="M:DotNetBrowser.Events.TitleEventArgs.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.Events.TitleEventArgs.Title">
            <summary>
                Gets the string that represents a new title value.
            </summary>
            <value>the string that represents a new title.</value>
        </member>
        <member name="T:DotNetBrowser.Events.TitleChangedHandler">
            <summary>
                Represents the method that will handle event that indicates that the title of a document in main frame has been
                changed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data <see cref="T:DotNetBrowser.Events.TitleEventArgs"/>.</param>
        </member>
        <member name="T:DotNetBrowser.FileChooserMode">
            <summary>
                List of modes of the browser file chooser dialog.
            </summary>
        </member>
        <member name="F:DotNetBrowser.FileChooserMode.Open">
            <summary>
                Requires that the file exists before allowing the user to pick it.
            </summary>
        </member>
        <member name="F:DotNetBrowser.FileChooserMode.OpenMultiple">
            <summary>
                Like Open, but allows picking multiple files to open.
            </summary>
        </member>
        <member name="F:DotNetBrowser.FileChooserMode.OpenFolder">
            <summary>
                Like Open, but selects a folder.
            </summary>
        </member>
        <member name="F:DotNetBrowser.FileChooserMode.Save">
            <summary>
                Allows picking a nonexistent file, and prompts to overwrite if the file already exists.
            </summary>
        </member>
        <member name="T:DotNetBrowser.HostPortPair">
            <summary>
                Represents combination of host and port.
            </summary>
        </member>
        <member name="M:DotNetBrowser.HostPortPair.#ctor(System.String,System.Int32)">
            <summary>
                Constructs a new HostPortPair instance.
            </summary>
            <param name="host">string that represents host name.</param>
            <param name="port">integer that represents port number.</param>
            <exception cref="T:System.ArgumentException">when host is null or empty.</exception>
            <exception cref="T:System.ArgumentException">when port is less 0.</exception>
        </member>
        <member name="M:DotNetBrowser.HostPortPair.FromString(System.String)">
            <summary>
                Returns a HostPortPair value that corresponds to the specified string information.
            </summary>
            <param name="hostPort">string that represents combination of host and port.
                <example>www.host.com:80</example>
            </param>
            <returns>represents combination of host and port.</returns>
        </member>
        <member name="M:DotNetBrowser.HostPortPair.HasPort">
            <summary>
                Gets a value indicating whether the port have a Value greater than 0.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DotNetBrowser.HostPortPair.Host">
            <summary>
                Gets string that represents host name.
            </summary>
        </member>
        <member name="P:DotNetBrowser.HostPortPair.HostPort">
            <summary>
                Gets string that represents combination of host and port.
            </summary>
        </member>
        <member name="P:DotNetBrowser.HostPortPair.Port">
            <summary>
                Gets integer that represents port number.
            </summary>
        </member>
        <member name="T:DotNetBrowser.HttpHeaders">
            <summary>
                Represents HTTP request and response headers, mapping string header names to list of string values.
            </summary>
        </member>
        <member name="M:DotNetBrowser.HttpHeaders.SetHeader(System.String,System.String)">
            <summary>
                Sets a new header using headerName as key andheaderValue as value. If such a header already exists,
                it will be overridden.
            </summary>
            <param name="headerName">header name.</param>
            <param name="headerValue">header value.</param>
            <exception cref="T:System.ArgumentException">when headerName is null or empty, headerValue is null.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeaders.RemoveHeader(System.String)">
            <summary>
                Removes a header with the header name defined by headerName
            </summary>
            <param name="headerName">header name.</param>
            <returns>header value which has been removed or null if header with this headerName does not exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeaders.RemoveAll">
            <summary>
                Removes all headers.
            </summary>
        </member>
        <member name="M:DotNetBrowser.HttpHeaders.GetHeaders">
            <summary>
                Returns all headers. Changes in this collection does not affect original headers.
            </summary>
            <returns>Dictionary contains all headers.</returns>
        </member>
        <member name="M:DotNetBrowser.HttpHeaders.ContainsHeader(System.String)">
            <summary>
                Returns true if a header with the header name defined by headerName is exists.
            </summary>
            <param name="headerName">header name.</param>
            <returns>true if the header with header name defined by headerName is exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.HttpHeaders.GetHeader(System.String)">
            <summary>
                Returns a header with the header name defined by headerName.
            </summary>
            <param name="headerName">header name.</param>
            <returns>header value or null if header with this headerName does not exists.</returns>
            <exception cref="T:System.ArgumentException">when headerName is null or empty.</exception>
        </member>
        <member name="T:DotNetBrowser.IPCLogger">
            <summary />
        </member>
        <member name="T:DotNetBrowser.Logger">
            <summary />
        </member>
        <member name="M:DotNetBrowser.Logger.#ctor(System.String)">
            <summary />
        </member>
        <member name="P:DotNetBrowser.Logger.LoggingEnabled">
            <summary>
                Gets or sets a value indicating whether logging disabled.
            </summary>
        </member>
        <member name="M:DotNetBrowser.IPCLogger.#ctor(System.String)">
            <summary />
        </member>
        <member name="M:DotNetBrowser.IPCLogger.IsMessageTypeEnabled(DotNetBrowser.MessageType)">
            <summary />
        </member>
        <member name="M:DotNetBrowser.IPCLogger.SetEnabledMessageTypes(System.Collections.Generic.IEnumerable{DotNetBrowser.MessageType})">
            <summary />
        </member>
        <member name="P:DotNetBrowser.Internals.IPC.Messages.OnStartDraggingMessage.Url">
            User is dragging a link into the webview.
        </member>
        <member name="P:DotNetBrowser.Internals.IPC.Messages.OnStartDraggingMessage.UrlTitle">
            The title associated with url.
        </member>
        <member name="P:DotNetBrowser.Internals.IPC.Messages.OnStartDraggingMessage.Text">
            User is dragging plain text into the webview.
        </member>
        <member name="P:DotNetBrowser.Internals.IPC.Messages.OnStartDraggingMessage.Html">
            User is dragging text/html into the webview (e.g., out of Firefox).
        </member>
        <member name="P:DotNetBrowser.Internals.IPC.Messages.OnStartDraggingMessage.FileDescriptionFileName">
            User is dragging data from the webview (e.g., an image).
        </member>
        <member name="M:DotNetBrowser.Internals.IPC.Messages.SetBoundsMessage.#ctor(System.Int32)">
            <summary>
                This constructor is invoked using reflection.
                Do not remove it.
            </summary>
            <param name="uid"> unique identifier of the message. </param>
        </member>
        <member name="T:DotNetBrowser.PluginManager">
            <summary>
                The system for plugins management.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PluginManager.GetPluginsInfo">
            <summary>
                Returns a list with the information about installed plugins.
            </summary>
            <returns>a list with the information about installed plugins.</returns>
        </member>
        <member name="P:DotNetBrowser.PluginManager.PluginFilter">
            <summary>
                Sets a new plugin filter that will be used to decide which plugin
                is available for the current Browser instance. To remove filter and
                make all plugins available set null.
            </summary>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFDefaultNativeCrashHandler">
            <summary>
                Represents default implementation of the NativeCrashHandler that will
                display message if chromium native process crash.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultNativeCrashHandler.OnChromiumProcessExitNotOk(System.Int64)">
            <summary>
                This method is invoked when chromium process exit not ok.
            </summary>
            <param name="errorCode">the error code.</param>
        </member>
        <member name="T:DotNetBrowser.XPathIteratorItem">
            <summary>
                Represents the iterator item over the XPath result node set.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathIteratorItem.Node">
            <summary>
                Gets the next item when result represented as an iterator. If the document tree is modified between iterations
                that will invalidate the iteration and IsError property is returned true. If the
                result cannot be represented as an iterator this method will return null and IsError
                property is returned true.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathIteratorItem.IsError">
            <summary>
                Returns true when an error occurred. ErrorMessage property returns the last error message.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathIteratorItem.ErrorMessage">
            <summary>
                Returns the error message if the last operation failed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.XPathResult">
            <summary>
                Represents the result of evaluating the XPath expression.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.ResultType">
            <summary>
                Gets the result type or null if an error occurred when evaluating XPath expression.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.IsNumber">
            <summary>
                Gets true if the result type is XPathResultType.NUMBER_TYPE.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.Number">
            <summary>
                Gets  the result represented as a number.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.IsString">
            <summary>
                Gets true if the result is XPathResultType.STRING_TYPE
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.String">
            <summary>
                Gets the result represented as a string.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.IsBoolean">
            <summary>
                Gets true if the result is XPathResultType.BOOLEAN_TYPE
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.Boolean">
            <summary>
                Gets the result represented as a boolean.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.IsSingleNode">
            <summary>
                Gets true if the result is XPathResultType.FIRST_ORDERED_NODE_TYPE or XPathResultType.ANY_UNORDERED_NODE_TYPE
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.SingleNode">
            <summary>
                Gets the result represented as a single node.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.IsSnapshotNodes">
            <summary>
                Gets true if the result is XPathResultType.ORDERED_NODE_SNAPSHOT_TYPE
                or XPathResultType.UNORDERED_NODE_SNAPSHOT_TYPE
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.SnapshotNodes">
            <summary>
                Gets the list of nodes when the result type is XPathResultType.ORDERED_NODE_SNAPSHOT_TYPE
                or XPathResultType.UNORDERED_NODE_SNAPSHOT_TYPE
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.IsIterator">
            <summary>
                Gets true if the result is XPathResultType.ORDERED_NODE_ITERATOR_TYPE or
                XPathResultType.UNORDERED_NODE_ITERATOR_TYPE
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.Iterator">
            <summary>
                Gets iterator over the XPath result node set.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.IsError">
            <summary>
                Gets true when an error occurred.
            </summary>
        </member>
        <member name="P:DotNetBrowser.XPathResult.ErrorMessage">
            <summary>
                Gets the error message if the last operation failed, an empty string otherwise.
            </summary>
        </member>
        <member name="T:DotNetBrowser.XPathResultType">
            <summary>
                Represents the type of an XPath evaluation result.
            </summary>
        </member>
        <member name="F:DotNetBrowser.XPathResultType.ANY_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.NUMBER_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.STRING_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.BOOLEAN_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.UNORDERED_NODE_ITERATOR_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.ORDERED_NODE_ITERATOR_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.UNORDERED_NODE_SNAPSHOT_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.ORDERED_NODE_SNAPSHOT_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.ANY_UNORDERED_NODE_TYPE">
            <summary />
        </member>
        <member name="F:DotNetBrowser.XPathResultType.FIRST_ORDERED_NODE_TYPE">
            <summary />
        </member>
        <member name="T:DotNetBrowser.ZoomService">
            <summary>
                Provides access to zoom configuration.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ZoomService.Dispose">
            <summary>
                Dispose object and  managed resources.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ZoomService.Dispose(System.Boolean)">
            <summary>
                Dispose object and managed resources.
            </summary>
            <param name="disposing">True if managed resources should be disposed</param>
        </member>
        <member name="M:DotNetBrowser.ZoomService.Finalize">
            <summary>
                Destructor.
            </summary>
        </member>
        <member name="E:DotNetBrowser.ZoomService.ZoomChangedEvent">
            <summary>
                An event that indicates that the zoom has been changed.
            </summary>
        </member>
        <member name="T:DotNetBrowser.MediaType">
            <summary>
                List of known media types. It's used in <see cref="T:DotNetBrowser.ContextMenuParams"/>.
            </summary>
        </member>
        <member name="F:DotNetBrowser.MediaType.None">
            <summary>
                No special node is in context.
            </summary>
        </member>
        <member name="F:DotNetBrowser.MediaType.Image">
            <summary>
                An image node is selected.
            </summary>
        </member>
        <member name="F:DotNetBrowser.MediaType.Video">
            <summary>
                A video node is selected.
            </summary>
        </member>
        <member name="F:DotNetBrowser.MediaType.Audio">
            <summary>
                An audio node is selected.
            </summary>
        </member>
        <member name="F:DotNetBrowser.MediaType.File">
            <summary>
                A file node is selected.
            </summary>
        </member>
        <member name="F:DotNetBrowser.MediaType.Plugin">
            <summary>
                A plugin node is selected.
            </summary>
        </member>
        <member name="T:DotNetBrowser.KeyFilter">
            <summary>
                A keyboard filter that can be set to the <see cref="T:DotNetBrowser.BrowserView"/> to filter keyboard events.
            </summary>
        </member>
        <member name="M:DotNetBrowser.KeyFilter.Filter(System.Int32)">
            <summary>
                Invoked when the BrowserView component receives key event to ask whether
                it should be sent to the native Chromium web browser control or not. This filter
                doesn't handle the situation when keyboard events are sent from JavaScript code
                on the loaded web page.
            </summary>
            <param name="key">the key to check.</param>
            <returns>true if the passed key should be filtered (canceled).</returns>
        </member>
        <member name="T:DotNetBrowser.DataReceivedParams">
            <summary>
                Represents parameters that are passed to the
                NetworkDelegate.onDataReceived(DataReceivedParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.DataReceivedParams.#ctor(System.Int64,System.String,System.String,System.String,System.String,System.Byte[])">
            <summary>
                Constructs a new DataReceivedParams instance with specified parameters.
            </summary>
            <param name="requestId">A globally unique identifier for this request.</param>
            <param name="url">The current request URL.</param>
            <param name="method">The current request method ("GET", "POST" etc.).</param>
            <param name="charset">charset in lower case from the headers</param>
            <param name="mimeType">mime type in lower case from the headers.</param>
            <param name="data">received part of HTTP response body.</param>
        </member>
        <member name="P:DotNetBrowser.DataReceivedParams.Data">
            <summary>
                Returns the received part of HTTP response body.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DataReceivedParams.MimeType">
            <summary>
                Returns the mime type in lower case from the headers. If there's no mime
                type, returns empty string.
            </summary>
        </member>
        <member name="P:DotNetBrowser.DataReceivedParams.Charset">
            <summary>
                Returns the charset in lower case from the headers. If there's no charset,
                returns empty string.
            </summary>
        </member>
        <member name="T:DotNetBrowser.LoadDataParams">
            <summary>
                Parameters that are used in the Browser.LoadData(long, LoadDataParams) method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.LoadDataParams.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                Constructs a new LoadDataParams instance.
            </summary>
            <param name="data"> a string that represent data to load.</param>
            <param name="mimeType">media type of the data. E.g. "text/html", "image/jpeg" etc.</param>
            <param name="textEncoding">encoding of the data. E.g. "UTF-8".</param>
            <param name="baseURL">
                indicates the origin URL of the document and it's used to resolve links.
                This parameter is used only for HTML data with "text/html" mime type.
            </param>
        </member>
        <member name="M:DotNetBrowser.LoadDataParams.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.LoadDataParams.Data">
            <summary>
                Gets a string that represents data to load.
            </summary>
            <value>a string that represents data to load.</value>
        </member>
        <member name="P:DotNetBrowser.LoadDataParams.MimeType">
            <summary>
                Gets the media type of the data. E.g. "text/html", "image/jpeg" etc.
            </summary>
            <value>the media type of the data.</value>
        </member>
        <member name="P:DotNetBrowser.LoadDataParams.TextEncoding">
            <summary>
                Gets the text encoding of the data to load. E.g. "UTF-8", "ISO-8859-1" etc.
            </summary>
            <value>the text encoding of the data to load.</value>
        </member>
        <member name="P:DotNetBrowser.LoadDataParams.BaseURL">
            <summary>
                Gets origin URL of the document that will be used to resolve links with
                relative path in HTML document. This parameter is used only for HTML data
                with "text/html" mime type.
            </summary>
            <value>the origin URL of the document.</value>
        </member>
        <member name="T:DotNetBrowser.LoadHTMLParams">
            <summary>
                Parameters that are used in the <see cref="M:DotNetBrowser.Browser.LoadHTML(DotNetBrowser.LoadHTMLParams)"/> method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.LoadHTMLParams.#ctor(System.String,System.String,System.String)">
            <summary>
                Constructs a new LoadHTMLParams instance.
            </summary>
            <param name="html">a string that represent a new HTML to be set. Cannot be null.</param>
            <param name="textEncoding">encoding of the html text. E.g. "UTF-8".</param>
            <param name="baseURL">indicates the origin URL of the document and it's used to resolve links.</param>
            <exception cref="T:System.ArgumentException">when when html is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.LoadHTMLParams.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.LoadHTMLParams.HTML">
            <summary>
                Gets a string that represents HTML content.
            </summary>
            <value>a string that represents HTML content.</value>
        </member>
        <member name="P:DotNetBrowser.LoadHTMLParams.TextEncoding">
            <summary>
                Gets a string that represents encoding of the HTML content.
                E.g. "UTF-8", "ISO-8859-1" etc.
            </summary>
            <value>encoding of the HTML content.</value>
        </member>
        <member name="P:DotNetBrowser.LoadHTMLParams.BaseURL">
            <summary>
                Gets origin URL of the document that will be used to resolve links with
                relative path in HTML document.
            </summary>
            <value>the origin URL of the document.</value>
        </member>
        <member name="T:DotNetBrowser.LoadType">
            <summary>
                List of load types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadType.LinkClicked">
            <summary>
                Load was initiated by clicking link on the web page.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadType.FormSubmitted">
            <summary>
                Load was initiated by submitting web form on the web page.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadType.BackForward">
            <summary>
                Load was initiated by using Back/Forward buttons.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadType.Reload">
            <summary>
                Load was initiated by using Reload button.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadType.FormResubmitted">
            <summary>
                Load was initiated by re-submitting web form.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadType.Other">
            <summary>
                Other load reason.
            </summary>
        </member>
        <member name="T:DotNetBrowser.LoadPolicy">
            <summary>
                List of load policy.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.Ignore">
            <summary>
                Ignore loading.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.Download">
            <summary>
                Download resource.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.DownloadTo">
            <summary>
                Download resource to a specified destination.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.CurrentTab">
            <summary>
                Load resource in current tab.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.NewBackgroundTab">
            <summary>
                Load resource in background tab.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.NewForegroundTab">
            <summary>
                Load resource in foreground tab.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.NewWindow">
            <summary>
                Load resource in new window.
            </summary>
        </member>
        <member name="F:DotNetBrowser.LoadPolicy.NewPopup">
            <summary>
                Open a new popup window.
            </summary>
        </member>
        <member name="T:DotNetBrowser.LoadParams">
            <summary>
                Contains the information about load event.
            </summary>
        </member>
        <member name="M:DotNetBrowser.LoadParams.#ctor(System.String,DotNetBrowser.LoadType,DotNetBrowser.LoadPolicy,System.Boolean)">
            <summary>
                Constructs a new LoadParams instance with specified parameters.
            </summary>
            <param name="url">URL of the resource that will be loaded.</param>
            <param name="type">Load type.</param>
            <param name="policy">Load policy.</param>
            <param name="redirect">Indicates whether it's a redirect.</param>
        </member>
        <member name="M:DotNetBrowser.LoadParams.LoadTypeFromInt(System.Int32)">
            <summary>
                Finds and returns LoadType that matches specified value.
            </summary>
            <param name="value">Native value of LoadType.</param>
            <returns>LoadType of specified value.</returns>
        </member>
        <member name="M:DotNetBrowser.LoadParams.LoadPolicyFromInt(System.Int32)">
            <summary>
                Finds and returns LoadPolicy that matches specified value.
            </summary>
            <param name="value">Native value of LoadPolicy.</param>
            <returns>LoadPolicy of specified value.</returns>
        </member>
        <member name="P:DotNetBrowser.LoadParams.Url">
            <summary>
                Gets a string that represents URL of the resource that will be loaded.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoadParams.LoadType">
            <summary>
                Load type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoadParams.LoadPolicy">
            <summary>
                Load policy.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoadParams.IsRedirect">
            <summary>
                Indicates whether it's a redirect.
            </summary>
        </member>
        <member name="T:DotNetBrowser.LoadURLParams">
            <summary>
                Parameters that are used in the <see cref="M:DotNetBrowser.Browser.LoadURL(DotNetBrowser.LoadURLParams)"/> method.
            </summary>
        </member>
        <member name="M:DotNetBrowser.LoadURLParams.#ctor(System.String,System.String)">
            <summary>
                Constructs a new LoadURLParams instance.
            </summary>
            <param name="url">represents URL of the resource that will be loaded. Cannot be null.</param>
            <param name="postData">
                a string that represents POST data in the key=value&amp;key=value... format.
                The supported content type of the POST data is application/x-www-form-urlencoded.
            </param>
            <exception cref="T:System.ArgumentException">when when url is null or empty.</exception>
        </member>
        <member name="M:DotNetBrowser.LoadURLParams.#ctor(System.String,System.String,System.String)">
            <summary>
                Constructs a new LoadURLParams instance with specific url,
                postData and extraHeaders.
            </summary>
            <param name="url">represents URL of a resource that will be loaded. Cannot be null.</param>
            <param name="postData">
                a string that represents POST data. When Content-Type in extra headers is set to
                "application/x-www-form-urlencoded", the POST data must be in the
                key=value format. When Content-Type is set to "text/plain", the
                POST data string can be in any plain format. Cannot be null.
            </param>
            <param name="extraHeaders">
                a string that contains "\n"-separated extra headers. It must contain Content-Type header
                if you send POST data. For example, "Content-Type: application/x-www-form-urlencoded\n"
                or "Content-Type: text/plain\n". Cannot be null.
            </param>
            <exception cref="T:System.ArgumentException">when when url or extraHeaders is null or empty.</exception>
        </member>
        <member name="P:DotNetBrowser.LoadURLParams.Url">
            <summary>
                Gets a string that represents URL of the resource that will be loaded.
            </summary>
            <value>a string that represents URL of the resource that will be loaded.</value>
        </member>
        <member name="P:DotNetBrowser.LoadURLParams.PostData">
            <summary>
                Returns a string that represents POST data that will be sent to a resource
                which address is specified by the
                <see cref="P:DotNetBrowser.LoadURLParams.Url"/> value.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoadURLParams.ExtraHeaders">
            <summary>
                Returns a string that represents extra headers separated by "\n".
            </summary>
            <value>a string that represents extra headers separated by "\n".</value>
        </member>
        <member name="T:DotNetBrowser.LoggerProvider">
            <summary>
                Provides access to different DotNetBrowser Loggers which are used to log Browser,
                IPC and Chromium process messages.
            </summary>
        </member>
        <member name="M:DotNetBrowser.LoggerProvider.Dispose">
            <summary>
                Dispose object and  managed resources.
            </summary>
        </member>
        <member name="M:DotNetBrowser.LoggerProvider.Dispose(System.Boolean)">
            <summary>
                Dispose object and managed resources.
            </summary>
            <param name="disposing">True if managed resources should be disposed</param>
        </member>
        <member name="M:DotNetBrowser.LoggerProvider.Finalize">
            <summary>
                Destructor
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoggerProvider.Instance">
            <summary>
                Gets Logger which is used to log info, debug and error messages.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoggerProvider.ChromiumLogFile">
            <summary>
                The absolute or relative path to store Chromium log file.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoggerProvider.LoggingEnabled">
            <summary>
                Gets or sets a value indicating whether logging disabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoggerProvider.ConsoleLoggingEnabled">
            <summary>
                Gets or sets a value indicating whether console logging is enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoggerProvider.FileLoggingEnabled">
            <summary>
                Gets or sets a value indicating whether file logging is enabled.
            </summary>
        </member>
        <member name="P:DotNetBrowser.LoggerProvider.OutputFile">
            <summary>
                Gets or sets output file.
            </summary>
        </member>
        <member name="T:DotNetBrowser.PluginFilter">
            <summary>
                A plugin filter that is used by Chromium engine to find out what plugin is allowed during
                web page loading. Can be registered per Browser instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PluginFilter.IsPluginAllowed(DotNetBrowser.PluginInfo)">
            <summary>
                Invoked when a web page checks whether specified plugin is allowed or not. When an exception
                is thrown from this method, default behavior will be used - plugin is allowed.
            </summary>
            <param name="pluginInfo">the information about specified plugin.</param>
            <returns>true when plugin is allowed, otherwise - false.</returns>
        </member>
        <member name="T:DotNetBrowser.PluginInfo">
            <summary>
                Contains information about Chromium plugin.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PluginInfo.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},DotNetBrowser.PluginType)">
            <summary>
            </summary>
            <param name="name"></param>
            <param name="path"></param>
            <param name="version"></param>
            <param name="description"></param>
            <param name="mimeTypes"></param>
            <param name="pluginType"></param>
        </member>
        <member name="P:DotNetBrowser.PluginInfo.Name">
            <summary>
            </summary>
        </member>
        <member name="P:DotNetBrowser.PluginInfo.Path">
            <summary>
            </summary>
        </member>
        <member name="P:DotNetBrowser.PluginInfo.Version">
            <summary>
            </summary>
        </member>
        <member name="P:DotNetBrowser.PluginInfo.Description">
            <summary>
            </summary>
        </member>
        <member name="P:DotNetBrowser.PluginInfo.MimeTypes">
            <summary>
            </summary>
        </member>
        <member name="P:DotNetBrowser.PluginInfo.PluginType">
            <summary>
            </summary>
        </member>
        <member name="T:DotNetBrowser.PopupHandler">
            <summary>
                Implementers of PopupHandler may manage newly created popup windows
                that were opened using the window.open JavaScript function.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PopupHandler.HandlePopup(DotNetBrowser.PopupParams)">
            <summary>
                Creates a container to display a new browser window, identified by popupParams.
                Return null to prevent popup from being displayed.
            </summary>
            <param name="popupParams">Requested container parameters.</param>
            <returns>Container window or null to suppress popup.</returns>
        </member>
        <member name="T:DotNetBrowser.PopupParams">
            <summary>
                Provides event information for event that occurs before creating a new browser window.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PopupParams.#ctor(DotNetBrowser.Browser,System.String,System.String)">
            <summary>
                Construct a new PopupParams instance.
            </summary>
            <param name="parent">the parent of new window.</param>
            <param name="target">target name of newly created window</param>
            <param name="url">initial url of newly created window</param>
        </member>
        <member name="M:DotNetBrowser.PopupParams.ToString">
            <summary>
                Represent object as string
            </summary>
            <returns>a string that represents the object</returns>
        </member>
        <member name="P:DotNetBrowser.PopupParams.Parent">
            <summary>
                Gets the parent for the current popup window.
            </summary>
            <value>the parent for the current popup window.</value>
        </member>
        <member name="P:DotNetBrowser.PopupParams.TargetName">
            <summary>
                Gets the popup window target name that can be passed
                through window.open JavaScript function.
                The name can be used to refer the window again in JavaScript.
            </summary>
            <value>the popup window target name.</value>
        </member>
        <member name="P:DotNetBrowser.PopupParams.URL">
            <summary>
                Gets the URL of the page to open in the new window.
                This argument could be blank.
            </summary>
            <value>the address of the page to open in the new window.</value>
        </member>
        <member name="T:DotNetBrowser.PostDataContentType">
            <summary>
                Represents Content-Type of POST data.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PostDataContentType.FORM_URL_ENCODED">
            <summary>
                Represents the application/x-www-form-urlencoded Content-Type.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PostDataContentType.MULTIPART_FORM_DATA">
            <summary>
                Represents the multipart/form-data Content-Type.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PostDataContentType.PLAIN_TEXT">
            <summary>
                Represents the text/plain Content-Type.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PostDataContentType.BYTES">
            <summary>
                Represents raw bytes of upload data in HTTP request.
            </summary>
        </member>
        <member name="F:DotNetBrowser.PostDataContentType.UNDEFINED">
            <summary>
                Undefined
            </summary>
        </member>
        <member name="T:DotNetBrowser.PromptDialogParams">
            <summary>
                The OnPrompt event parameters.
            </summary>
        </member>
        <member name="M:DotNetBrowser.PromptDialogParams.#ctor(DotNetBrowser.Browser,System.String,System.String,System.String)">
            <summary>
                Constructs a new PromtDialogEventArgs instance.
            </summary>
            <param name="browser">the browser instance of the dialog.</param>
            <param name="url">the address of the web page that causes this dialog.</param>
            <param name="message">a string that represents the dialog message.</param>
            <param name="promptText">a string that represents the new prompt text</param>
        </member>
        <member name="P:DotNetBrowser.PromptDialogParams.PromptText">
            <summary>
                Prompt dialog text.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Internals.ProxyParams">
            <summary>
                Provides information about proxy settings.
            </summary>
        </member>
        <member name="M:DotNetBrowser.Internals.ProxyParams.CreateSystem">
            <summary>
                Creates ProxyParams instance with Type.UseSystemProxy ProxyType.
            </summary>
            <returns>ProxyParams instance that is configured to use system proxy settings.</returns>
        </member>
        <member name="M:DotNetBrowser.Internals.ProxyParams.CreateDirect">
            <summary>
                Creates ProxyParams instance with Type.UseDirectProxy ProxyType.
            </summary>
            <returns>ProxyParams instance that is configured to use direct proxy settings.</returns>
        </member>
        <member name="M:DotNetBrowser.Internals.ProxyParams.CreateAutoDetect">
            <summary>
                Creates ProxyParams instance with Type.AutoDetectProxy ProxyType.
            </summary>
            <returns>ProxyParams instance that is configured to use auto detect proxy settings.</returns>
        </member>
        <member name="M:DotNetBrowser.Internals.ProxyParams.CreateProxyFromPAC(DotNetBrowser.URLProxyConfig)">
            <summary>
                Creates ProxyParams instance with Type.UseProxyFromPAC ProxyType.
            </summary>
            <param name="proxyConfig">Proxy auto config file URL.</param>
            <returns>ProxyParams instance that is configured to use proxy auto config file URL.</returns>
        </member>
        <member name="M:DotNetBrowser.Internals.ProxyParams.CreateCustomProxy(DotNetBrowser.CustomProxyConfig)">
            <summary>
                Creates ProxyParams instance with Type.UseCustomProxy ProxyType.
            </summary>
            <param name="proxyConfig">Proxy config.</param>
            <returns>ProxyParams instance that is configured to use custom proxy settings.</returns>
        </member>
        <member name="P:DotNetBrowser.Internals.ProxyParams.ProxyType">
            <summary>
                Proxy type.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.ProxyParams.ProxyRules">
            <summary>
                Proxy rules.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.ProxyParams.ProxyBypassRules">
            <summary>
                Proxy bypass rules.
            </summary>
        </member>
        <member name="P:DotNetBrowser.Internals.ProxyParams.ProxyAutoConfigURL">
            <summary>
                Proxy auto config file URL.
            </summary>
        </member>
        <member name="T:DotNetBrowser.Internals.ProxyParams.Type">
            <summary>
                Proxy types.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.ProxyParams.Type.UseSystemProxy">
            <summary>
                Use proxy settings defined in operating system.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.ProxyParams.Type.UseDirectProxy">
            <summary>
                User direct connection without proxy server.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.ProxyParams.Type.AutoDetectProxy">
            <summary>
                Automatically detect proxy settings.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.ProxyParams.Type.UseProxyFromPAC">
            <summary>
                User proxy settings from PAC file.
            </summary>
        </member>
        <member name="F:DotNetBrowser.Internals.ProxyParams.Type.UseCustomProxy">
            <summary>
                User custom proxy settings.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ReloadPostDataParams">
            <summary>
                Represents parameters that are passed to the OnReloadPostData event.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ReloadPostDataParams.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new ReloadPostDataEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
        </member>
        <member name="P:DotNetBrowser.ReloadPostDataParams.Status">
            <summary>
                Gets or sets the dialog close status indicates the way (OK or Cancel button) the dialog was closed
                <see cref="T:DotNetBrowser.CloseStatus"/>.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ReloadPostDataParams.Browser">
            <summary>
                Gets the browser instance of the dialog.
            </summary>
            <value>the owner of this dialog.</value>
        </member>
        <member name="T:DotNetBrowser.ResourceParams">
            <summary>
                Represents information about resource.
            </summary>
        </member>
        <member name="M:DotNetBrowser.ResourceParams.#ctor(System.String,System.String,DotNetBrowser.ResourceType)">
            <summary>
                Constructs a new ResourceParams instance.
            </summary>
            <param name="url">represents URL of the resource that will be loaded.</param>
            <param name="method">
                HTTP request/response method name: "GET" or "POST". The method name
                depends on how web browser engine is going to request resource from web server.
            </param>
            <param name="resourceType">type of the resource that has initiated the request.</param>
        </member>
        <member name="P:DotNetBrowser.ResourceParams.URL">
            <summary>
                Gets URL of the resource.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ResourceParams.Method">
            <summary>
                Gets HTTP request/response method name: "GET" or "POST". The method name
                depends on how web browser engine is going to request resource from web server.
            </summary>
        </member>
        <member name="P:DotNetBrowser.ResourceParams.ResourceType">
            <summary>
                Gets type of the resource that has initiated the request.
            </summary>
        </member>
        <member name="T:DotNetBrowser.ResourceType">
            <summary>
                Type of the resource that has initiated the request.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.MAIN_FRAME">
            <summary>
                Top level page.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.SUB_FRAME">
            <summary>
                Frame or IFRAME.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.STYLESHEET">
            <summary>
                A CSS stylesheet.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.SCRIPT">
            <summary>
                An external script.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.IMAGE">
            <summary>
                An image (jpg/gif/png/etc).
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.FONT_RESOURCE">
            <summary>
                A font.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.SUB_RESOURCE">
            <summary>
                An "other" sub-resource.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.OBJECT">
            <summary>
                An object (or embed) tag for a plugin, or a resource that a plugin requested.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.MEDIA">
            <summary>
                A media resource.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.WORKER">
            <summary>
                The main resource of a dedicated worker.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.SHARED_WORKER">
            <summary>
                The main resource of a shared worker.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.PREFETCH">
            <summary>
                An explicitly requested prefetch.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.FAVICON">
            <summary>
                A favicon.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.XHR">
            <summary>
                A XMLHttpRequest.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.PING">
            <summary>
                A ping request for &lt;a ping&gt;.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.SERVICE_WORKER">
            <summary>
                The main resource of a service worker.
            </summary>
        </member>
        <member name="F:DotNetBrowser.ResourceType.LAST_TYPE">
            <summary>
                Place holder so we don't need to change ValidType every time.
            </summary>
        </member>
        <member name="T:DotNetBrowser.SavePageType">
            <summary>
                Determines how the web page will be saved via the <see cref="M:DotNetBrowser.Browser.SaveWebPage(System.String,System.String,DotNetBrowser.SavePageType)"/>
                method.
            </summary>
        </member>
        <member name="F:DotNetBrowser.SavePageType.ONLY_HTML">
            <summary>
                Single HTML.
            </summary>
        </member>
        <member name="F:DotNetBrowser.SavePageType.COMPLETE_HTML">
            <summary>
                HTML file with required resources (e.g. images, css etc.).
            </summary>
        </member>
        <member name="F:DotNetBrowser.SavePageType.MHTML">
            <summary>
                MHTML file.
            </summary>
        </member>
        <member name="T:DotNetBrowser.TerminationStatus">
            <summary>
                List of possible render process termination statuses.
            </summary>
        </member>
        <member name="F:DotNetBrowser.TerminationStatus.NormalTermination">
            <summary>
                Zero exit status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.TerminationStatus.AbnormalTermination">
            <summary>
                Non-zero exit status.
            </summary>
        </member>
        <member name="F:DotNetBrowser.TerminationStatus.ProcessWasKilled">
            <summary>
                e.g. SIGKILL or task manager kill.
            </summary>
        </member>
        <member name="F:DotNetBrowser.TerminationStatus.ProcessCrashed">
            <summary>
                e.g. Segmentation fault.
            </summary>
        </member>
        <member name="F:DotNetBrowser.TerminationStatus.StillRunning">
            <summary>
                Child hasn't exited yet.
            </summary>
        </member>
        <member name="F:DotNetBrowser.TerminationStatus.MaxEnum">
            <summary>
                Internal value.
            </summary>
        </member>
        <member name="F:DotNetBrowser.TerminationStatus.Unknown">
            <summary>
                Unknown termination status.
            </summary>
        </member>
        <member name="T:DotNetBrowser.UnloadDialogParams">
            <summary>
                The OnBeforeUnload event parameters.
            </summary>
        </member>
        <member name="M:DotNetBrowser.UnloadDialogParams.#ctor(DotNetBrowser.Browser,System.String,System.Boolean)">
            <summary>
                Constructs a new UnloadDialogEventArgs instance.
            </summary>
            <param name="browser">the browser instance on which the event is initially occurred.</param>
            <param name="message">the new message value.</param>
            <param name="isReload">the indicates whether web page reload action causes the unload dialog message.</param>
        </member>
        <member name="P:DotNetBrowser.UnloadDialogParams.Browser">
            <summary>
                Gets the browser instance of the dialog.
            </summary>
            <value>the owner of this dialog.</value>
        </member>
        <member name="P:DotNetBrowser.UnloadDialogParams.Message">
            <summary>
                Gets a string that represents the dialog message.
            </summary>
            <value>a string that represents the dialog message.</value>
        </member>
        <member name="P:DotNetBrowser.UnloadDialogParams.IsReload">
            <summary>
                Gets indicates whether web page reload action causes the unload dialog message.
            </summary>
            <value>
                true if web page is going to be reloaded and false
                if Browser loads other web page.
            </value>
        </member>
        <member name="P:DotNetBrowser.UnloadDialogParams.Status">
            <summary>
                Gets or sets the dialog close status indicates the way (OK or Cancel button) the dialog was closed
                <see cref="T:DotNetBrowser.CloseStatus"/>.
            </summary>
        </member>
        <member name="T:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView">
            <summary>
                WinForms implementation of the BrowserView interface.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new WinFormsBrowserView component based on passed browser instance.
            </summary>
            <param name="browser">The Browser instance associated with the current view.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.UpdateSize(System.Int32,System.Int32)">
            <summary>
                Updates size of the this view.
            </summary>
            <param name="width">New width in pixels.</param>
            <param name="height">New height in pixels.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.GetComponent">
            <summary>
                Returns UIComponent instance that can be embedded into application GUI.
            </summary>
            <returns>UIComponent instance.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.GetImage">
            <summary>
                Returns image representation of the currently loaded and displayed web page.
            </summary>
            <returns>The drawing.Image instance.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.SetKeyFilter(DotNetBrowser.KeyFilter)">
            <summary>
                Configures KeyFilter for this view.
            </summary>
            <param name="keyFilter">The KeyFilter instance.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.GetDeviceScaleFactor">
            <summary>
                Returns device scale factor that is used to render this view.
            </summary>
            <returns>The device scale factor.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.Dispose(System.Boolean)">
            <summary>
                Disposes current view.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.IsDisposed">
            <summary>
                Gets true when the current view instance is disposed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.Browser">
            <summary>
                Browser instance associated with the current view.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.InputSimulator">
            <summary>
                Returns input simulation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WinForms.Internals.WinFormsLightBrowserView.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler">
            <summary>
                Represents default implementation of the <see cref="T:DotNetBrowser.DialogHandler"/> that will
                display an appropriate UI modal dialog for each method. All dialog texts
                are localized with English language. If you need to support other
                languages or localize the dialogs, please consider using your own
                implementation of the DialogHandler.
            </summary>
        </member>
        <member name="F:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.component">
            <summary>
                Owner UI component.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructs WinFormsDefaultDialogHandler instance.
            </summary>
            <param name="component">Owner UI component.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnAlert(DotNetBrowser.DialogParams)">
            <summary>
                This method is invoked when JavaScript alert dialog should be displayed. In this
                method you can display standard modal dialog with the message
                that you can get from parameters. Please note that it's not necessary to
                display modal dialog in this method.
            </summary>
            <param name="parameters">The alert dialog parameters.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnConfirmation(DotNetBrowser.DialogParams)">
            <summary>
                This method is invoked when JavaScript confirmation dialog should be displayed. In this
                method you can display standard modal dialog with the message
                that you can get from parameters. Please note that it's not necessary to
                display modal dialog in this method.
            </summary>
            <param name="parameters">The confirmation dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnPrompt(DotNetBrowser.PromptDialogParams)">
            <summary>
                This method is invoked when JavaScript prompt dialog should be displayed. In this
                method you can display standard modal dialog with the message and with text
                field with default prompt text that you can get from parameters.
                Please note that it's not necessary to display modal dialog in this method.
            </summary>
            <param name="parameters">The prompt dialog parameters such as dialog message and default prompt text.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnFileChooser(DotNetBrowser.FileChooserParams)">
            <summary>
                This method is invoked when file selection is to be done. You can use this method to
                display a file chooser dialog with the required type that you can find out from the
                FileChooserMode.
            </summary>
            <param name="parameters">The file chooser dialog parameters such as dialog mode, etc.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnBeforeUnload(DotNetBrowser.UnloadDialogParams)">
            <summary>
                This method is invoked before web page unload. Some web page may override the
                window.onbeforeunload JavaScript function, so that a confirmation dialog will
                be shown every time when user try to reload web page or navigate to another web page.
                You can use this method to display an appropriate confirmation message dialog to
                ask user whether he or she really wants to leave or reload the web page.
            </summary>
            <param name="parameters">The unload dialog parameters such as dialog message and reload flag.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnSelectCertificate(DotNetBrowser.CertificatesDialogParams)">
            <summary>
                This method is invoked when web server requires authorization via SSL client certificate.
                The end user must select one of the provided certificates.
            </summary>
            <param name="parameters">
                Use it to get information about SSL authorization request, get a list of
                available certificates and select the required one.
            </param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnReloadPostData(DotNetBrowser.ReloadPostDataParams)">
            <summary>
                This method is invoked when attempt to reload a web page that has POST data and the user
                must confirm whether POST data must be sent again or reload must be canceled.
            </summary>
            <param name="parameters">The reload dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDialogHandler.OnColorChooser(DotNetBrowser.ColorChooserParams)">
            <summary>
                This method is invoked when color selection is to be done, when user selects HTML5 input element with color type.
                You can use this method to display a color chooser dialog.
            </summary>
            <param name="parameters">The color chooser dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsDefaultDownloadHandler">
            <summary>
                Represents default implementation of the DownloadHandler that will
                display file save dialog where user can select the destination file.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDownloadHandler.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructs WinFormsDefaultDownloadHandler instance.
            </summary>
            <param name="component">Owner UI component.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDownloadHandler.#ctor(System.Windows.Forms.Control,DotNetBrowser.DownloadMode)">
            <summary>
                Constructs WinFormsDefaultDownloadHandler instance.
            </summary>
            <param name="component">Owner UI component.</param>
            <param name="downloadMode">a value indicating what kind of download mode should be used.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsDefaultDownloadHandler.AllowDownload(DotNetBrowser.DownloadItem)">
            <summary>
                This method is invoked when Browser is going to download a file. The download
                parameter contains all information about the the file which is going to be downloaded.
                <p />
                This method return FALSE if not select file in chooser dialog.
                <p />
                You can set the absolute file path using in chooser dialog.
            </summary>
            <param name="downloadItem">information about the file that will be downloaded.</param>
            <returns>TRUE to allow downloading the file or FALSE to suppress it.</returns>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsPopupContainer">
            <summary>
                WinForms implementation of PopupContainer.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsPopupContainer.#ctor(System.Windows.Forms.Form)">
            <summary>
                Constructor create WinFormsPopupContainer based on parent form.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsPopupContainer.InsertBrowser(System.Func{DotNetBrowser.Browser},System.Drawing.Rectangle)">
            <summary>
                Creates a WinForms popup window with embedded Browser instance.
            </summary>
            <param name="getBrowser">method which return the new browser instance</param>
            <param name="initialBounds">initial bounds of popup window.</param>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsPopupContainer.InsertBrowser(DotNetBrowser.Browser,System.Drawing.Rectangle)">
            <summary>
                Creates a WinForms popup window with embedded Browser instance.
            </summary>
            <param name="browser">the newly created browser.</param>
            <param name="initialBounds">initial bounds of popup window.</param>
        </member>
        <member name="T:DotNetBrowser.WinForms.WinFormsPopupHandler">
            <summary>
                Default implementation of PopupHandler for WinForms Component.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsPopupHandler.#ctor(System.Windows.Forms.Control)">
            <summary>
                Constructor create WinFormsPopupHandler based on parent control.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WinForms.WinFormsPopupHandler.HandlePopup(DotNetBrowser.PopupParams)">
            <summary>
                Returns WindowsFormPopupContainer.
            </summary>
            <param name="popupParams">Requested container parameters.</param>
            <returns>WindowsFormPopupContainer instance.</returns>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFBrowserView">
            <summary>
                WPF implementation of the BrowserView interface.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.#ctor">
            <summary>
                Constructs a new WPFBrowserView component based on a new browser instance.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new WPFBrowserView component based on passed browser instance.
            </summary>
            <param name="browser">The Browser instance associated with the current view.</param>
            <exception cref="T:System.ArgumentNullException">when browser is null.</exception>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.GetComponent">
            <summary>
                Returns UIComponent instance that can be embedded into application GUI.
            </summary>
            <returns>UIComponent instance.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.GetImage">
            <summary>
                Returns image representation of the currently loaded and displayed web page.
            </summary>
            <returns>The System.Drawing.Image instance or null if web page is not loaded or not displayed.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.UpdateSize(System.Int32,System.Int32)">
            <summary>
                Updates size of the this view.
            </summary>
            <param name="width">New width in pixels.</param>
            <param name="height">New height in pixels.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.SetKeyFilter(DotNetBrowser.KeyFilter)">
            <summary>
                Configures KeyFilter for this view.
            </summary>
            <param name="keyFilter">The KeyFilter instance.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.GetDeviceScaleFactor">
            <summary>
                Returns device scale factor that is used to render this view.
            </summary>
            <returns>The device scale factor.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.Dispose">
            <summary>
                Disposes current view.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.GetInnerView">
            <summary>
                Gets view instance that can be embedded into application GUI.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.Dispose(System.Boolean)">
            <summary>
                Disposes current view.
            </summary>
            <param name="disposing">True if managed resources should be disposed</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFBrowserView.Finalize">
            <summary>
                Destructor
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.IsDisposed">
            <summary>
                Gets true when the current view instance is disposed.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.Browser">
            <summary>
                Browser instance associated with the current view.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.InputSimulator">
            <summary>
                Returns input simulation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.Focused">
            <summary>
                Sets focus or unfocus to the view.
                Unfocus available only for <see cref="!:BrowserType.HEAVYWEIGHT"/> view.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.PreviewMouseWheel">
            <summary>
                Occurs when a mouse wheel is rotated while the control has focus.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.FinishLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been finished.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.StartLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been started.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.FailLoadingFrameEvent">
            <summary>
                An event that indicates that frame loading process has been failed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.ProvisionalLoadingFrameEvent">
            <summary>
                An event that indicates that provisional load for a specified frame was successfully committed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.DocumentLoadedInFrameEvent">
            <summary>
                An event that indicates that frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.DocumentLoadedInMainFrameEvent">
            <summary>
                An event that indicates that main frame with a document is loaded.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.RenderCreatedEvent">
            <summary>
                An event that indicates that the render process is gone or created.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.RenderGoneEvent">
            <summary>
                An event that indicates that the render process is gone.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.RenderResponsiveEvent">
            <summary>
                An event that indicates that the render process is no longer hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.RenderUnresponsiveEvent">
            <summary>
                An event that indicates that the render process is hung.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.StatusChangedEvent">
            <summary>
                An event that indicates that the status has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.TitleChangedEvent">
            <summary>
                An event that indicates that the title of a document in main frame has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.ConsoleMessageEvent">
            <summary>
                An event that indicates that the message was added to the console.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.DragEnterEvent">
            <summary>
                An event that indicates that the object is dragged into the browser's bounds.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.DragExitEvent">
            <summary>
                An event that indicates that the object is dragged out of the browser's bounds.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.DropEvent">
            <summary>
                An event that indicates when a drag-and-drop operation is completed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.GestureEvent">
            <summary>
                An event that indicates when the gesture status has been changed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.DisposeEvent">
            <summary>
                An event that indicates that browser instance disposed.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.ScriptContextCreated">
            <summary>
                An event that indicates that JavaScript context has been created. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="E:DotNetBrowser.WPF.WPFBrowserView.ScriptContextDestroyed">
            <summary>
                An event that indicates that JavaScript context has been destroyed. The event is invoked
                synchronously blocking JavaScript execution. Don't block current method
                execution for too long to avoid web page loading and displaying performance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.BrowserType">
            <summary>
                Gets or sets rendering type for browser that will use for constructs a new WPFBrowserView component based on a new
                browser instance.
                Uses for create a new browser instance only.
            </summary>
            <exception cref="T:System.InvalidOperationException">if the value is set when a browser instance has already been created</exception>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.URL">
            <summary>
                Gets or sets the current Url.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.ZoomLevel">
            <summary>
                Gets or sets zoom level for the currently loaded web page. Zoom level is configured
                for each domain separately. For example, if you load the www.a.com web page and
                set zoom level to 2.5, then load the www.b.org web page, the zoom level for
                www.b.org web page will be reset to default value. When you load the
                www.a.com web page again, its zoom level will be restored to 2.5 automatically.
                <para>
                    This property asynchronously.
                </para>
                <para>
                    <list type="">
                        <item>
                            To zoom in use the positive zoom level. For example, 2.0, 1.5.
                        </item>
                        <item>
                            To zoom out use the negative zoom level. For example, -1.0, -2.5.
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.AudioMuted">
            <summary>
                Gets or sets mutes all audio output for this Browser instance.
                True when audio output must be muted, false otherwise.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.AcceptLanguage">
            <summary>
                Gets or sets a string that represents accept language for this Browser instance and all Browser instances with
                the same BrowserContext.
            </summary>
            <exception cref="T:System.ArgumentNullException">when value set null.</exception>
            <exception cref="T:System.ArgumentException">when value set empty.</exception>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.Preferences">
            <summary>
                Gets or sets browser's preferences.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.PopupHandler">
            <summary>
                Popup windows handler.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.DialogHandler">
            <summary>
                Dialogs handler.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.LoadHandler">
            <summary>
                Load handler that will be invoked every time when Browser loads
                a web page. It can be used to cancel some URL loading.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.ContextMenuHandler">
            <summary>
                Gets or sets the handler for the context menu requests that will be invoked every
                time the user clicks the right mouse button.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.DownloadHandler">
            <summary>
                Gets or sets the file download handler that will be invoked every time the Browser
                downloads a file. By default this method returns null, so all file downloads are suppressed.
            </summary>
            <value>
                the registered file download handler or null if no file
                download handler is currently registered.
            </value>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFBrowserView.InitialFocusOwner">
            <summary>
                Gets or sets the initial focus status for the current view.
                By default, BrowserView obtains the focus after it is shown on a layout.
            </summary>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFDefaultDialogHandler">
            <summary>
                Represents default implementation of the <see cref="T:DotNetBrowser.DialogHandler"/> that will
                display an appropriate UI modal dialog for each method. All dialog texts
                are localized with English language. If you need to support other
                languages or localize the dialogs, please consider using your own
                implementation of the DialogHandler.
            </summary>
        </member>
        <member name="F:DotNetBrowser.WPF.WPFDefaultDialogHandler.component">
            <summary>
                Owner UI component.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.#ctor(System.Windows.UIElement)">
            <summary>
                Constructs WPFDefaultDialogHandler instance.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnAlert(DotNetBrowser.DialogParams)">
            <summary>
                This method is invoked when JavaScript alert dialog should be displayed. In this
                method you can display standard modal dialog with the message
                that you can get from parameters. Please note that it's not necessary to
                display modal dialog in this method.
            </summary>
            <param name="parameters">The alert dialog parameters.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnConfirmation(DotNetBrowser.DialogParams)">
            <summary>
                This method is invoked when JavaScript confirmation dialog should be displayed. In this
                method you can display standard modal dialog with the message
                that you can get from parameters. Please note that it's not necessary to
                display modal dialog in this method.
            </summary>
            <param name="parameters">The confirmation dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnPrompt(DotNetBrowser.PromptDialogParams)">
            <summary>
                This method is invoked when JavaScript prompt dialog should be displayed. In this
                method you can display standard modal dialog with the message and with text
                field with default prompt text that you can get from parameters.
                Please note that it's not necessary to display modal dialog in this method.
            </summary>
            <param name="parameters">The prompt dialog parameters such as dialog message and default prompt text.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnFileChooser(DotNetBrowser.FileChooserParams)">
            <summary>
                This method is invoked when file selection is to be done. You can use this method to
                display a file chooser dialog with the required type that you can find out from the
                FileChooserMode.
            </summary>
            <param name="parameters">The file chooser dialog parameters such as dialog mode, etc.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnBeforeUnload(DotNetBrowser.UnloadDialogParams)">
            <summary>
                This method is invoked before web page unload. Some web page may override the
                window.onbeforeunload JavaScript function, so that a confirmation dialog will
                be shown every time when user try to reload web page or navigate to another web page.
                You can use this method to display an appropriate confirmation message dialog to
                ask user whether he or she really wants to leave or reload the web page.
            </summary>
            <param name="parameters">The unload dialog parameters such as dialog message and reload flag.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnSelectCertificate(DotNetBrowser.CertificatesDialogParams)">
            <summary>
                This method is invoked when web server requires authorization via SSL client certificate.
                The end user must select one of the provided certificates.
            </summary>
            <param name="parameters">
                Use it to get information about SSL authorization request, get a list of
                available certificates and select the required one.
            </param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnReloadPostData(DotNetBrowser.ReloadPostDataParams)">
            <summary>
                This method is invoked when attempt to reload a web page that has POST data and the user
                must confirm whether POST data must be sent again or reload must be canceled.
            </summary>
            <param name="parameters">The reload dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDialogHandler.OnColorChooser(DotNetBrowser.ColorChooserParams)">
            <summary>
                This method is invoked when color selection is to be done, when user selects HTML5 input element with color type.
                You can use this method to display a color chooser dialog.
            </summary>
            <param name="parameters">The color chooser dialog parameters.</param>
            <returns>The CloseStatus.OK when dialog was closed successfully or CloseStatus.CANCEL when dialog was canceled.</returns>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFDefaultDownloadHandler">
            <summary>
                Represents default implementation of the DownloadHandler that will
                display file save dialog where user can select the destination file.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDownloadHandler.#ctor(System.Windows.UIElement)">
            <summary>
                Constructs WPFDefaultDialogHandler instance.
            </summary>
            <param name="component">Owner UI component.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDownloadHandler.#ctor(System.Windows.UIElement,DotNetBrowser.DownloadMode)">
            <summary>
                Constructs WPFDefaultDialogHandler instance.
            </summary>
            <param name="component">Owner UI component.</param>
            <param name="downloadMode">a value indicating what kind of download mode should be used.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFDefaultDownloadHandler.AllowDownload(DotNetBrowser.DownloadItem)">
            <summary>
                This method is invoked when Browser is going to download a file. The download
                parameter contains all information about the the file which is going to be downloaded.
                <p />
                This method return FALSE if not select file in chooser dialog.
                <p />
                You can set the absolute file path using in chooser dialog.
            </summary>
            <param name="downloadItem">information about the file that will be downloaded.</param>
            <returns>TRUE to allow downloading the file or FALSE to suppress it.</returns>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFHeavyBrowserView.InputSimulator">
            <summary>
                Returns input simulation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFHeavyBrowserView.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFPopupHandler">
            <summary>
                Default implementation of PopupHandler for WPF Component.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFPopupHandler.#ctor(System.Windows.FrameworkElement)">
            <summary>
                Constructor create WPFPopupHandler based on parent control.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFPopupHandler.HandlePopup(DotNetBrowser.PopupParams)">
            <summary>
                Returns WPFPopupContainer.
            </summary>
            <param name="popupParams">Requested container parameters.</param>
            <returns>WPFPopupContainer instance.</returns>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFPopupContainer">
            <summary>
                WPF implementation of PopupContainer.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFPopupContainer.#ctor(System.Windows.FrameworkElement)">
            <summary>
                Constructor create WPFPopupContainer based on parent window.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFPopupContainer.InsertBrowser(System.Func{DotNetBrowser.Browser},System.Drawing.Rectangle)">
            <summary>
                Creates a WPF popup window with embedded Browser instance.
            </summary>
            <param name="getBrowser">method which return the new browser instance</param>
            <param name="initialBounds">initial bounds of popup window.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFPopupContainer.InsertBrowser(DotNetBrowser.Browser,System.Drawing.Rectangle)">
            <summary>
                Creates a WPF popup window with embedded Browser instance.
            </summary>
            <param name="browser">the newly created browser.</param>
            <param name="initialBounds">initial bounds of popup window.</param>
        </member>
        <member name="T:DotNetBrowser.WPF.WPFLightBrowserView">
            <summary>
                WPF implementation of the BrowserView interface.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.#ctor(DotNetBrowser.Browser)">
            <summary>
                Constructs a new WPFBrowserView component based on passed browser instance.
            </summary>
            <param name="browser">The Browser instance associated with the current view.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.Dispose">
            <summary>
                Disposes current view.
            </summary>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.UpdateSize(System.Int32,System.Int32)">
            <summary>
                Updates size of the this view.
            </summary>
            <param name="width">New width in pixels.</param>
            <param name="height">New height in pixels.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.GetComponent">
            <summary>
                Returns UIComponent instance that can be embedded into application GUI.
            </summary>
            <returns>UIComponent instance.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.GetImage">
            <summary>
                Returns image representation of the currently loaded and displayed web page.
            </summary>
            <returns>The drawing.Image instance.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.SetKeyFilter(DotNetBrowser.KeyFilter)">
            <summary>
                Configures KeyFilter for this view.
            </summary>
            <param name="keyFilter">The KeyFilter instance.</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.GetDeviceScaleFactor">
            <summary>
                Returns device scale factor that is used to render this view.
            </summary>
            <returns>The device scale factor.</returns>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.Dispose(System.Boolean)">
            <summary>
                Disposes current view.
            </summary>
            <param name="disposing">True if managed resources should be disposed</param>
        </member>
        <member name="M:DotNetBrowser.WPF.WPFLightBrowserView.Finalize">
            <summary>
                Destructor
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFLightBrowserView.Browser">
            <summary>
                Browser instance associated with the current view.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFLightBrowserView.InputSimulator">
            <summary>
                Returns input simulation controller instance.
            </summary>
        </member>
        <member name="P:DotNetBrowser.WPF.WPFLightBrowserView.BackForwardNavigator">
            <summary>
                Returns back-forward navigation controller instance.
            </summary>
        </member>
    </members>
</doc>
